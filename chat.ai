## SYSTEM:

<safe-shell-commands>
bash build.sh
tree-sitter generate
tree-sitter parse test_minimal.greger
tree-sitter parse debug.greger
tree-sitter parse -d pretty debug.greger
tree-sitter parse debug_two_sections.greger
tree-sitter parse -d pretty test_minimal.greger
tree-sitter parse test_simple.greger
tree-sitter parse test_simple_tool.greger
tree-sitter parse test_complex.greger
tree-sitter parse test_nested_tools.greger
tree-sitter parse test_comprehensive.greger
tree-sitter parse test_citations.greger
tree-sitter parse -d pretty test_citations.greger
emacs --batch -l test-citations.el
emacs --batch -l test-complex-citations.el
emacs --batch -l test-all-greger-cases.el
emacs --batch -l debug-test.el
tree-sitter parse -d pretty test_simple.greger
</safe-shell-commands>

IMPORTANT: Don't run any other shell commands than the safe shell commands since I will be afk and not able to approve use of unsafe shell commands. Re-use existing debug scripts etc so you don't have to run unsafe shell commands. If you try to run unsafe commands you'll get stuck waiting for approval indefinitely.

Here's a guide to using tree-sitter: https://www.jonashietala.se/blog/2024/03/19/lets_create_a_tree-sitter_grammar/ (definitely read this if you'll touch the custom scanner!)

Here are example grammars for a bunch of languages: /Users/andreas/src/github/emacs-tree-sitter/tree-sitter-langs/repos. Read some of those examples to get inspiration and ideas.

## USER:


I want to make a custom tree-sitter grammar for the markdown-like format described in ~/projects/greger.el/test/test-greger-parser.el. When parsing the greger syntax, it should return the elisp forms in test-greger-parser.el. Effectively I want to replace the underlying implementation of `greger-parser-parse-dialog-messages-only` with a tree-sitter based grammar.

I want to work on the grammar in isolation here in a clean repo before integrating into greger.el.

I have installed the tree-sitter CLI and run `tree-sitter init`.

Make sure you read the elisp and go examples so you see what complex parsing looks like. Also make sure you read https://www.jonashietala.se/blog/2024/03/19/lets_create_a_tree-sitter_grammar/

I've ported over the test cases from test-greger-parser.el to test-all-greger-cases.el

The tests are passing. But the elisp code is really complex. Parsing in elisp is much slower than parsing in tree-sitter.

So, change it such that the parser handles citation logic.

If `<cite>...</cite>` is encountered anywhere on a line, it starts parsing a new "citations_with_text" object. The content inside `<cite>...</cite>` should be a "text" field on the "citations_with_text" object. After `</cite>` you should assume just whitespace until you encounter `## CITATIONS:` at the start of a new line. Then you should parse those citations and place each entry as an "entry" field on the "citations_with_text" object.

If you encounter a `## CITATIONS:` when you're not parsing "citations_with_text", make a new "citations_without_text" object and add the "entry"s to that.

That should make the markdown to dialog conversion fairly basic, since cited text should be part of the same content entry as the citations (look at the expected value on line 725 of test-greger-parser.el


## ASSISTANT:

I'll help you create a tree-sitter grammar for the greger format. Let me start by examining the test file to understand the expected parsing behavior.

## TOOL USE:

Name: read-file
ID: toolu_01QGELQ9hdkimm4aKif2L6p8

### path

<tool.toolu_01QGELQ9hdkimm4aKif2L6p8>
~/projects/greger.el/test/test-greger-parser.el
</tool.toolu_01QGELQ9hdkimm4aKif2L6p8>

## TOOL RESULT:

ID: toolu_01QGELQ9hdkimm4aKif2L6p8

<tool.toolu_01QGELQ9hdkimm4aKif2L6p8>
;;; test-greger-parser.el --- Tests for greger parser -*- lexical-binding: t -*-

(require 'ert)
(require 'greger-parser)
(require 'cl-lib)

;; Test cases with tool use, thinking, and complex scenarios
(defconst greger-parser-test-cases
  '(
    ;; Simple user message
    (:name "simple-user-message"
           :markdown "## USER:

Hello, how are you?"
           :dialog (((role . "user") (content . "Hello, how are you?"))))

    ;; System and user message
    (:name "system-and-user"
           :markdown "## SYSTEM:

You are a helpful assistant.

## USER:

What's the weather like?"
           :dialog (((role . "system") (content . "You are a helpful assistant."))
                    ((role . "user") (content . "What's the weather like?"))))

    ;; Simple conversation
    (:name "simple-conversation"
           :markdown "## USER:

Hello

## ASSISTANT:

Hi there! How can I help you today?"
           :dialog (((role . "user") (content . "Hello"))
                    ((role . "assistant") (content . "Hi there! How can I help you today?"))))

    ;; Thinking section (becomes part of assistant message)
    (:name "thinking-section"
           :markdown "## USER:

What's 2+2?

## THINKING:

This is a simple arithmetic question. I can answer this directly without needing any tools.

## ASSISTANT:

2 + 2 = 4"
           :dialog (((role . "user") (content . "What's 2+2?"))
                    ((role . "assistant") (content . (((type . "thinking") (thinking . "This is a simple arithmetic question. I can answer this directly without needing any tools.")) ((type . "text") (text . "2 + 2 = 4")))))))

    ;; Tool use with single parameter
    (:name "tool-use-single-param"
           :markdown "## USER:

Read the file hello.txt

## TOOL USE:

Name: read-file
ID: toolu_123

### path

<tool.toolu_123>
hello.txt
</tool.toolu_123>

## TOOL RESULT:

ID: toolu_123

<tool.toolu_123>
Hello, world!
</tool.toolu_123>

## ASSISTANT:

The file contains: Hello, world!"
           :dialog (((role . "user") (content . "Read the file hello.txt"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_123") (name . "read-file") (input . ((path . "hello.txt")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_123") (content . "Hello, world!")))))
                    ((role . "assistant") (content . "The file contains: Hello, world!"))))

    ;; Tool use with multiple parameters
    (:name "tool-use-multiple-params"
           :markdown "## USER:

Search for python files containing 'def main'

## TOOL USE:

Name: ripgrep
ID: toolu_456

### pattern

<tool.toolu_456>
def main
</tool.toolu_456>

### file-type

<tool.toolu_456>
py
</tool.toolu_456>

### context-lines

<tool.toolu_456>
2
</tool.toolu_456>

## TOOL RESULT:

ID: toolu_456

<tool.toolu_456>
src/main.py:10:def main():
src/utils.py:25:def main_helper():
</tool.toolu_456>

## ASSISTANT:

I found 2 matches for 'def main' in Python files."
           :dialog (((role . "user") (content . "Search for python files containing 'def main'"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_456") (name . "ripgrep") (input . ((pattern . "def main") (file-type . "py") (context-lines . 2)))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_456") (content . "src/main.py:10:def main():\nsrc/utils.py:25:def main_helper():")))))
                    ((role . "assistant") (content . "I found 2 matches for 'def main' in Python files."))))

    ;; Complex workflow with thinking, tool use, and multiple responses
    (:name "complex-workflow"
           :markdown "## USER:

who's the current king of sweden?

## THINKING:

The user is asking about the current king of Sweden. This is a factual question that I can search for to get the most up-to-date information. I'll use the search function to find this information.

## TOOL USE:

Name: search-286d2fd3
ID: toolu_01Kf8avk1cBqH5ZHoXL92Duc

### query

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
current king of Sweden 2024
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

### include_answer

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
basic
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

### max_results

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
3
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

## TOOL RESULT:

ID: toolu_01Kf8avk1cBqH5ZHoXL92Duc

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
{\"query\": \"current king of Sweden 2024\", \"answer\": \"Carl XVI Gustaf\", \"response_time\": 2.38}
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

## ASSISTANT:

The current King of Sweden is **Carl XVI Gustaf**. He has been reigning since 1973 and is the longest-reigning monarch in Swedish history."
           :dialog (((role . "user") (content . "who's the current king of sweden?"))
                    ((role . "assistant") (content . (((type . "thinking") (thinking . "The user is asking about the current king of Sweden. This is a factual question that I can search for to get the most up-to-date information. I'll use the search function to find this information.")) ((type . "tool_use") (id . "toolu_01Kf8avk1cBqH5ZHoXL92Duc") (name . "search-286d2fd3") (input . ((query . "current king of Sweden 2024") (include_answer . "basic") (max_results . 3)))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_01Kf8avk1cBqH5ZHoXL92Duc") (content . "{\"query\": \"current king of Sweden 2024\", \"answer\": \"Carl XVI Gustaf\", \"response_time\": 2.38}")))))
                    ((role . "assistant") (content . "The current King of Sweden is **Carl XVI Gustaf**. He has been reigning since 1973 and is the longest-reigning monarch in Swedish history."))))

    ;; Multiple tool uses in sequence
    (:name "multiple-tool-uses"
           :markdown "## USER:

List files and read the first one

## TOOL USE:

Name: list-directory
ID: toolu_111

### path

<tool.toolu_111>
.
</tool.toolu_111>

## TOOL RESULT:

ID: toolu_111

<tool.toolu_111>
file1.txt
file2.txt
README.md
</tool.toolu_111>

## TOOL USE:

Name: read-file
ID: toolu_222

### path

<tool.toolu_222>
file1.txt
</tool.toolu_222>

## TOOL RESULT:

ID: toolu_222

<tool.toolu_222>
This is the content of file1.
</tool.toolu_222>

## ASSISTANT:

I found 3 files in the directory. The first file (file1.txt) contains: \"This is the content of file1.\""
           :dialog (((role . "user") (content . "List files and read the first one"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_111") (name . "list-directory") (input . ((path . ".")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_111") (content . "file1.txt\nfile2.txt\nREADME.md")))))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_222") (name . "read-file") (input . ((path . "file1.txt")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_222") (content . "This is the content of file1.")))))
                    ((role . "assistant") (content . "I found 3 files in the directory. The first file (file1.txt) contains: \"This is the content of file1.\""))))

    ;; Tool use with multiline parameter values
    (:name "tool-use-multiline-params"
           :markdown "## USER:

Write a new Python file

## TOOL USE:

Name: write-new-file
ID: toolu_789

### file_path

<tool.toolu_789>
script.py
</tool.toolu_789>

### contents

<tool.toolu_789>
#!/usr/bin/env python3

def main():
    print(\"Hello, world!\")

if __name__ == \"__main__\":
    main()
</tool.toolu_789>

### git_commit_message

<tool.toolu_789>
Add new Python script
</tool.toolu_789>

## TOOL RESULT:

ID: toolu_789

<tool.toolu_789>
Successfully wrote new file script.py with 85 characters.
</tool.toolu_789>

## ASSISTANT:

I've created a new Python script file with a basic Hello World program."
           :dialog (((role . "user") (content . "Write a new Python file"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_789") (name . "write-new-file") (input . ((file_path . "script.py") (contents . "#!/usr/bin/env python3\n\ndef main():\n    print(\"Hello, world!\")\n\nif __name__ == \"__main__\":\n    main()") (git_commit_message . "Add new Python script")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_789") (content . "Successfully wrote new file script.py with 85 characters.")))))
                    ((role . "assistant") (content . "I've created a new Python script file with a basic Hello World program."))))

    ;; Just thinking without any other content
    (:name "thinking-only"
           :markdown "## USER:

Let me think about this

## THINKING:

I need to consider all the options carefully before responding."
           :dialog (((role . "user") (content . "Let me think about this"))
                    ((role . "assistant") (content . (((type . "thinking") (thinking . "I need to consider all the options carefully before responding.")))))))

    ;; Tool use without any following content
    (:name "tool-use-only"
           :markdown "## USER:

Read a file

## TOOL USE:

Name: read-file
ID: toolu_999

### path

<tool.toolu_999>
test.txt
</tool.toolu_999>
"
           :dialog (((role . "user") (content . "Read a file"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_999") (name . "read-file") (input . ((path . "test.txt")))))))))

    (:name "tool-use-with-tags"
           :markdown "## USER:

Read a file

## TOOL USE:

Name: read-file
ID: toolu_999

### path

<tool.toolu_999>
test.txt

## USER:

foo
</tool.toolu_999>
"
           :dialog (((role . "user") (content . "Read a file"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_999") (name . "read-file") (input . ((path . "test.txt\n\n## USER:\n\nfoo")))))))))

    ;; Tool result with empty lines preserved
    (:name "code-block-triple-backticks"
           :markdown "## USER:

Here's some code:

```
## ASSISTANT:
This should not be parsed as a section header
## TOOL USE:
Neither should this
```

What do you think?"
           :dialog (((role . "user") (content . "Here's some code:\n\n```\n## ASSISTANT:\nThis should not be parsed as a section header\n## TOOL USE:\nNeither should this\n```\n\nWhat do you think?"))))

    ;; Code blocks with section headers inside (double backticks)
    (:name "code-block-double-backticks"
           :markdown "## USER:

Inline code: ``## ASSISTANT: not a header`` and more text.

## ASSISTANT:

I see the inline code."
           :dialog (((role . "user") (content . "Inline code: ``## ASSISTANT: not a header`` and more text."))
                    ((role . "assistant") (content . "I see the inline code."))))

    ;; Mixed code blocks and real sections
    (:name "mixed-code-blocks-and-sections"
           :markdown "## USER:

Here's a code example:

```python
def example():
    # This has ## USER: in a comment
    print(\"## ASSISTANT: not a real header\")
```

Now please analyze it.

## ASSISTANT:

I can see your code example."
           :dialog (((role . "user") (content . "Here's a code example:\n\n```python\ndef example():\n    # This has ## USER: in a comment\n    print(\"## ASSISTANT: not a real header\")\n```\n\nNow please analyze it."))
                    ((role . "assistant") (content . "I can see your code example."))))

    ;; Tool use with code blocks in parameters
    (:name "tool-use-with-code-in-params"
           :markdown "## USER:

Write some Python code

## TOOL USE:

Name: write-file
ID: toolu_999

### filename

<tool.toolu_999>
example.py
</tool.toolu_999>

### content

<tool.toolu_999>
```python
def main():
    # This ## USER: comment should not break parsing
    print(\"Hello world\")

if __name__ == \"__main__\":
    main()
```
</tool.toolu_999>

## TOOL RESULT:

ID: toolu_999

<tool.toolu_999>
File written successfully
</tool.toolu_999>

## ASSISTANT:

I've written the Python file."
           :dialog (((role . "user") (content . "Write some Python code"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_999") (name . "write-file") (input . ((filename . "example.py") (content . "```python\ndef main():\n    # This ## USER: comment should not break parsing\n    print(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()\n```")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_999") (content . "File written successfully")))))
                    ((role . "assistant") (content . "I've written the Python file."))))

    ;; Nested code blocks (backticks inside code blocks)
    (:name "nested-code-blocks"
           :markdown "## USER:

How do I use backticks in markdown?

## ASSISTANT:

You can use triple backticks:

```
Here's how to show `inline code` in a code block:
Use single backticks around `your code`.
```

Does that help?"
           :dialog (((role . "user") (content . "How do I use backticks in markdown?"))
                    ((role . "assistant") (content . "You can use triple backticks:\n\n```\nHere's how to show `inline code` in a code block:\nUse single backticks around `your code`.\n```\n\nDoes that help?"))))

    (:name "tool-use-complex-params"
           :markdown "## USER:

Test complex parameters

## TOOL USE:

Name: complex-tool
ID: toolu_complex

### string_param

<tool.toolu_complex>
hello world
</tool.toolu_complex>

### number_param

<tool.toolu_complex>
42
</tool.toolu_complex>

### float_param

<tool.toolu_complex>
3.14
</tool.toolu_complex>

### bool_true

<tool.toolu_complex>
true
</tool.toolu_complex>

### bool_false

<tool.toolu_complex>
false
</tool.toolu_complex>

### list_param

<tool.toolu_complex>
[\"item1\", \"item2\", 3]
</tool.toolu_complex>

### dict_param

<tool.toolu_complex>
{\"key\": \"value\", \"count\": 5}
</tool.toolu_complex>

## TOOL RESULT:

ID: toolu_complex

<tool.toolu_complex>
Success
</tool.toolu_complex>

## ASSISTANT:

Tool executed with complex parameters."
           :dialog (((role . "user") (content . "Test complex parameters"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_complex") (name . "complex-tool") (input . ((string_param . "hello world") (number_param . 42) (float_param . 3.14) (bool_true . t) (bool_false) (list_param . ["item1" "item2" 3]) (dict_param . ((key . "value") (count . 5)))))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_complex") (content . "Success")))))
                    ((role . "assistant") (content . "Tool executed with complex parameters."))))

    (:name "tool-result-empty-lines"
           :markdown "## TOOL USE:

Name: write-file
ID: tool_123

### content

<tool.tool_123>
foo


bar
</tool.tool_123>

## TOOL RESULT:

ID: tool_123

<tool.tool_123>
foo


bar
</tool.tool_123>

## ASSISTANT:

File written successfully."
           :dialog (((role . "assistant") (content . (((type . "tool_use") (id . "tool_123") (name . "write-file") (input . ((content . "foo\n\n\nbar")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "tool_123") (content . "foo\n\n\nbar")))))
                    ((role . "assistant") (content . "File written successfully."))))

    (:name "html-comments"
           :markdown "## USER:

Here's some code:

<!-- comment -->
<!-- multi
line

comment -->

```
<!-- comment should be included -->
## ASSISTANT:
This should not be parsed as a section header
## TOOL USE:
Neither should this
```

What do you think?"
           :dialog (((role . "user") (content . "Here's some code:\n\n\n\n\n```\n<!-- comment should be included -->\n## ASSISTANT:\nThis should not be parsed as a section header\n## TOOL USE:\nNeither should this\n```\n\nWhat do you think?"))))

    ;; Server tool use and result test cases
    (:name "server-tool-use-basic"
           :markdown "## USER:

Search for current weather in San Francisco

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_123

### query

<tool.srvtoolu_123>
current weather San Francisco
</tool.srvtoolu_123>

## SERVER TOOL RESULT:

ID: srvtoolu_123

<tool.srvtoolu_123>
[
  {
    \"title\": \"Weather in San Francisco\",
    \"url\": \"https://weather.com/sf\",
    \"content\": \"Sunny, 72°F\"
  }
]
</tool.srvtoolu_123>

## ASSISTANT:

The current weather in San Francisco is sunny and 72°F."
           :dialog (((role . "user") (content . "Search for current weather in San Francisco"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_123")
                                                       (name . "web_search")
                                                       (input . ((query . "current weather San Francisco"))))
                                                      ((type . "server_tool_result")
                                                       (tool_use_id . "srvtoolu_123")
                                                       (content . (((title . "Weather in San Francisco")
                                                                    (url . "https://weather.com/sf")
                                                                    (content . "Sunny, 72°F")))))
                                                      ((type . "text") (text . "The current weather in San Francisco is sunny and 72°F.")))))))

    (:name "server-tool-use-string-result"
           :markdown "## USER:

What's the weather like?

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_456

### query

<tool.srvtoolu_456>
weather
</tool.srvtoolu_456>

## SERVER TOOL RESULT:

ID: srvtoolu_456

<tool.srvtoolu_456>
Sunny and warm today
</tool.srvtoolu_456>

## ASSISTANT:

It looks like it's sunny and warm today!"
           :dialog (((role . "user") (content . "What's the weather like?"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_456")
                                                       (name . "web_search")
                                                       (input . ((query . "weather"))))
                                                      ((type . "server_tool_result")
                                                       (tool_use_id . "srvtoolu_456")
                                                       (content . "Sunny and warm today"))
                                                      ((type . "text")
                                                       (text . "It looks like it's sunny and warm today!")))))))

    ;; Citation parsing test cases
    (:name "citations-basic"
           :markdown "## USER:

When was Claude Shannon born?

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE

### query

<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
claude shannon birth date
</tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>

## SERVER TOOL RESULT:

ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE

<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
[
  {
    \"type\": \"web_search_result\",
    \"url\": \"https://en.wikipedia.org/wiki/Claude_Shannon\",
    \"title\": \"Claude Shannon - Wikipedia\",
    \"encrypted_content\": \"EqgfCioIARgBIiQ3YTAwMjY1Mi1mZjM5LTQ1NGUtODgxNC1kNjNjNTk1ZWI3Y...\",
    \"page_age\": \"April 30, 2025\"
  }
]
</tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>

## ASSISTANT:

Based on the search results, <cite>Claude Shannon was born on April 30, 1916, in Petoskey, Michigan</cite>

## CITATIONS:

### https://en.wikipedia.org/wiki/Claude_Shannon

Title: Claude Shannon - Wikipedia
Cited text: Claude Elwood Shannon (April 30, 1916 – February 24, 2001) was an American mathematician, electrical engineer, computer scientist, cryptographer and i...
Encrypted index: Eo8BCioIAhgBIiQyYjQ0OWJmZi1lNm.."
           :dialog (((role . "user") (content . "When was Claude Shannon born?"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE")
                                                       (name . "web_search")
                                                       (input . ((query . "claude shannon birth date"))))
                                                      ((type . "web_search_tool_result")
                                                       (tool_use_id . "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE")
                                                       (content . (((type . "web_search_result")
                                                                    (url . "https://en.wikipedia.org/wiki/Claude_Shannon")
                                                                    (title . "Claude Shannon - Wikipedia")
                                                                    (encrypted_content . "EqgfCioIARgBIiQ3YTAwMjY1Mi1mZjM5LTQ1NGUtODgxNC1kNjNjNTk1ZWI3Y...")
                                                                    (page_age . "April 30, 2025")))))
                                                      ((type . "text")
                                                       (text . "Based on the search results, "))
                                                      ((type . "text")
                                                       (text . "Claude Shannon was born on April 30, 1916, in Petoskey, Michigan")
                                                       (citations . (((type . "web_search_result_location")
                                                                      (url . "https://en.wikipedia.org/wiki/Claude_Shannon")
                                                                      (title . "Claude Shannon - Wikipedia")
                                                                      (cited_text . "Claude Elwood Shannon (April 30, 1916 – February 24, 2001) was an American mathematician, electrical engineer, computer scientist, cryptographer and i...")
                                                                      (encrypted_index . "Eo8BCioIAhgBIiQyYjQ0OWJmZi1lNm.."))))))))))

    ;; Citations immediately after tool result
    (:name "citations-after-tool-result"
           :markdown "## USER:

What's the current weather?

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_456

### query

<tool.srvtoolu_456>
current weather
</tool.srvtoolu_456>

## SERVER TOOL RESULT:

ID: srvtoolu_456

<tool.srvtoolu_456>
[
  {
    \"type\": \"web_search_result\",
    \"url\": \"https://weather.com\",
    \"title\": \"Weather.com\",
    \"encrypted_content\": \"abc123...\",
    \"page_age\": \"Today\"
  }
]
</tool.srvtoolu_456>

## ASSISTANT:

<cite>It's currently sunny and 75°F</cite>

## CITATIONS:

### https://weather.com

Title: Weather.com
Cited text: Currently sunny with a temperature of 75 degrees Fahrenheit...
Encrypted index: xyz789"
           :dialog (((role . "user") (content . "What's the current weather?"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_456")
                                                       (name . "web_search")
                                                       (input . ((query . "current weather"))))
                                                      ((type . "web_search_tool_result")
                                                       (tool_use_id . "srvtoolu_456")
                                                       (content . (((type . "web_search_result")
                                                                    (url . "https://weather.com")
                                                                    (title . "Weather.com")
                                                                    (encrypted_content . "abc123...")
                                                                    (page_age . "Today")))))
                                                      ((type . "text")
                                                       (text . "It's currently sunny and 75°F")
                                                       (citations . (((type . "web_search_result_location")
                                                                      (url . "https://weather.com")
                                                                      (title . "Weather.com")
                                                                      (cited_text . "Currently sunny with a temperature of 75 degrees Fahrenheit...")
                                                                      (encrypted_index . "xyz789"))))))))))

    ;; Multiple citations in same text
    (:name "citations-multiple"
           :markdown "## USER:

Tell me about Einstein and Newton

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_789

### query

<tool.srvtoolu_789>
Einstein Newton physics
</tool.srvtoolu_789>

## SERVER TOOL RESULT:

ID: srvtoolu_789

<tool.srvtoolu_789>
[
  {
    \"type\": \"web_search_result\",
    \"url\": \"https://physics.com/einstein\",
    \"title\": \"Einstein Biography\",
    \"encrypted_content\": \"def456...\",
    \"page_age\": \"Recent\"
  },
  {
    \"type\": \"web_search_result\",
    \"url\": \"https://physics.com/newton\",
    \"title\": \"Newton Biography\",
    \"encrypted_content\": \"ghi789...\",
    \"page_age\": \"Recent\"
  }
]
</tool.srvtoolu_789>

## ASSISTANT:

<cite>Einstein developed the theory of relativity</cite>

## CITATIONS:

### https://physics.com/einstein

Title: Einstein Biography
Cited text: Albert Einstein developed the theory of relativity in the early 20th century...
Encrypted index: def456

## ASSISTANT:

while <cite>Newton formulated the laws of motion</cite>

## CITATIONS:

### https://physics.com/newton

Title: Newton Biography
Cited text: Isaac Newton formulated the three laws of motion...
Encrypted index: ghi789"
           :dialog (((role . "user") (content . "Tell me about Einstein and Newton"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_789")
                                                       (name . "web_search")
                                                       (input . ((query . "Einstein Newton physics"))))
                                                      ((type . "web_search_tool_result")
                                                       (tool_use_id . "srvtoolu_789")
                                                       (content . (((type . "web_search_result")
                                                                    (url . "https://physics.com/einstein")
                                                                    (title . "Einstein Biography")
                                                                    (encrypted_content . "def456...")
                                                                    (page_age . "Recent"))
                                                                   ((type . "web_search_result")
                                                                    (url . "https://physics.com/newton")
                                                                    (title . "Newton Biography")
                                                                    (encrypted_content . "ghi789...")
                                                                    (page_age . "Recent")))))
                                                      ((type . "text")
                                                       (text . "Einstein developed the theory of relativity")
                                                       (citations . ((
                                                                      (encrypted_index . "def456")
                                                                      (cited_text . "Albert Einstein developed the theory of relativity in the early 20th century...")
                                                                      (title . "Einstein Biography")
                                                                      (type . "web_search_result_location")
                                                                      (url . "https://physics.com/einstein")
                                                                      ))))
                                                      ((type . "text") (text . "while "))
                                                      ((type . "text")
                                                       (text . "Newton formulated the laws of motion")
                                                       (citations . ((
                                                                      (encrypted_index . "ghi789")
                                                                      (cited_text . "Isaac Newton formulated the three laws of motion...")
                                                                      (title . "Newton Biography")
                                                                      (type . "web_search_result_location")
                                                                      (url . "https://physics.com/newton")
                                                                      ))))
                                                      ((type . "text") (text . ".")))))))
    ))

;; Helper functions for tests
(defun greger-parser-test--dialog-equal (expected actual)
  "Compare two dialog structures, handling content blocks."
  (and (listp expected) (listp actual)
       (= (length expected) (length actual))
       (cl-every
        (lambda (pair)
          (let ((exp-msg (car pair))
                (act-msg (cdr pair)))
            (and (string= (alist-get 'role exp-msg) (alist-get 'role act-msg))
                 (greger-parser-test--content-equal
                  (alist-get 'content exp-msg)
                  (alist-get 'content act-msg)))))
        (cl-mapcar #'cons expected actual))))

(defun greger-parser-test--content-equal (expected actual)
  "Compare message content, handling both strings and content block lists."
  (cond
   ;; Both are strings - direct comparison
   ((and (stringp expected) (stringp actual))
    (string= expected actual))

   ;; Both are lists (content blocks) - compare structure
   ((and (listp expected) (listp actual))
    (greger-parser-test--content-blocks-equal expected actual))

   ;; Fallback to string comparison
   (t (string= (format "%s" expected) (format "%s" actual)))))

(defun greger-parser-test--content-blocks-equal (expected actual)
  "Compare two content block lists."
  (and (= (length expected) (length actual))
       (cl-every
        (lambda (pair)
          (greger-parser-test--content-block-equal (car pair) (cdr pair)))
        (cl-mapcar #'cons expected actual))))

(defun greger-parser-test--content-block-equal (expected actual)
  "Compare two content blocks."
  (and (string= (alist-get 'type expected) (alist-get 'type actual))
       (let ((type (alist-get 'type expected)))
         (cond
          ((string= type "text")
           (string= (alist-get 'text expected) (alist-get 'text actual)))
          ((string= type "thinking")
           (string= (alist-get 'thinking expected) (alist-get 'thinking actual)))
          ((string= type "tool_use")
           (and (string= (alist-get 'id expected) (alist-get 'id actual))
                (string= (alist-get 'name expected) (alist-get 'name actual))
                (greger-parser-test--input-equal (alist-get 'input expected) (alist-get 'input actual))))
          ((string= type "tool_result")
           (and (string= (alist-get 'tool_use_id expected) (alist-get 'tool_use_id actual))
                (string= (alist-get 'content expected) (alist-get 'content actual))))
          ((string= type "server_tool_use")
           (and (string= (alist-get 'id expected) (alist-get 'id actual))
                (string= (alist-get 'name expected) (alist-get 'name actual))
                (greger-parser-test--input-equal (alist-get 'input expected) (alist-get 'input actual))))
          ((string= type "server_tool_result")
           (and (string= (alist-get 'tool_use_id expected) (alist-get 'tool_use_id actual))
                (equal (alist-get 'content expected) (alist-get 'content actual))))
          (t t)))))

(defun greger-parser-test--input-equal (expected actual)
  "Compare tool input parameters."
  (and (= (length expected) (length actual))
       (cl-every
        (lambda (exp-param)
          (let ((key (car exp-param))
                (exp-val (cdr exp-param)))
            (let ((act-val (alist-get key actual)))
              (equal exp-val act-val))))
        expected)))

(defun greger-parser-test--normalize-whitespace (str)
  "Normalize whitespace in string for comparison."
  (string-trim (replace-regexp-in-string "[ \t\n\r]+" " " str)))

;; Main test suite
(ert-deftest greger-parser-test-markdown-to-dialog ()
  "Test converting markdown to dialog format."
  (dolist (test-case greger-parser-test-cases)
    (let ((name (plist-get test-case :name))
          (markdown (plist-get test-case :markdown))
          (expected-dialog (plist-get test-case :dialog)))
      (message "Testing markdown-to-dialog for: %s" name)
      (let ((actual-dialog (greger-parser-parse-dialog-messages-only markdown)))
        (should (greger-parser-test--dialog-equal expected-dialog actual-dialog))))))

(ert-deftest greger-parser-test-roundtrip ()
  "Test that markdown -> dialog -> markdown preserves structure."
  (dolist (test-case greger-parser-test-cases)
    (let ((name (plist-get test-case :name))
          (original-markdown (plist-get test-case :markdown)))
      (message "Testing roundtrip for: %s" name)
      (let* ((dialog (greger-parser-parse-dialog-messages-only original-markdown))
             (roundtrip-markdown (greger-parser-dialog-to-markdown dialog))
             (roundtrip-dialog (greger-parser-parse-dialog-messages-only roundtrip-markdown)))
        ;; The dialog should be structurally equivalent after round-trip
        (should (= (length dialog) (length roundtrip-dialog)))
        (should (greger-parser-test--dialog-equal dialog roundtrip-dialog))))))

(ert-deftest greger-parser-test-tool-use-parsing ()
  "Test specific tool use parsing functionality."
  (let ((tool-use-markdown "## TOOL USE:

Name: read-file
ID: toolu_123

### path

<tool.toolu_123>
hello.txt
</tool.toolu_123>

### include_line_numbers

<tool.toolu_123>
true
</tool.toolu_123>
"))
    (let ((parsed (greger-parser-parse-dialog-messages-only tool-use-markdown)))
      (should (= 1 (length parsed)))
      (let ((assistant-msg (car parsed)))
        (should (string= "assistant" (alist-get 'role assistant-msg)))
        (let* ((content-blocks (alist-get 'content assistant-msg))
               (tool-use-block (car content-blocks)))
          (should (string= "tool_use" (alist-get 'type tool-use-block)))
          (should (string= "toolu_123" (alist-get 'id tool-use-block)))
          (should (string= "read-file" (alist-get 'name tool-use-block)))
          (let ((input (alist-get 'input tool-use-block)))
            (should (string= "hello.txt" (alist-get 'path input)))
            (should (eq t (alist-get 'include_line_numbers input)))))))))

(ert-deftest greger-parser-test-tool-result-parsing ()
  "Test specific tool result parsing functionality."
  (let ((tool-result-markdown "## TOOL RESULT:

ID: toolu_123

<tool.toolu_123>
File contents here
with multiple lines
</tool.toolu_123>"))
    (let ((parsed (greger-parser-parse-dialog-messages-only tool-result-markdown)))
      (should (= 1 (length parsed)))
      (let ((user-msg (car parsed)))
        (should (string= "user" (alist-get 'role user-msg)))
        (let* ((content-blocks (alist-get 'content user-msg))
               (tool-result-block (car content-blocks)))
          (should (string= "tool_result" (alist-get 'type tool-result-block)))
          (should (string= "toolu_123" (alist-get 'tool_use_id tool-result-block)))
          (should (string= "File contents here
with multiple lines"
                          (alist-get 'content tool-result-block))))))))

(ert-deftest greger-parser-test-thinking-parsing ()
  "Test thinking section parsing."
  (let ((thinking-markdown "## THINKING:

I need to think about this carefully.
This is a complex problem."))
    (let ((parsed (greger-parser-parse-dialog-messages-only thinking-markdown)))
      (should (= 1 (length parsed)))
      (let ((assistant-msg (car parsed)))
        (should (string= "assistant" (alist-get 'role assistant-msg)))
        (let* ((content-blocks (alist-get 'content assistant-msg))
               (thinking-block (car content-blocks)))
          (should (string= "thinking" (alist-get 'type thinking-block)))
          (should (string= "I need to think about this carefully.
This is a complex problem."
                          (alist-get 'thinking thinking-block))))))))

(ert-deftest greger-parser-test-error-handling ()
  "Test parser error handling for malformed input."
  ;; Test that malformed input returns empty result instead of error
  (should (condition-case err
              (progn (greger-parser-parse-dialog-messages-only "## TOOL USE:\n\nMalformed") t)
            (error nil)))
  (should (condition-case err
              (progn (greger-parser-parse-dialog-messages-only "## TOOL RESULT:\n\nMalformed") t)
            (error nil))))

(ert-deftest greger-parser-test-edge-cases ()
  "Test edge cases like empty content, whitespace handling."
  ;; Empty content
  (should (equal '() (greger-parser-parse-dialog-messages-only "")))
  (should (equal '() (greger-parser-parse-dialog-messages-only "\n\n  ")))

  ;; Only whitespace in sections - should return empty list
  (should (equal '() (greger-parser-parse-dialog-messages-only "## USER:\n\n\n\n")))

  ;; Multiple consecutive newlines
  (let ((result (greger-parser-parse-dialog-messages-only "## USER:\n\n\n\nHello\n\n\n\n## ASSISTANT:\n\n\n\nHi")))
    (should (= 2 (length result)))
    (should (string= "Hello" (alist-get 'content (car result))))
    (should (string= "Hi" (alist-get 'content (cadr result))))))

(ert-deftest greger-parser-test-performance ()
  "Test parser performance with large dialogs."
  (let ((large-markdown
         (mapconcat
          (lambda (i)
            (format "## USER:\n\nMessage %d\n\n## ASSISTANT:\n\nResponse %d" i i))
          (number-sequence 1 100)
          "\n\n")))
    (let ((start-time (current-time)))
      (greger-parser-parse-dialog-messages-only large-markdown)
      (let ((elapsed (float-time (time-subtract (current-time) start-time))))
        ;; Should parse 100 message pairs in under 1 second
        (should (< elapsed 1.0))))))

(ert-deftest greger-parser-test-complex-mixed-content ()
  "Test parsing of complex mixed content with thinking, tools, and text."
  (let ((complex-markdown "## USER:

Help me with a file

## THINKING:

The user wants help with a file. I should ask what they need.

## ASSISTANT:

What kind of help do you need with the file?

## TOOL USE:

Name: list-directory
ID: toolu_abc

### path

<tool.toolu_abc>
.
</tool.toolu_abc>"))
    (let ((parsed (greger-parser-parse-dialog-messages-only complex-markdown)))
      (should (= 2 (length parsed)))
      ;; First message should be user
      (should (string= "user" (alist-get 'role (car parsed))))
      ;; Second message should be assistant with mixed content
      (let ((assistant-msg (cadr parsed)))
        (should (string= "assistant" (alist-get 'role assistant-msg)))
        (let ((content-blocks (alist-get 'content assistant-msg)))
          (should (= 3 (length content-blocks)))
          ;; Should have thinking, text, and tool_use blocks
          (should (string= "thinking" (alist-get 'type (car content-blocks))))
          (should (string= "text" (alist-get 'type (cadr content-blocks))))
          (should (string= "tool_use" (alist-get 'type (caddr content-blocks)))))))))

(ert-deftest greger-parser-test-markdown-generation ()
  "Test that generated markdown follows expected format."
  (let ((dialog '(((role . "user") (content . "Test message"))
                  ((role . "assistant") (content . (((type . "thinking") (thinking . "Let me think")) ((type . "text") (text . "Here's my response")) ((type . "tool_use") (id . "tool_123") (name . "test-tool") (input . ((param . "value")))))))
                  ((role . "user") (content . (((type . "tool_result") (tool_use_id . "tool_123") (content . "Tool output")))))
                  ((role . "assistant") (content . "Final response")))))
    (let ((markdown (greger-parser-dialog-to-markdown dialog)))
      ;; Should contain all expected sections
      (should (string-match-p "## USER:" markdown))
      (should (string-match-p "## THINKING:" markdown))
      (should (string-match-p "## ASSISTANT:" markdown))
      (should (string-match-p "## TOOL USE:" markdown))
      (should (string-match-p "## TOOL RESULT:" markdown))
      (should (string-match-p "Name: test-tool" markdown))
      (should (string-match-p "ID: tool_123" markdown))
      (should (string-match-p "### param" markdown))
      (should (string-match-p "value" markdown)))))

;; Test untagged content at the beginning
(ert-deftest greger-parser-test-untagged-content ()
  "Test that untagged content at the beginning is treated as user message."
  (let ((markdown "Hello, this is untagged content

## ASSISTANT:

I understand you have untagged content."))
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 2 (length parsed)))
      (should (string= "user" (alist-get 'role (car parsed))))
      (should (string= "Hello, this is untagged content" (alist-get 'content (car parsed))))
      (should (string= "assistant" (alist-get 'role (cadr parsed))))
      (should (string= "I understand you have untagged content." (alist-get 'content (cadr parsed)))))))

;; Test that we handle tool use parameters correctly with various whitespace
(ert-deftest greger-parser-test-tool-use-whitespace ()
  "Test tool use parsing with various whitespace patterns."
  (let ((markdown "## TOOL USE:

Name: test-tool
ID: tool_123

### param1

<tool.tool_123>
value1
</tool.tool_123>

### param2

<tool.tool_123>
value2 with
multiple


  lines
</tool.tool_123>

### param3

<tool.tool_123>
value3
</tool.tool_123>
"))
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 1 (length parsed)))
      (let* ((assistant-msg (car parsed))
             (content-blocks (alist-get 'content assistant-msg))
             (tool-block (car content-blocks))
             (input (alist-get 'input tool-block)))
        (should (= 3 (length input)))
        (should (string= "value1" (alist-get 'param1 input)))
        (should (string= "value2 with\nmultiple\n\n\n  lines" (alist-get 'param2 input)))
        (should (string= "value3" (alist-get 'param3 input)))))))

(ert-deftest greger-parser-test-code-block-parsing ()
  "Test that section headers inside code blocks are not parsed."
  (let ((markdown "## USER:

Here's code with fake headers:

```
## ASSISTANT:
This looks like a header but isn't
## TOOL USE:
Same with this
```

Real content continues.

## ASSISTANT:

I see your code."))
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 2 (length parsed)))
      ;; First message should contain the entire user content including code block
      (let ((user-content (alist-get 'content (car parsed))))
        (should (string-match-p "## ASSISTANT:" user-content))
        (should (string-match-p "## TOOL USE:" user-content))
        (should (string-match-p "Real content continues" user-content)))
      ;; Second message should be the real assistant response
      (should (string= "assistant" (alist-get 'role (cadr parsed))))
      (should (string= "I see your code." (alist-get 'content (cadr parsed)))))))

(ert-deftest greger-parser-test-inline-code-blocks ()
  "Test that section headers inside inline code are not parsed."
  (let ((markdown "## USER:

Use ``## ASSISTANT: response`` to format.

## ASSISTANT:

Got it!"))
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 2 (length parsed)))
      (should (string-match-p "## ASSISTANT: response" (alist-get 'content (car parsed))))
      (should (string= "Got it!" (alist-get 'content (cadr parsed)))))))

(ert-deftest greger-parser-test-code-blocks-in-tool-params ()
  "Test that code blocks in tool parameters are preserved correctly."
  (let ((markdown "## TOOL USE:

Name: write-file
ID: tool_123

### content

<tool.tool_123>
```python
# This ## USER: comment should be preserved
print(\"## ASSISTANT: also preserved\")
```
</tool.tool_123>
"))
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 1 (length parsed)))
      (let* ((assistant-msg (car parsed))
             (content-blocks (alist-get 'content assistant-msg))
             (tool-block (car content-blocks))
             (input (alist-get 'input tool-block))
             (content-param (alist-get 'content input)))
        (should (string-match-p "## USER:" content-param))
        (should (string-match-p "## ASSISTANT:" content-param))
        (should (string-match-p "```python" content-param))))))

;; Include tag tests
(ert-deftest greger-parser-test-include-tag-basic ()
  "Test basic include tag functionality."
  (let ((test-file (make-temp-file "greger-test-include" nil ".txt" "Hello from included file!"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## USER:

Here's the content:

<include>%s</include>

What do you think?" test-file))

          (setq expected "## USER:

Here's the content:

Hello from included file!

What do you think?")

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))

(ert-deftest greger-parser-test-include-tag-with-code ()
  "Test include tag with code attribute."
  (let ((test-file (make-temp-file "greger-test-include" nil ".py" "def hello():\n    print('Hello, world!')"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## USER:

Here's the Python code:

<include code>%s</include>

Review this code." test-file))

          (setq expected (format "## USER:

Here's the Python code:

%s:
```
def hello():
    print('Hello, world!')
```

Review this code." test-file))

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))

(ert-deftest greger-parser-test-include-tag-nonexistent-file ()
  "Test include tag with nonexistent file."
  (let ((markdown "## USER:

Try to include: <include>/nonexistent/file.txt</include>

This should handle errors gracefully.")
        (expected "## USER:

Try to include: [Error reading file: /nonexistent/file.txt]

This should handle errors gracefully."))
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 1 (length parsed)))
      (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
        (should (string= expected generated-markdown))))))

(ert-deftest greger-parser-test-include-tag-multiline-content ()
  "Test include tag with multiline file content."
  (let ((test-file (make-temp-file "greger-test-include" nil ".txt" "Line 1\nLine 2\n\nLine 4 after empty line"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## USER:

Multiline content:

<include>%s</include>

End of message." test-file))

          (setq expected "## USER:

Multiline content:

Line 1
Line 2

Line 4 after empty line

End of message.")

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))


(ert-deftest greger-parser-test-include-tag-recursive ()
  "Test include tag with file that contains another include tag."
  (let ((inner-file (make-temp-file "greger-test-inner" nil ".txt" "Inner file content"))
        (outer-file nil)
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq outer-file (make-temp-file "greger-test-outer" nil ".txt"
                                          (format "Before include\n<include>%s</include>\nAfter include" inner-file)))
          (setq markdown (format "## USER:

Recursive include:

<include>%s</include>

Done." outer-file))

          (setq expected "## USER:

Recursive include:

Before include
Inner file content
After include

Done.")

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (and inner-file (file-exists-p inner-file))
        (delete-file inner-file))
      (when (and outer-file (file-exists-p outer-file))
        (delete-file outer-file)))))

(ert-deftest greger-parser-test-include-tag-in-assistant-section ()
  "Test include tag in assistant section."
  (let ((test-file (make-temp-file "greger-test-include" nil ".txt" "Assistant included content"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## USER:

Show me the file.

## ASSISTANT:

Here's the content:

<include>%s</include>

Hope this helps!" test-file))

          (setq expected "## USER:

Show me the file.

## ASSISTANT:

Here's the content:

Assistant included content

Hope this helps!")

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 2 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))

(ert-deftest greger-parser-test-include-tag-with-code-in-code-block ()
  "Test include tag with code attribute where content has code blocks."
  (let ((test-file (make-temp-file "greger-test-include" nil ".py" "def example():\n    pass\n"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## USER:

<include code>%s</include>" test-file))

          (setq expected (format "## USER:

%s:
```
def example():
    pass
```" test-file))

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))

;; Tests to ensure include tags are NOT processed in code blocks or tool content
(ert-deftest greger-parser-test-include-tag-not-processed-in-code-blocks ()
  "Test that include tags inside code blocks are not processed."
  (let ((test-file (make-temp-file "greger-test-include" nil ".txt" "This should not be included"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## USER:

Here's some code with an include tag:

```
<include>%s</include>
```

The include should not be processed." test-file))

          (setq expected (format "## USER:

Here's some code with an include tag:

```
<include>%s</include>
```

The include should not be processed." test-file))

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))

(ert-deftest greger-parser-test-include-tag-not-processed-in-inline-code ()
  "Test that include tags inside inline code are not processed."
  (let ((test-file (make-temp-file "greger-test-include" nil ".txt" "This should not be included"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## USER:

Use `<include>%s</include>` to include files.

The include in backticks should not be processed." test-file))

          (setq expected (format "## USER:

Use `<include>%s</include>` to include files.

The include in backticks should not be processed." test-file))

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))

(ert-deftest greger-parser-test-include-tag-not-processed-in-tool-params ()
  "Test that include tags inside tool parameters are not processed."
  (let ((test-file (make-temp-file "greger-test-include" nil ".txt" "This should not be included"))
        (markdown nil)
        (expected nil))
    (unwind-protect
        (progn
          (setq markdown (format "## TOOL USE:

Name: write-file
ID: tool_123

### content

<tool.tool_123>
<include>%s</include>
</tool.tool_123>" test-file))

          (setq expected (format "## TOOL USE:

Name: write-file
ID: tool_123

### content

<tool.tool_123>
<include>%s</include>
</tool.tool_123>" test-file))

          (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
            (should (= 1 (length parsed)))
            (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
              (should (string= expected generated-markdown)))))
      (when (file-exists-p test-file)
        (delete-file test-file)))))

(ert-deftest greger-parser-test-include-tag-web-url ()
  "Test include tag with web URL functionality."
  (let ((markdown "## USER:

Check this out:

<include>https://pub-b88c9764a4fc46baa90b9e8e1544f59e.r2.dev/hello.html</include>

What do you think?")
        (expected "## USER:

Check this out:

Hello world!

What do you think?"))
    ;; This test just verifies that URL handling doesn't crash
    ;; The exact content will vary based on the response
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 1 (length parsed)))
      (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
        (should (string= expected generated-markdown))))))

(ert-deftest greger-parser-test-include-tag-web-url-with-code ()
  "Test include tag with web URL and code attribute."
  (let ((markdown "## USER:

<include code>https://pub-b88c9764a4fc46baa90b9e8e1544f59e.r2.dev/hello.html</include>

Pretty cool!")
        (expected "## USER:

https://pub-b88c9764a4fc46baa90b9e8e1544f59e.r2.dev/hello.html:
```
Hello world!
```

Pretty cool!"))
    ;; This test verifies URL handling with code formatting
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 1 (length parsed)))
      (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
        (should (string= expected generated-markdown))))))

(ert-deftest greger-parser-test-include-tag-invalid-url ()
  "Test include tag with invalid web URL."
  (let ((markdown "## USER:

This should fail:

<include>https://invalid-url-that-does-not-exist-12345.com</include>

Error handling test")
        (expected "## USER:

This should fail:

[Error reading URL: https://invalid-url-that-does-not-exist-12345.com]

Error handling test"))
    (let ((parsed (greger-parser-parse-dialog-messages-only markdown)))
      (should (= 1 (length parsed)))
      (let ((generated-markdown (greger-parser-dialog-to-markdown parsed)))
        (should (string= expected generated-markdown))))))

;; Tests for safe-shell-commands metadata
(ert-deftest greger-parser-test-safe-shell-commands-basic ()
  "Test basic safe-shell-commands parsing."
  (let ((markdown "## SYSTEM:

<safe-shell-commands>
ls -la
pwd
echo hello
</safe-shell-commands>")
        (expected-metadata '(:safe-shell-commands ("ls -la" "pwd" "echo hello"))))
    (let ((result (greger-parser-parse-dialog markdown)))
      ;; Should have one system message with the auto-generated descriptive text
      (should (= 1 (length (plist-get result :messages))))
      (let ((system-msg (car (plist-get result :messages))))
        (should (string= "system" (alist-get 'role system-msg)))
        (let ((content (alist-get 'content system-msg)))
          (should (string= "You can run arbitrary shell commands with the shell-command tool, but the following are safe shell commands that will run without requiring user confirmation:

* `ls -la`
* `pwd`
* `echo hello`"
                           content))))
      (should (equal expected-metadata (plist-get result :metadata))))))

(ert-deftest greger-parser-test-safe-shell-commands-with-system-content ()
  "Test safe-shell-commands with other system content."
  (let ((markdown "## SYSTEM:

You are a helpful assistant.

<safe-shell-commands>
ls
pwd
</safe-shell-commands>

Please be careful."))
    (let ((result (greger-parser-parse-dialog markdown)))
      ;; Should have a system message with combined content
      (should (= 1 (length (plist-get result :messages))))
      (should (string= "system" (alist-get 'role (car (plist-get result :messages)))))
      ;; Should also have metadata since safe-shell-commands can coexist with content
      (should (equal '(:safe-shell-commands ("ls" "pwd")) (plist-get result :metadata)))
      ;; System message should contain the original content and the auto-generated safe commands text
      (let ((system-content (alist-get 'content (car (plist-get result :messages)))))
        (should (string= "You are a helpful assistant.



Please be careful.

You can run arbitrary shell commands with the shell-command tool, but the following are safe shell commands that will run without requiring user confirmation:

* `ls`
* `pwd`"
                         system-content))))))

(ert-deftest greger-parser-test-safe-shell-commands-only-once ()
  "Test that only one safe-shell-commands block is allowed."
  (let ((markdown "## SYSTEM:

<safe-shell-commands>
ls
pwd
</safe-shell-commands>

<safe-shell-commands>
echo hello
</safe-shell-commands>"))
    (let ((result (greger-parser-parse-dialog markdown)))
      ;; Should extract the first one found
      (should (equal '(:safe-shell-commands ("ls" "pwd")) (plist-get result :metadata))))))

(ert-deftest greger-parser-test-safe-shell-commands-empty-lines ()
  "Test safe-shell-commands with empty lines and whitespace."
  (let ((markdown "## SYSTEM:

<safe-shell-commands>

ls -la

pwd

echo hello

</safe-shell-commands>"))
    (let ((result (greger-parser-parse-dialog markdown)))
      ;; Should have one system message with the auto-generated descriptive text
      (should (= 1 (length (plist-get result :messages))))
      (let ((system-msg (car (plist-get result :messages))))
        (should (string= "system" (alist-get 'role system-msg)))
        (let ((content (alist-get 'content system-msg)))
          (should (string= "You can run arbitrary shell commands with the shell-command tool, but the following are safe shell commands that will run without requiring user confirmation:

* `ls -la`
* `pwd`
* `echo hello`"
                           content))))
      (should (equal '(:safe-shell-commands ("ls -la" "pwd" "echo hello"))
                     (plist-get result :metadata))))))

(ert-deftest greger-parser-test-safe-shell-commands-not-in-system ()
  "Test that safe-shell-commands outside SYSTEM section are ignored."
  (let ((markdown "## USER:

<safe-shell-commands>
ls -la
</safe-shell-commands>

What files are here?"))
    (let ((result (greger-parser-parse-dialog markdown)))
      ;; Should have no metadata
      (should (equal '() (plist-get result :metadata)))
      ;; Should have user message with the tag as regular content
      (should (= 1 (length (plist-get result :messages))))
      (should (string-match-p "<safe-shell-commands>"
                             (alist-get 'content (car (plist-get result :messages))))))))

(ert-deftest greger-parser-test-safe-shell-commands-in-code-block ()
  "Test that safe-shell-commands inside code blocks are not processed."
  (let ((markdown "## SYSTEM:

Here's an example:

```
<safe-shell-commands>
ls -la
</safe-shell-commands>
```

Don't process that."))
    (let ((result (greger-parser-parse-dialog markdown)))
      ;; Should have no metadata
      (should (equal '() (plist-get result :metadata)))
      ;; Should have system message with code block
      (should (= 1 (length (plist-get result :messages))))
      (should (string-match-p "<safe-shell-commands>"
                             (alist-get 'content (car (plist-get result :messages))))))))

(ert-deftest greger-parser-test-system-content-with-safe-commands-example ()
  "Test the exact example from the user: system content with safe-shell-commands."
  (let ((markdown "## SYSTEM:

you are a friendly assistant

<safe-shell-commands>
command1
command2
</safe-shell-commands>

## USER:

Hello"))
    (let ((result (greger-parser-parse-dialog markdown)))
      ;; Should have both system and user messages
      (should (= 2 (length (plist-get result :messages))))

      ;; Check system message - should contain both original content and auto-generated safe commands text
      (let ((system-msg (car (plist-get result :messages))))
        (should (string= "system" (alist-get 'role system-msg)))
        (let ((content (alist-get 'content system-msg)))
          (should (string= "you are a friendly assistant

You can run arbitrary shell commands with the shell-command tool, but the following are safe shell commands that will run without requiring user confirmation:

* `command1`
* `command2`"
                           content))))

      ;; Check user message
      (let ((user-msg (cadr (plist-get result :messages))))
        (should (string= "user" (alist-get 'role user-msg)))
        (should (string= "Hello" (alist-get 'content user-msg))))

      ;; Should have metadata with safe shell commands
      (should (equal '(:safe-shell-commands ("command1" "command2")) (plist-get result :metadata))))))

(provide 'test-greger-parser)

;;; test-greger-parser.el ends here
</tool.toolu_01QGELQ9hdkimm4aKif2L6p8>

## ASSISTANT:

This is a complex test file with many test cases. Let me now examine the local test file to understand what's already been ported:

## TOOL USE:

Name: read-file
ID: toolu_018Xcf5yBXGFxLX3D5kAXoDG

### path

<tool.toolu_018Xcf5yBXGFxLX3D5kAXoDG>
test-all-greger-cases.el
</tool.toolu_018Xcf5yBXGFxLX3D5kAXoDG>

## TOOL RESULT:

ID: toolu_018Xcf5yBXGFxLX3D5kAXoDG

<tool.toolu_018Xcf5yBXGFxLX3D5kAXoDG>
;;; test-all-greger-cases.el --- Comprehensive test of greger-tree-sitter against all test cases -*- lexical-binding: t -*-

(load-file "./greger-tree-sitter.el")

;; All test cases from greger-parser-test-cases
(defconst greger-tree-sitter-test-cases
  '(
    ;; Simple user message
    (:name "simple-user-message"
           :markdown "## USER:

Hello, how are you?"
           :dialog (((role . "user") (content . "Hello, how are you?"))))

    ;; System and user message
    (:name "system-and-user"
           :markdown "## SYSTEM:

You are a helpful assistant.

## USER:

What's the weather like?"
           :dialog (((role . "system") (content . "You are a helpful assistant."))
                    ((role . "user") (content . "What's the weather like?"))))

    ;; Simple conversation
    (:name "simple-conversation"
           :markdown "## USER:

Hello

## ASSISTANT:

Hi there! How can I help you today?"
           :dialog (((role . "user") (content . "Hello"))
                    ((role . "assistant") (content . "Hi there! How can I help you today?"))))

    ;; Thinking section (becomes part of assistant message)
    (:name "thinking-section"
           :markdown "## USER:

What's 2+2?

## THINKING:

This is a simple arithmetic question. I can answer this directly without needing any tools.

## ASSISTANT:

2 + 2 = 4"
           :dialog (((role . "user") (content . "What's 2+2?"))
                    ((role . "assistant") (content . (((type . "thinking") (thinking . "This is a simple arithmetic question. I can answer this directly without needing any tools.")) ((type . "text") (text . "2 + 2 = 4")))))))

    ;; Tool use with single parameter
    (:name "tool-use-single-param"
           :markdown "## USER:

Read the file hello.txt

## TOOL USE:

Name: read-file
ID: toolu_123

### path

<tool.toolu_123>
hello.txt
</tool.toolu_123>

## TOOL RESULT:

ID: toolu_123

<tool.toolu_123>
Hello, world!
</tool.toolu_123>

## ASSISTANT:

The file contains: Hello, world!"
           :dialog (((role . "user") (content . "Read the file hello.txt"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_123") (name . "read-file") (input . ((path . "hello.txt")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_123") (content . "Hello, world!")))))
                    ((role . "assistant") (content . "The file contains: Hello, world!"))))

    ;; Tool use with multiple parameters
    (:name "tool-use-multiple-params"
           :markdown "## USER:

Search for python files containing 'def main'

## TOOL USE:

Name: ripgrep
ID: toolu_456

### pattern

<tool.toolu_456>
def main
</tool.toolu_456>

### file-type

<tool.toolu_456>
py
</tool.toolu_456>

### context-lines

<tool.toolu_456>
2
</tool.toolu_456>

## TOOL RESULT:

ID: toolu_456

<tool.toolu_456>
src/main.py:10:def main():
src/utils.py:25:def main_helper():
</tool.toolu_456>

## ASSISTANT:

I found 2 matches for 'def main' in Python files."
           :dialog (((role . "user") (content . "Search for python files containing 'def main'"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_456") (name . "ripgrep") (input . ((pattern . "def main") (file-type . "py") (context-lines . 2)))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_456") (content . "src/main.py:10:def main():\nsrc/utils.py:25:def main_helper():")))))
                    ((role . "assistant") (content . "I found 2 matches for 'def main' in Python files."))))

    ;; Complex workflow with thinking, tool use, and multiple responses
    (:name "complex-workflow"
           :markdown "## USER:

who's the current king of sweden?

## THINKING:

The user is asking about the current king of Sweden. This is a factual question that I can search for to get the most up-to-date information. I'll use the search function to find this information.

## TOOL USE:

Name: search-286d2fd3
ID: toolu_01Kf8avk1cBqH5ZHoXL92Duc

### query

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
current king of Sweden 2024
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

### include_answer

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
basic
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

### max_results

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
3
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

## TOOL RESULT:

ID: toolu_01Kf8avk1cBqH5ZHoXL92Duc

<tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>
JSON result content
</tool.toolu_01Kf8avk1cBqH5ZHoXL92Duc>

## ASSISTANT:

The current King of Sweden is **Carl XVI Gustaf**. He has been reigning since 1973 and is the longest-reigning monarch in Swedish history."
           :dialog (((role . "user") (content . "who's the current king of sweden?"))
                    ((role . "assistant") (content . (((type . "thinking") (thinking . "The user is asking about the current king of Sweden. This is a factual question that I can search for to get the most up-to-date information. I'll use the search function to find this information.")) ((type . "tool_use") (id . "toolu_01Kf8avk1cBqH5ZHoXL92Duc") (name . "search-286d2fd3") (input . ((query . "current king of Sweden 2024") (include_answer . "basic") (max_results . 3)))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_01Kf8avk1cBqH5ZHoXL92Duc") (content . "JSON result content")))))
                    ((role . "assistant") (content . "The current King of Sweden is **Carl XVI Gustaf**. He has been reigning since 1973 and is the longest-reigning monarch in Swedish history."))))

    ;; Multiple tool uses in sequence
    (:name "multiple-tool-uses"
           :markdown "## USER:

List files and read the first one

## TOOL USE:

Name: list-directory
ID: toolu_111

### path

<tool.toolu_111>
.
</tool.toolu_111>

## TOOL RESULT:

ID: toolu_111

<tool.toolu_111>
file1.txt
file2.txt
README.md
</tool.toolu_111>

## TOOL USE:

Name: read-file
ID: toolu_222

### path

<tool.toolu_222>
file1.txt
</tool.toolu_222>

## TOOL RESULT:

ID: toolu_222

<tool.toolu_222>
This is the content of file1.
</tool.toolu_222>

## ASSISTANT:

I found 3 files in the directory. The first file (file1.txt) contains: \"This is the content of file1.\""
           :dialog (((role . "user") (content . "List files and read the first one"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_111") (name . "list-directory") (input . ((path . ".")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_111") (content . "file1.txt\nfile2.txt\nREADME.md")))))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_222") (name . "read-file") (input . ((path . "file1.txt")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_222") (content . "This is the content of file1.")))))
                    ((role . "assistant") (content . "I found 3 files in the directory. The first file (file1.txt) contains: \"This is the content of file1.\""))))

    ;; Tool use with multiline parameter values
    (:name "tool-use-multiline-params"
           :markdown "## USER:

Write a new Python file

## TOOL USE:

Name: write-new-file
ID: toolu_789

### file_path

<tool.toolu_789>
script.py
</tool.toolu_789>

### contents

<tool.toolu_789>
#!/usr/bin/env python3

def main():
    print(\"Hello, world!\")

if __name__ == \"__main__\":
    main()
</tool.toolu_789>

### git_commit_message

<tool.toolu_789>
Add new Python script
</tool.toolu_789>

## TOOL RESULT:

ID: toolu_789

<tool.toolu_789>
Successfully wrote new file script.py with 85 characters.
</tool.toolu_789>

## ASSISTANT:

I've created a new Python script file with a basic Hello World program."
           :dialog (((role . "user") (content . "Write a new Python file"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_789") (name . "write-new-file") (input . ((file_path . "script.py") (contents . "#!/usr/bin/env python3\n\ndef main():\n    print(\"Hello, world!\")\n\nif __name__ == \"__main__\":\n    main()") (git_commit_message . "Add new Python script")))))))
                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_789") (content . "Successfully wrote new file script.py with 85 characters.")))))
                    ((role . "assistant") (content . "I've created a new Python script file with a basic Hello World program."))))

    ;; Just thinking without any other content
    (:name "thinking-only"
           :markdown "## USER:

Let me think about this

## THINKING:

I need to consider all the options carefully before responding."
           :dialog (((role . "user") (content . "Let me think about this"))
                    ((role . "assistant") (content . (((type . "thinking") (thinking . "I need to consider all the options carefully before responding.")))))))

    ;; Tool use without any following content
    (:name "tool-use-only"
           :markdown "## USER:

Read a file

## TOOL USE:

Name: read-file
ID: toolu_999

### path

<tool.toolu_999>
test.txt
</tool.toolu_999>
"
           :dialog (((role . "user") (content . "Read a file"))
                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_999") (name . "read-file") (input . ((path . "test.txt")))))))))

    ;; Citations basic test
    (:name "citations-basic"
           :markdown "## USER:

When was Claude Shannon born?

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE

### query

<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
claude shannon birth date
</tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>

## SERVER TOOL RESULT:

ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE

<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
Search results about Claude Shannon
</tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>

## ASSISTANT:

Based on the search results, <cite>Claude Shannon was born on April 30, 1916, in Petoskey, Michigan</cite>

## CITATIONS:

### https://en.wikipedia.org/wiki/Claude_Shannon

Title: Claude Shannon - Wikipedia
Cited text: Claude Elwood Shannon (April 30, 1916 – February 24, 2001) was an American mathematician, electrical engineer, computer scientist, cryptographer and i...
Encrypted index: Eo8BCioIAhgBIiQyYjQ0OWJmZi1lNm.."
           :dialog (((role . "user") (content . "When was Claude Shannon born?"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE")
                                                       (name . "web_search")
                                                       (input . ((query . "claude shannon birth date"))))
                                                      ((type . "web_search_tool_result")
                                                       (tool_use_id . "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE")
                                                       (content . "Search results about Claude Shannon"))
                                                      ((type . "text")
                                                       (text . "Based on the search results,"))
                                                      ((type . "text")
                                                       (text . "Claude Shannon was born on April 30, 1916, in Petoskey, Michigan")
                                                       (citations . (((type . "web_search_result_location")
                                                                      (url . "https://en.wikipedia.org/wiki/Claude_Shannon")
                                                                      (title . "Claude Shannon - Wikipedia")
                                                                      (cited_text . "Claude Elwood Shannon (April 30, 1916 – February 24, 2001) was an American mathematician, electrical engineer, computer scientist, cryptographer and i...")
                                                                      (encrypted_index . "Eo8BCioIAhgBIiQyYjQ0OWJmZi1lNm.."))))))))))

    ;; Citations after tool result
    (:name "citations-after-tool-result"
           :markdown "## USER:

What's the current weather?

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_456

### query

<tool.srvtoolu_456>
current weather
</tool.srvtoolu_456>

## SERVER TOOL RESULT:

ID: srvtoolu_456

<tool.srvtoolu_456>
Weather search results
</tool.srvtoolu_456>

## ASSISTANT:

<cite>It's currently sunny and 75°F</cite>

## CITATIONS:

### https://weather.com

Title: Weather.com
Cited text: Currently sunny with a temperature of 75 degrees Fahrenheit...
Encrypted index: xyz789"
           :dialog (((role . "user") (content . "What's the current weather?"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_456")
                                                       (name . "web_search")
                                                       (input . ((query . "current weather"))))
                                                      ((type . "web_search_tool_result")
                                                       (tool_use_id . "srvtoolu_456")
                                                       (content . "Weather search results"))
                                                      ((type . "text")
                                                       (text . "It's currently sunny and 75°F")
                                                       (citations . (((type . "web_search_result_location")
                                                                      (url . "https://weather.com")
                                                                      (title . "Weather.com")
                                                                      (cited_text . "Currently sunny with a temperature of 75 degrees Fahrenheit...")
                                                                      (encrypted_index . "xyz789"))))))))))

    ;; Multiple citations test
    (:name "citations-multiple"
           :markdown "## USER:

Tell me about Einstein and Newton

## SERVER TOOL USE:

Name: web_search
ID: srvtoolu_789

### query

<tool.srvtoolu_789>
Einstein Newton physics
</tool.srvtoolu_789>

## SERVER TOOL RESULT:

ID: srvtoolu_789

<tool.srvtoolu_789>
Physics search results
</tool.srvtoolu_789>

## ASSISTANT:

<cite>Einstein developed the theory of relativity</cite>

## CITATIONS:

### https://physics.com/einstein

Title: Einstein Biography
Cited text: Albert Einstein developed the theory of relativity in the early 20th century...
Encrypted index: def456

## ASSISTANT:

while <cite>Newton formulated the laws of motion</cite>

## CITATIONS:

### https://physics.com/newton

Title: Newton Biography
Cited text: Isaac Newton formulated the three laws of motion...
Encrypted index: ghi789"
           :dialog (((role . "user") (content . "Tell me about Einstein and Newton"))
                    ((role . "assistant") (content . (((type . "server_tool_use")
                                                       (id . "srvtoolu_789")
                                                       (name . "web_search")
                                                       (input . ((query . "Einstein Newton physics"))))
                                                      ((type . "web_search_tool_result")
                                                       (tool_use_id . "srvtoolu_789")
                                                       (content . "Physics search results"))
                                                      ((type . "text")
                                                       (text . "Einstein developed the theory of relativity")
                                                       (citations . (((type . "web_search_result_location")
                                                                      (url . "https://physics.com/einstein")
                                                                      (title . "Einstein Biography")
                                                                      (cited_text . "Albert Einstein developed the theory of relativity in the early 20th century...")
                                                                      (encrypted_index . "def456")))))
                                                      ((type . "text") (text . "while"))
                                                      ((type . "text")
                                                       (text . "Newton formulated the laws of motion")
                                                       (citations . (((type . "web_search_result_location")
                                                                      (url . "https://physics.com/newton")
                                                                      (title . "Newton Biography")
                                                                      (cited_text . "Isaac Newton formulated the three laws of motion...")
                                                                      (encrypted_index . "ghi789")))))))))))
    )

(defvar greger-tree-sitter-test-results '())
(defvar greger-tree-sitter-tests-passed 0)
(defvar greger-tree-sitter-tests-failed 0)

(defun greger-tree-sitter-test-equal (expected actual)
  "Compare two dialog structures for equality."
  (equal expected actual))

(defun greger-tree-sitter-run-single-test (test-case)
  "Run a single test case and return result."
  (let* ((name (plist-get test-case :name))
         (markdown (plist-get test-case :markdown))
         (expected (plist-get test-case :dialog))
         (start-time (current-time)))

    (message "\n=== Testing: %s ===" name)

    (condition-case err
        (let* ((actual (greger-tree-sitter-parse markdown))
               (elapsed (float-time (time-subtract (current-time) start-time))))

          ;; Check if results match
          (if (greger-tree-sitter-test-equal expected actual)
              (progn
                (message "✅ PASSED (%.3fs)" elapsed)
                (setq greger-tree-sitter-tests-passed (1+ greger-tree-sitter-tests-passed))
                (push `(:name ,name :status passed :time ,elapsed) greger-tree-sitter-test-results))
            (progn
              (message "❌ FAILED (%.3fs)" elapsed)
              (message "\nExpected:")
              (pp expected)
              (message "\nActual:")
              (pp actual)
              (setq greger-tree-sitter-tests-failed (1+ greger-tree-sitter-tests-failed))
              (push `(:name ,name :status failed :time ,elapsed :expected ,expected :actual ,actual)
                    greger-tree-sitter-test-results))))

      (error
       (message "❌ ERROR: %s" (error-message-string err))
       (setq greger-tree-sitter-tests-failed (1+ greger-tree-sitter-tests-failed))
       (push `(:name ,name :status error :error ,(error-message-string err))
             greger-tree-sitter-test-results)))))

(defun greger-tree-sitter-run-all-tests ()
  "Run all test cases and report results."
  (interactive)
  (message "\n🧪 Running greger-tree-sitter comprehensive tests...")

  ;; Reset counters
  (setq greger-tree-sitter-test-results '())
  (setq greger-tree-sitter-tests-passed 0)
  (setq greger-tree-sitter-tests-failed 0)

  ;; Check if tree-sitter is available
  (unless (treesit-ready-p 'greger)
    (error "Tree-sitter greger parser not available"))

  ;; Run all tests
  (dolist (test-case greger-tree-sitter-test-cases)
    (greger-tree-sitter-run-single-test test-case))

  ;; Report summary
  (message "\n📊 TEST SUMMARY:")
  (message "Total tests: %d" (+ greger-tree-sitter-tests-passed greger-tree-sitter-tests-failed))
  (message "Passed: %d" greger-tree-sitter-tests-passed)
  (message "Failed: %d" greger-tree-sitter-tests-failed)

  (if (> greger-tree-sitter-tests-failed 0)
      (progn
        (message "\n❌ FAILED TESTS:")
        (dolist (result (reverse greger-tree-sitter-test-results))
          (when (eq (plist-get result :status) 'failed)
            (message "  - %s" (plist-get result :name)))))
    (message "\n🎉 ALL TESTS PASSED!"))

  ;; Return results for programmatic use
  (list :passed greger-tree-sitter-tests-passed
        :failed greger-tree-sitter-tests-failed
        :results (reverse greger-tree-sitter-test-results)))

;; Run tests automatically when loaded
(if (treesit-ready-p 'greger)
    (greger-tree-sitter-run-all-tests)
  (message "❌ Tree-sitter greger parser not available"))

(provide 'test-all-greger-cases)
</tool.toolu_018Xcf5yBXGFxLX3D5kAXoDG>

## ASSISTANT:

Now let me examine the tree-sitter grammar file to understand the current state:

## TOOL USE:

Name: read-file
ID: toolu_017dKJnHfJ6roLXqBsbXvadH

### path

<tool.toolu_017dKJnHfJ6roLXqBsbXvadH>
grammar.js
</tool.toolu_017dKJnHfJ6roLXqBsbXvadH>

## TOOL RESULT:

ID: toolu_017dKJnHfJ6roLXqBsbXvadH

<tool.toolu_017dKJnHfJ6roLXqBsbXvadH>
/**
 * @file greger.el parser - Tree-sitter grammar for greger conversation format
 * @author Andreas Jansson <andreas.s.t.jansson@gmail.com>
 * @license MIT
 */

/// <reference types="tree-sitter-cli/dsl" />
// @ts-check

module.exports = grammar({
  name: "greger",

  extras: $ => [
    /[ \t]/,
  ],

  externals: $ => [
    $.tool_block_start,
    $.tool_block_end,
    $.tool_block_content,
    $._text,
  ],

  conflicts: $ => [
  ],

  rules: {
    source_file: $ => repeat($.section),

    section: $ => choice(
      $.user_section,
      $.system_section,
      $.assistant_section,
      $.thinking_section,
      $.tool_use_section,
      $.tool_result_section,
      $.server_tool_use_section,
      $.server_tool_result_section,
      $.citations_section,
    ),

    user_section: $ => seq(
      $.user_header,
      optional(alias($.content, $.section_content))
    ),

    system_section: $ => seq(
      $.system_header,
      optional(alias($.system_content, $.section_content))
    ),

    assistant_section: $ => seq(
      $.assistant_header,
      optional(alias($.content, $.section_content))
    ),

    thinking_section: $ => seq(
      $.thinking_header,
      optional(alias($.content, $.section_content))
    ),

    tool_use_section: $ => seq(
      $.tool_use_header,
      optional($.tool_use_content)
    ),

    tool_result_section: $ => seq(
      $.tool_result_header,
      optional($.tool_result_content)
    ),

    server_tool_use_section: $ => seq(
      $.server_tool_use_header,
      optional($.tool_use_content)
    ),

    server_tool_result_section: $ => seq(
      $.server_tool_result_header,
      optional($.tool_result_content)
    ),

    citations_section: $ => seq(
      $.citations_header,
      optional($.citations_content)
    ),

    // Headers - simple tokens
    user_header: $ => /##[ \t]*USER:[ \t]*\n/,
    system_header: $ => /##[ \t]*SYSTEM:[ \t]*\n/,
    assistant_header: $ => /##[ \t]*ASSISTANT:[ \t]*\n/,
    thinking_header: $ => /##[ \t]*THINKING:[ \t]*\n/,
    tool_use_header: $ => /##[ \t]*TOOL USE:[ \t]*\n/,
    tool_result_header: $ => /##[ \t]*TOOL RESULT:[ \t]*\n/,
    server_tool_use_header: $ => /##[ \t]*SERVER TOOL USE:[ \t]*\n/,
    server_tool_result_header: $ => /##[ \t]*SERVER TOOL RESULT:[ \t]*\n/,
    citations_header: $ => /##[ \t]*CITATIONS:[ \t]*\n/,

    // Content types - similar to RST and markdown
    content: $ => repeat1(choice(
      $.content_line,
      $.newline
    )),

    content_line: $ => seq(
      repeat1(choice(
        alias($._text, 'text'),
        $.cite_tag
      )),
      "\n"
    ),

    // Cite tag with structured content
    cite_tag: $ => seq(
      "<cite>",
      field("cited_text", repeat1(/[^<\n]+/)),
      "</cite>"
    ),

    system_content: $ => repeat1(choice(
      $.content_line,
      $.newline
    )),

    tool_use_content: $ => repeat1(choice(
      $.tool_name_line,
      $.tool_id_line,
      $.tool_parameter,
      $.newline
    )),

    tool_result_content: $ => repeat1(choice(
      $.tool_result_id_line,
      $.tool_result_block,
      $.newline
    )),

    citations_content: $ => repeat1(choice(
      $.citation_entry,
      $.newline
    )),







    // Tool-specific patterns
    tool_name_line: $ => seq(
      "Name:",
      /[ \t]*/,
      field("name", $.identifier),
      "\n"
    ),

    tool_id_line: $ => seq(
      "ID:",
      /[ \t]*/,
      field("id", $.identifier),
      "\n"
    ),

    tool_parameter: $ => seq(
      "###",
      /[ \t]*/,
      field("param_name", $.identifier),
      "\n",
      "\n",
      field("param_value", $.tool_param_block)
    ),

    tool_param_block: $ => seq(
      $.tool_block_start,
      field("content", repeat($.tool_block_content)),
      $.tool_block_end
    ),

    tool_result_id_line: $ => seq(
      "ID:",
      /[ \t]*/,
      field("id", $.identifier),
      "\n"
    ),

    tool_result_block: $ => seq(
      $.tool_block_start,
      field("content", repeat($.tool_block_content)),
      $.tool_block_end
    ),

    // Citation patterns
    citation_entry: $ => prec.left(seq(
      "###",
      /[ \t]*/,
      field("url", $.url),
      "\n",
      "\n",
      repeat(choice(
        $.citation_title,
        $.citation_text,
        $.citation_index,
        $.newline
      ))
    )),

    citation_title: $ => seq(
      "Title:",
      /[ \t]*/,
      field("title", /[^\n]+/),
      "\n"
    ),

    citation_text: $ => seq(
      "Cited text:",
      /[ \t]*/,
      field("text", /[^\n]+/),
      "\n"
    ),

    citation_index: $ => seq(
      "Encrypted index:",
      /[ \t]*/,
      field("index", /[^\n]+/),
      "\n"
    ),





    // Tool content line - anything except closing tool tag
    tool_content_line: $ => prec(-1, /[^\n]+/),

    newline: $ => "\n",

    // Basic tokens
    identifier: $ => /[a-zA-Z_][a-zA-Z0-9_.-]*/,
    url: $ => /https?:\/\/[^\s\n]+/,
  }
});
</tool.toolu_017dKJnHfJ6roLXqBsbXvadH>

## ASSISTANT:

Now let me check the current external scanner:

## TOOL USE:

Name: read-file
ID: toolu_01KcWcxijqGc4iDoqNkg2Gbd

### path

<tool.toolu_01KcWcxijqGc4iDoqNkg2Gbd>
src/scanner.c
</tool.toolu_01KcWcxijqGc4iDoqNkg2Gbd>

## TOOL RESULT:

ID: toolu_01KcWcxijqGc4iDoqNkg2Gbd

<tool.toolu_01KcWcxijqGc4iDoqNkg2Gbd>
#include <tree_sitter/parser.h>
#include <tree_sitter/alloc.h>
#include <string.h>
#include <wctype.h>

enum TokenType {
  TOOL_BLOCK_START,
  TOOL_BLOCK_END,
  TOOL_BLOCK_CONTENT,
  TEXT,
};

typedef struct {
  char current_tool_id[64];
  bool in_tool_block;
} Scanner;

static void advance(TSLexer *lexer) {
  lexer->advance(lexer, false);
}

static void skip(TSLexer *lexer) {
  lexer->advance(lexer, true);
}

void *tree_sitter_greger_external_scanner_create() {
  Scanner *scanner = ts_malloc(sizeof(Scanner));
  scanner->current_tool_id[0] = '\0';
  scanner->in_tool_block = false;
  return scanner;
}

void tree_sitter_greger_external_scanner_destroy(void *payload) {
  Scanner *scanner = (Scanner *)payload;
  ts_free(scanner);
}

unsigned tree_sitter_greger_external_scanner_serialize(void *payload, char *buffer) {
  Scanner *scanner = (Scanner *)payload;
  size_t id_len = strlen(scanner->current_tool_id);

  buffer[0] = scanner->in_tool_block ? 1 : 0;
  buffer[1] = (char)id_len;
  memcpy(buffer + 2, scanner->current_tool_id, id_len);

  return 2 + id_len;
}

void tree_sitter_greger_external_scanner_deserialize(void *payload, const char *buffer, unsigned length) {
  Scanner *scanner = (Scanner *)payload;

  if (length < 2) {
    scanner->in_tool_block = false;
    scanner->current_tool_id[0] = '\0';
    return;
  }

  scanner->in_tool_block = buffer[0] == 1;
  size_t id_len = (size_t)buffer[1];

  if (length >= 2 + id_len && id_len < 63) {
    memcpy(scanner->current_tool_id, buffer + 2, id_len);
    scanner->current_tool_id[id_len] = '\0';
  } else {
    scanner->current_tool_id[0] = '\0';
  }
}

// Check if the current position looks like our closing tag without advancing
static bool lookahead_for_closing_tag(TSLexer *lexer, Scanner *scanner) {
  // Save the current position
  lexer->mark_end(lexer);

  // Check if we have "</tool.ID>"
  if (lexer->lookahead != '<') return false;
  advance(lexer);

  if (lexer->lookahead != '/') return false;
  advance(lexer);

  if (lexer->lookahead != 't') return false;
  advance(lexer);

  if (lexer->lookahead != 'o') return false;
  advance(lexer);

  if (lexer->lookahead != 'o') return false;
  advance(lexer);

  if (lexer->lookahead != 'l') return false;
  advance(lexer);

  if (lexer->lookahead != '.') return false;
  advance(lexer);

  // Read the tool ID and check if it matches our current one
  char end_id[64];
  int id_len = 0;
  while (lexer->lookahead &&
         (isalnum(lexer->lookahead) || lexer->lookahead == '_' ||
          lexer->lookahead == '-' || lexer->lookahead == '.') &&
         id_len < 63) {
    end_id[id_len++] = lexer->lookahead;
    advance(lexer);
  }

  if (lexer->lookahead != '>') return false;

  end_id[id_len] = '\0';

  // Reset position back to the mark (the '<')
  // Note: We consumed past the closing tag for checking, but tree-sitter
  // will reset the position since we're just checking
  return strcmp(scanner->current_tool_id, end_id) == 0;
}

static bool scan_tool_start(TSLexer *lexer, Scanner *scanner) {
  // Expect "<tool."
  if (lexer->lookahead != '<') return false;
  advance(lexer);

  if (lexer->lookahead != 't') return false;
  advance(lexer);

  if (lexer->lookahead != 'o') return false;
  advance(lexer);

  if (lexer->lookahead != 'o') return false;
  advance(lexer);

  if (lexer->lookahead != 'l') return false;
  advance(lexer);

  if (lexer->lookahead != '.') return false;
  advance(lexer);

  // Read the tool ID
  int id_len = 0;
  while (lexer->lookahead &&
         (isalnum(lexer->lookahead) || lexer->lookahead == '_' ||
          lexer->lookahead == '-' || lexer->lookahead == '.') &&
         id_len < 63) {
    scanner->current_tool_id[id_len++] = lexer->lookahead;
    advance(lexer);
  }

  if (lexer->lookahead != '>') return false;
  advance(lexer);

  scanner->current_tool_id[id_len] = '\0';
  scanner->in_tool_block = true;

  lexer->result_symbol = TOOL_BLOCK_START;
  return true;
}

static bool scan_tool_end(TSLexer *lexer, Scanner *scanner) {
  if (!scanner->in_tool_block) return false;

  // Expect "</tool."
  if (lexer->lookahead != '<') return false;
  advance(lexer);

  if (lexer->lookahead != '/') return false;
  advance(lexer);

  if (lexer->lookahead != 't') return false;
  advance(lexer);

  if (lexer->lookahead != 'o') return false;
  advance(lexer);

  if (lexer->lookahead != 'o') return false;
  advance(lexer);

  if (lexer->lookahead != 'l') return false;
  advance(lexer);

  if (lexer->lookahead != '.') return false;
  advance(lexer);

  // Read the tool ID and check if it matches our current one
  char end_id[64];
  int id_len = 0;
  while (lexer->lookahead &&
         (isalnum(lexer->lookahead) || lexer->lookahead == '_' ||
          lexer->lookahead == '-' || lexer->lookahead == '.') &&
         id_len < 63) {
    end_id[id_len++] = lexer->lookahead;
    advance(lexer);
  }

  if (lexer->lookahead != '>') return false;
  advance(lexer);

  end_id[id_len] = '\0';

  // Only match if the IDs are the same as our current tool ID
  if (strcmp(scanner->current_tool_id, end_id) == 0) {
    scanner->in_tool_block = false;
    scanner->current_tool_id[0] = '\0';
    lexer->result_symbol = TOOL_BLOCK_END;
    return true;
  }

  return false;
}

static bool scan_tool_content(TSLexer *lexer, Scanner *scanner) {
  if (!scanner->in_tool_block) return false;

  bool has_content = false;

  // Consume characters until we see our closing tag
  while (lexer->lookahead) {
    if (lexer->lookahead == '<' && lookahead_for_closing_tag(lexer, scanner)) {
      // We've hit our closing tag, stop consuming content
      break;
    }
    advance(lexer);
    has_content = true;
  }

  if (has_content) {
    lexer->result_symbol = TOOL_BLOCK_CONTENT;
    return true;
  }

  return false;
}

static bool scan_text(TSLexer *lexer) {
  // Don't match if we're at end of input or start of line with no content
  if (lexer->lookahead == '\0' || lexer->lookahead == '\n') {
    return false;
  }

  // Don't match if we're starting with markup characters
  if (lexer->lookahead == '<' || lexer->lookahead == '#') {
    return false;
  }

  // Consume at least one character
  bool has_content = false;
  while (lexer->lookahead != '\0' &&
         lexer->lookahead != '\n' &&
         lexer->lookahead != '<' &&
         lexer->lookahead != '#') {
    advance(lexer);
    has_content = true;
  }

  if (has_content) {
    lexer->result_symbol = TEXT;
    return true;
  }

  return false;
}

bool tree_sitter_greger_external_scanner_scan(void *payload, TSLexer *lexer, const bool *valid_symbols) {
  Scanner *scanner = (Scanner *)payload;

  // Try to handle end tokens first when we're in a tool block
  if (valid_symbols[TOOL_BLOCK_END] && scanner->in_tool_block) {
    // Skip whitespace for end tokens
    while (iswspace(lexer->lookahead)) {
      skip(lexer);
    }
    if (scan_tool_end(lexer, scanner)) {
      return true;
    }
  }

  // Handle tool block content (don't skip whitespace for content)
  if (valid_symbols[TOOL_BLOCK_CONTENT] && scanner->in_tool_block) {
    return scan_tool_content(lexer, scanner);
  }

  // Handle text tokens (don't skip whitespace for text)
  if (valid_symbols[TEXT] && !scanner->in_tool_block) {
    return scan_text(lexer);
  }

  // Skip whitespace for start tokens
  while (iswspace(lexer->lookahead)) {
    skip(lexer);
  }

  if (valid_symbols[TOOL_BLOCK_START] && !scanner->in_tool_block) {
    return scan_tool_start(lexer, scanner);
  }

  return false;
}
</tool.toolu_01KcWcxijqGc4iDoqNkg2Gbd>

## ASSISTANT:

Now let me check the Elisp integration file:

## TOOL USE:

Name: read-file
ID: toolu_0123hSx2TcNY2jyKzfAGynCc

### path

<tool.toolu_0123hSx2TcNY2jyKzfAGynCc>
greger-tree-sitter.el
</tool.toolu_0123hSx2TcNY2jyKzfAGynCc>

## TOOL RESULT:

ID: toolu_0123hSx2TcNY2jyKzfAGynCc

<tool.toolu_0123hSx2TcNY2jyKzfAGynCc>
;;; greger-tree-sitter.el --- Tree-sitter integration for greger format -*- lexical-binding: t -*-

;;; Commentary:
;; This file provides tree-sitter parsing for the greger conversation format.
;; It parses markdown-like conversation logs with sections like ## USER:, ## ASSISTANT:,
;; ## TOOL USE:, etc., and converts them to structured dialog messages.
;;
;; MAIN ENTRY POINT:
;;   `greger-tree-sitter-parse' - Parse greger text and return message list
;;
;; KEY FEATURES:
;; - User/Assistant/System message parsing
;; - Tool use workflows (## TOOL USE: → ## TOOL RESULT:)
;; - Server tool workflows (## SERVER TOOL USE: → ## SERVER TOOL RESULT:)
;; - Citations support (<cite>text</cite> + ## CITATIONS: sections)
;; - Thinking sections (## THINKING:)
;; - Complex content blocks with proper ordering
;;
;; CITATION WORKFLOW:
;; When text contains <cite>cited text</cite>, the parser looks for subsequent
;; ## CITATIONS: sections and associates the citation metadata with the cited text.
;; This creates structured content blocks where cited text includes citation objects.
;;
;; OUTPUT FORMAT:
;; Returns list of message objects compatible with greger.el:
;;   ((role . "user") (content . "string content"))
;;   ((role . "assistant") (content . (content-block-list)))
;;
;; Content blocks have 'type and type-specific fields:
;;   - text: 'text field, optional 'citations field
;;   - thinking: 'thinking field
;;   - tool_use: 'id, 'name, 'input fields
;;   - tool_result: 'tool_use_id, 'content fields
;;   - server_tool_use: 'id, 'name, 'input fields
;;   - web_search_tool_result: 'tool_use_id, 'content fields
;;
;; INTERNAL ARCHITECTURE:
;; - Section extraction functions handle each ## HEADER: type
;; - Citation processing associates ## CITATIONS: with <cite> tags
;; - Content block ordering ensures tools → results → text flow
;; - Tree-sitter grammar provides robust parsing of complex structures

;;; Code:

(require 'treesit)
(require 'cl-lib)

(add-to-list 'treesit-extra-load-path "/Users/andreas/scratch/greger-grammar")

(defun greger-tree-sitter-parse (text)
  "Parse greger conversation TEXT using tree-sitter and return structured dialog.

INPUT:
  TEXT - A string containing greger conversation format, e.g.:
    \"## USER:

    Hello, how are you?

    ## ASSISTANT:

    I'm doing well, thanks! <cite>This is cited text</cite>

    ## CITATIONS:

    ### https://example.com

    Title: Example Site
    Cited text: This is cited text from the source
    Encrypted index: abc123\"

OUTPUT:
  Returns a list of message objects, each with 'role and 'content fields:
  - Role is one of: \"user\", \"assistant\", \"system\"
  - Content can be either:
    a) A simple string for basic messages
    b) A list of content blocks for complex messages

  Content blocks have 'type field and additional fields:
  - type=\"text\": Has 'text field, optionally 'citations field
  - type=\"thinking\": Has 'thinking field
  - type=\"tool_use\": Has 'id, 'name, 'input fields
  - type=\"tool_result\": Has 'tool_use_id, 'content fields
  - type=\"server_tool_use\": Has 'id, 'name, 'input fields
  - type=\"web_search_tool_result\": Has 'tool_use_id, 'content fields

EXAMPLE OUTPUT:
  ((role . \"user\") (content . \"Hello, how are you?\"))
  ((role . \"assistant\")
   (content . (((type . \"text\") (text . \"I'm doing well, thanks!\"))
               ((type . \"text\")
                (text . \"This is cited text\")
                (citations . (((type . \"web_search_result_location\")
                               (url . \"https://example.com\")
                               (title . \"Example Site\")
                               (cited_text . \"This is cited text from the source\")
                               (encrypted_index . \"abc123\"))))))))

ERRORS:
  Throws an error if tree-sitter greger parser is not available."
  (unless (treesit-ready-p 'greger)
    (error "Tree-sitter greger parser not available"))

  (with-temp-buffer
    (insert text)
    (let ((parser (treesit-parser-create 'greger)))
      (greger-tree-sitter--extract-dialog parser text))))

(defun greger-tree-sitter--extract-dialog (parser text)
  "Extract dialog messages from the parsed tree-sitter PARSER with original TEXT.

INPUT:
  PARSER - A tree-sitter parser object that has parsed the greger text
  TEXT - The original text string (currently unused but kept for compatibility)

PROCESSING:
  1. Gets the root node from the parser
  2. Handles two cases:
     - source_file: Multiple sections (full conversation)
     - section: Single section (partial conversation)
  3. For multiple sections, transforms them according to citation requirements
  4. For single section, extracts just that section

OUTPUT:
  Returns a list of message objects in the same format as greger-tree-sitter-parse.
  Messages are returned in the order they appear in the input text.

INTERNAL FUNCTION: This is called by greger-tree-sitter-parse and not intended
for direct use."
  (let ((root-node (treesit-parser-root-node parser))
        (messages '()))

    ;; Check if we have a source_file or just a section
    (cond
     ((equal (treesit-node-type root-node) "source_file")
      ;; Multiple sections case - process sections with citation handling
      (let ((sections (greger-tree-sitter--get-all-sections root-node)))
        (setq messages (greger-tree-sitter--process-sections-with-citations sections))))

     ((equal (treesit-node-type root-node) "section")
      ;; Single section case
      (when-let ((message (greger-tree-sitter--extract-section root-node)))
        (push message messages)))

     (t
      (error "Unknown root node type: %s" (treesit-node-type root-node))))

    messages))

(defun greger-tree-sitter--finalize-assistant-content (blocks)
  "Finalize assistant content BLOCKS, returning either a simple string or content blocks.

INPUT:
  BLOCKS - List of content block objects accumulated for an assistant message

PROCESSING:
  1. Converts citations_with_text and citations_without_text blocks to expected format
  2. Decides whether to return simple string content or structured content blocks:
     - If there's only one text block with no citations → return simple string
     - If there are multiple blocks, or citations, or non-text blocks → return content blocks
  3. Reorders blocks appropriately when returning content blocks

OUTPUT:
  Returns either:
  - A simple string (for basic assistant responses)
  - A list of content blocks (for complex responses with tools, thinking, citations)

LOGIC:
  Simple string: Single text block, no citations, no other block types
  Content blocks: Everything else (multiple blocks, citations, tools, thinking)

INTERNAL FUNCTION: Used by greger-tree-sitter--process-sections-with-citations
to determine the final format of assistant content."
  (let ((converted-blocks (greger-tree-sitter--convert-citation-blocks blocks)))
    (cond
     ;; No blocks - return empty string
     ((null converted-blocks) "")

     ;; Single text block with no citations - return simple string
     ((and (= (length converted-blocks) 1)
           (equal (alist-get 'type (car converted-blocks)) "text")
           (not (alist-get 'citations (car converted-blocks))))
      (alist-get 'text (car converted-blocks)))

     ;; Multiple blocks or complex content - return content blocks
     (t
      (greger-tree-sitter--reorder-assistant-blocks converted-blocks)))))

(defun greger-tree-sitter--convert-citation-blocks (blocks)
  "Convert citations_with_text and citations_without_text blocks to expected format.

INPUT:
  BLOCKS - List of content blocks that may include citations_with_text or citations_without_text

PROCESSING:
  Converts the new citation block types to the format expected by greger.el:
  - citations_with_text → text block with citations field
  - citations_without_text → leave as-is (this shouldn't appear in final output)
  - Other blocks → pass through unchanged

OUTPUT:
  Returns list of blocks in the expected format for greger.el compatibility.

INTERNAL FUNCTION: Used to maintain backward compatibility with existing greger.el
expectations while allowing the tree-sitter parser to be smarter about citations."
  (let ((result '()))
    (dolist (block blocks)
      (let ((type (alist-get 'type block)))
        (cond
         ((equal type "citations_with_text")
          ;; Convert to text block with citations field
          (let ((text (alist-get 'text block))
                (entries (alist-get 'entries block)))
            (push `((type . "text")
                    (text . ,text)
                    (citations . ,entries)) result)))

         ((equal type "citations_without_text")
          ;; This shouldn't typically appear in final assistant content,
          ;; but if it does, we can ignore it or convert it to something else
          ;; For now, skip it as it represents standalone citations
          nil)

         (t
          ;; Pass through other block types unchanged
          (push block result)))))
    (nreverse result)))

(defun greger-tree-sitter--reorder-assistant-blocks (blocks)
  "Reorder assistant content BLOCKS to match expected greger format order.

INPUT:
  BLOCKS - A list of content block objects, each with a 'type field

PROCESSING:
  Categorizes blocks by type and reorders them to match the expected format:
  1. server_tool_use blocks (tool calls made by assistant)
  2. web_search_tool_result blocks (results from server tools)
  3. All other blocks (text, thinking, etc.) in original order

OUTPUT:
  Returns the same list of blocks but reordered. This ensures that tool
  usage appears before tool results, which appears before response text,
  matching the expected conversation flow.

INTERNAL FUNCTION: Used during assistant message processing to ensure
proper block ordering for compatibility with greger.el expectations."
  (let ((server-tool-use '())
        (web-search-tool-result '())
        (other-blocks '()))

    ;; Categorize blocks
    (dolist (block blocks)
      (let ((type (alist-get 'type block)))
        (cond
         ((equal type "server_tool_use")
          (push block server-tool-use))
         ((equal type "web_search_tool_result")
          (push block web-search-tool-result))
         (t
          (push block other-blocks)))))

    ;; Return in desired order: server_tool_use, web_search_tool_result, others
    (append (nreverse server-tool-use)
            (nreverse web-search-tool-result)
            (nreverse other-blocks))))

(defun greger-tree-sitter--get-sections (root-node)
  "Extract all section nodes from ROOT-NODE tree.

INPUT:
  ROOT-NODE - A tree-sitter node representing the root of a parsed document

PROCESSING:
  Iterates through all child nodes of the root and collects those with
  type \"section\". Sections correspond to ## USER:, ## ASSISTANT:, etc.

OUTPUT:
  Returns a list of tree-sitter section nodes in the order they appear
  in the document.

INTERNAL FUNCTION: Helper for extracting sections from parsed trees.
Note: This function is similar to greger-tree-sitter--get-all-sections
but may have subtle differences in usage."
  (let ((sections '())
        (child-count (treesit-node-child-count root-node)))
    (dotimes (i child-count)
      (let ((child (treesit-node-child root-node i)))
        (when (equal (treesit-node-type child) "section")
          (push child sections))))
    (nreverse sections)))

(defun greger-tree-sitter--extract-section (section-node)
  "Extract a dialog message from a tree-sitter SECTION-NODE.

INPUT:
  SECTION-NODE - A tree-sitter node representing a single conversation section
                 (e.g., ## USER:, ## ASSISTANT:, ## TOOL USE:, etc.)

PROCESSING:
  1. Determines the section type by examining the first child node
  2. Dispatches to the appropriate extraction function based on type:
     - user_section → user message with string content
     - assistant_section → assistant message with string content
     - thinking_section → assistant message with thinking content block
     - tool_use_section → assistant message with tool_use content block
     - tool_result_section → user message with tool_result content block
     - server_tool_use_section → assistant message with server_tool_use block
     - server_tool_result_section → assistant message with web_search_tool_result block
     - system_section → system message with string content

OUTPUT:
  Returns a message object with 'role and 'content fields, or nil if the
  section type is not recognized.

INTERNAL FUNCTION: Central dispatcher for section extraction."
  (let ((section-type (treesit-node-type (treesit-node-child section-node 0))))
    (cond
     ((equal section-type "user_section")
      (greger-tree-sitter--extract-user-section section-node))
     ((equal section-type "system_section")
      (greger-tree-sitter--extract-system-section section-node))
     ((equal section-type "assistant_section")
      (greger-tree-sitter--extract-assistant-section section-node))
     ((equal section-type "thinking_section")
      (greger-tree-sitter--extract-thinking-section section-node))
     ((equal section-type "tool_use_section")
      (greger-tree-sitter--extract-tool-use-section section-node))
     ((equal section-type "tool_result_section")
      (greger-tree-sitter--extract-tool-result-section section-node))
     ((equal section-type "server_tool_use_section")
      (greger-tree-sitter--extract-server-tool-use-section section-node))
     ((equal section-type "server_tool_result_section")
      (greger-tree-sitter--extract-server-tool-result-section section-node))
     (t nil))))

(defun greger-tree-sitter--extract-user-section (section-node)
  "Extract user message from a ## USER: SECTION-NODE.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## USER: section

PROCESSING:
  1. Gets the user_section child node
  2. Finds the section_content within it
  3. Extracts plain text content, trimming whitespace

OUTPUT:
  Returns a message object:
  ((role . \"user\") (content . \"extracted text content\"))

  If no content is found, content will be an empty string.

EXAMPLE INPUT SECTION:
  ## USER:

  Hello, how are you?

EXAMPLE OUTPUT:
  ((role . \"user\") (content . \"Hello, how are you?\"))"
  (let* ((user-section-node (treesit-node-child section-node 0))
         (content-node (greger-tree-sitter--find-child-by-type user-section-node "section_content")))

    `((role . "user")
      (content . ,(if content-node
                      (greger-tree-sitter--extract-content content-node)
                    "")))))

(defun greger-tree-sitter--extract-system-section (section-node)
  "Extract system message from a ## SYSTEM: SECTION-NODE.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## SYSTEM: section

PROCESSING:
  1. Gets the system_section child node
  2. Finds the section_content within it
  3. Extracts plain text content, trimming whitespace

OUTPUT:
  Returns a message object:
  ((role . \"system\") (content . \"extracted text content\"))

  If no content is found, content will be an empty string.

EXAMPLE INPUT SECTION:
  ## SYSTEM:

  You are a helpful assistant.

EXAMPLE OUTPUT:
  ((role . \"system\") (content . \"You are a helpful assistant.\"))"
  (let* ((system-section-node (treesit-node-child section-node 0))
         (content-node (greger-tree-sitter--find-child-by-type system-section-node "section_content")))
    `((role . "system")
      (content . ,(if content-node
                      (greger-tree-sitter--extract-content content-node)
                    "")))))

(defun greger-tree-sitter--extract-assistant-section (section-node)
  "Extract assistant message from a ## ASSISTANT: SECTION-NODE.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## ASSISTANT: section

PROCESSING:
  1. Gets the assistant_section child node
  2. Finds the section_content within it
  3. Extracts plain text content, trimming whitespace

OUTPUT:
  Returns a message object:
  ((role . \"assistant\") (content . \"extracted text content\"))

  If no content is found, content will be an empty string.

  Note: This function extracts basic assistant content. In practice, assistant
  sections often get processed by greger-tree-sitter--process-sections-with-citations
  which may convert the string content to structured content blocks if the text
  contains <cite> tags or other special formatting.

EXAMPLE INPUT SECTION:
  ## ASSISTANT:

  I'm doing well, thank you for asking!

EXAMPLE OUTPUT:
  ((role . \"assistant\") (content . \"I'm doing well, thank you for asking!\"))"
  (let* ((assistant-section-node (treesit-node-child section-node 0))
         (content-node (greger-tree-sitter--find-child-by-type assistant-section-node "section_content")))
    `((role . "assistant")
      (content . ,(if content-node
                      (greger-tree-sitter--extract-content content-node)
                    "")))))

(defun greger-tree-sitter--extract-thinking-section (section-node)
  "Extract thinking content from a ## THINKING: section and return as assistant message.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## THINKING: section

PROCESSING:
  1. Gets the thinking_section child node
  2. Finds the section_content within it
  3. Extracts text content and wraps it in a thinking content block

OUTPUT:
  Returns an assistant message object with a thinking content block:
  ((role . \"assistant\")
   (content . (((type . \"thinking\") (thinking . \"extracted text\")))))

  Thinking sections are treated as assistant internal thoughts, so they
  always produce assistant messages with structured content.

EXAMPLE INPUT SECTION:
  ## THINKING:

  I need to think about this carefully before responding.

EXAMPLE OUTPUT:
  ((role . \"assistant\")
   (content . (((type . \"thinking\")
                (thinking . \"I need to think about this carefully before responding.\")))))"
  (let* ((thinking-section-node (treesit-node-child section-node 0))
         (content-node (greger-tree-sitter--find-child-by-type thinking-section-node "section_content")))
    `((role . "assistant")
      (content . (((type . "thinking")
                   (thinking . ,(if content-node
                                    (greger-tree-sitter--extract-content content-node)
                                  ""))))))))

(defun greger-tree-sitter--extract-tool-use-section (section-node)
  "Extract tool use from a ## TOOL USE: section and return as assistant message.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## TOOL USE: section

PROCESSING:
  1. Extracts tool name from \"Name: tool-name\" line
  2. Extracts tool ID from \"ID: tool-id\" line
  3. Extracts parameters from \"### param-name\" sections with <tool.id>content</tool.id> blocks
  4. Converts parameter names to symbols for the input alist

OUTPUT:
  Returns an assistant message object with a tool_use content block:
  ((role . \"assistant\")
   (content . (((type . \"tool_use\")
                (id . \"tool-id\")
                (name . \"tool-name\")
                (input . ((param1 . \"value1\") (param2 . \"value2\")))))))

EXAMPLE INPUT SECTION:
  ## TOOL USE:

  Name: read-file
  ID: toolu_123

  ### path

  <tool.toolu_123>
  hello.txt
  </tool.toolu_123>

EXAMPLE OUTPUT:
  ((role . \"assistant\")
   (content . (((type . \"tool_use\")
                (id . \"toolu_123\")
                (name . \"read-file\")
                (input . ((path . \"hello.txt\")))))))"
  (let* ((tool-section (treesit-node-child section-node 0))
         (tool-content (greger-tree-sitter--find-child-by-type tool-section "tool_use_content"))
         (tool-name nil)
         (tool-id nil)
         (parameters '()))

    ;; Extract tool name, ID, and parameters
    (when tool-content
      (let ((child-count (treesit-node-child-count tool-content)))
        (dotimes (i child-count)
          (let ((child (treesit-node-child tool-content i)))
            (cond
             ((equal (treesit-node-type child) "tool_name_line")
              (setq tool-name (treesit-node-text
                               (treesit-node-child-by-field-name child "name"))))
             ((equal (treesit-node-type child) "tool_id_line")
              (setq tool-id (treesit-node-text
                             (treesit-node-child-by-field-name child "id"))))
             ((equal (treesit-node-type child) "tool_parameter")
              (let ((param-name (treesit-node-text
                                 (treesit-node-child-by-field-name child "param_name")))
                    (param-value (greger-tree-sitter--extract-tool-param-value child)))
                (push (cons (intern param-name) param-value) parameters))))))))

    `((role . "assistant")
      (content . (((type . "tool_use")
                   (id . ,tool-id)
                   (name . ,tool-name)
                   (input . ,(nreverse parameters))))))))

(defun greger-tree-sitter--extract-tool-param-value (param-node)
  "Extract the value from a tool parameter PARAM-NODE.

INPUT:
  PARAM-NODE - Tree-sitter node representing a tool parameter with structure:
    ### param_name
    <tool.tool_id>
    parameter value content
    </tool.tool_id>

PROCESSING:
  1. Finds the param_value child (the <tool.id>...</tool.id> block)
  2. Extracts the content field within that block
  3. Trims whitespace from the extracted text
  4. Converts to number if the value is numeric

OUTPUT:
  Returns the parameter value as a number if numeric, string otherwise,
  or empty string if no content is found.

EXAMPLE INPUT:
  ### path
  <tool.toolu_123>
  /path/to/file.txt
  </tool.toolu_123>

EXAMPLE OUTPUT:
  \"/path/to/file.txt\"

EXAMPLE INPUT (numeric):
  ### context-lines
  <tool.toolu_123>
  2
  </tool.toolu_123>

EXAMPLE OUTPUT:
  2

INTERNAL FUNCTION: Used by greger-tree-sitter--extract-tool-use-section
to extract individual parameter values."
  (let ((param-block (treesit-node-child-by-field-name param-node "param_value")))
    (if param-block
        (let ((content-node (treesit-node-child-by-field-name param-block "content")))
          (if content-node
              (let ((value (string-trim (treesit-node-text content-node))))
                ;; Try to convert to number if it looks numeric
                (if (string-match-p "^[0-9]+\\(?:\\.[0-9]+\\)?$" value)
                    (string-to-number value)
                  ;; Check for boolean values
                  (cond
                   ((string= value "true") t)
                   ((string= value "false") nil)
                   (t value))))
            ""))
      "")))

(defun greger-tree-sitter--extract-tool-result-section (section-node)
  "Extract tool result from a ## TOOL RESULT: section and return as user message.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## TOOL RESULT: section

PROCESSING:
  1. Extracts tool ID from \"ID: tool-id\" line
  2. Extracts result content from <tool.id>content</tool.id> block
  3. Creates a user message with tool_result content block

OUTPUT:
  Returns a user message object with a tool_result content block:
  ((role . \"user\")
   (content . (((type . \"tool_result\")
                (tool_use_id . \"tool-id\")
                (content . \"result content\")))))

  Tool results are considered user messages because they represent
  external system responses that the assistant receives.

EXAMPLE INPUT SECTION:
  ## TOOL RESULT:

  ID: toolu_123

  <tool.toolu_123>
  File contents: Hello, world!
  </tool.toolu_123>

EXAMPLE OUTPUT:
  ((role . \"user\")
   (content . (((type . \"tool_result\")
                (tool_use_id . \"toolu_123\")
                (content . \"File contents: Hello, world!\")))))"
  (let* ((tool-section (treesit-node-child section-node 0))
         (tool-content (greger-tree-sitter--find-child-by-type tool-section "tool_result_content"))
         (tool-id nil)
         (result-content ""))

    ;; Extract tool ID and result content
    (when tool-content
      (let ((child-count (treesit-node-child-count tool-content)))
        (dotimes (i child-count)
          (let ((child (treesit-node-child tool-content i)))
            (cond
             ((equal (treesit-node-type child) "tool_result_id_line")
              (setq tool-id (treesit-node-text
                             (treesit-node-child-by-field-name child "id"))))
             ((equal (treesit-node-type child) "tool_result_block")
              (let ((content-node (treesit-node-child-by-field-name child "content")))
                (when content-node
                  (setq result-content (string-trim (treesit-node-text content-node)))))))))))

    `((role . "user")
      (content . (((type . "tool_result")
                   (tool_use_id . ,tool-id)
                   (content . ,result-content)))))))

(defun greger-tree-sitter--extract-server-tool-use-section (section-node)
  "Extract server tool use from a ## SERVER TOOL USE: section.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## SERVER TOOL USE: section

PROCESSING:
  1. Uses greger-tree-sitter--extract-tool-use-section to extract basic tool structure
  2. Changes the content block type from \"tool_use\" to \"server_tool_use\"

  Server tool use has the same structure as regular tool use but represents
  tools called on the server side rather than client side.

OUTPUT:
  Returns an assistant message object with a server_tool_use content block:
  ((role . \"assistant\")
   (content . (((type . \"server_tool_use\")
                (id . \"tool-id\")
                (name . \"tool-name\")
                (input . ((param . \"value\")))))))

EXAMPLE INPUT SECTION:
  ## SERVER TOOL USE:

  Name: web_search
  ID: srvtoolu_123

  ### query

  <tool.srvtoolu_123>
  search terms
  </tool.srvtoolu_123>

EXAMPLE OUTPUT:
  ((role . \"assistant\")
   (content . (((type . \"server_tool_use\")
                (id . \"srvtoolu_123\")
                (name . \"web_search\")
                (input . ((query . \"search terms\")))))))"
  ;; Similar to tool_use but with server_tool_use type
  (let ((result (greger-tree-sitter--extract-tool-use-section section-node)))
    ;; Change the type to server_tool_use
    (when result
      (let ((content (alist-get 'content result)))
        (when (and content (> (length content) 0))
          (setf (alist-get 'type (car content)) "server_tool_use"))))
    result))

(defun greger-tree-sitter--extract-server-tool-result-section (section-node)
  "Extract server tool result from a ## SERVER TOOL RESULT: section.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## SERVER TOOL RESULT: section

PROCESSING:
  1. Uses greger-tree-sitter--extract-tool-result-section to extract basic structure
  2. Changes role from \"user\" to \"assistant\" (server results are part of assistant flow)
  3. Changes content type from \"tool_result\" to \"web_search_tool_result\"
  4. Attempts to parse content as JSON, falling back to string if parsing fails

OUTPUT:
  Returns an assistant message object with a web_search_tool_result content block:
  ((role . \"assistant\")
   (content . (((type . \"web_search_tool_result\")
                (tool_use_id . \"tool-id\")
                (content . parsed-json-or-string)))))

  The content field will contain either:
  - Parsed JSON as an alist/list structure if content is valid JSON
  - Original string content if JSON parsing fails

EXAMPLE INPUT SECTION:
  ## SERVER TOOL RESULT:

  ID: srvtoolu_123

  <tool.srvtoolu_123>
  [{\"title\": \"Example\", \"url\": \"https://example.com\"}]
  </tool.srvtoolu_123>

EXAMPLE OUTPUT:
  ((role . \"assistant\")
   (content . (((type . \"web_search_tool_result\")
                (tool_use_id . \"srvtoolu_123\")
                (content . (((title . \"Example\") (url . \"https://example.com\"))))))))"
  (let ((result (greger-tree-sitter--extract-tool-result-section section-node)))
    ;; Change role to assistant and type to web_search_tool_result
    (when result
      (setf (alist-get 'role result) "assistant")
      (let ((content (alist-get 'content result)))
        (when (and content (> (length content) 0))
          (setf (alist-get 'type (car content)) "web_search_tool_result")
          ;; Try to parse JSON content
          (let ((content-text (alist-get 'content (car content))))
            (when (stringp content-text)
              (condition-case nil
                  (let ((parsed-json (json-parse-string content-text :object-type 'alist :array-type 'list)))
                    (setf (alist-get 'content (car content)) parsed-json))
                (error
                 ;; If JSON parsing fails, keep as string
                 nil)))))))
    result))

(defun greger-tree-sitter--find-child-by-type (node type)
  "Find the first child of NODE with the given TYPE.

INPUT:
  NODE - A tree-sitter node to search within
  TYPE - String representing the node type to find (e.g., \"section_content\")

PROCESSING:
  Iterates through all direct children of the node and returns the first
  one that matches the specified type.

OUTPUT:
  Returns the first matching child node, or nil if no match is found.

INTERNAL FUNCTION: Utility for navigating tree-sitter parse trees when
looking for specific types of child nodes."
  (let ((child-count (treesit-node-child-count node))
        (found nil))
    (dotimes (i child-count)
      (let ((child (treesit-node-child node i)))
        (when (and (not found) (equal (treesit-node-type child) type))
          (setq found child))))
    found))

(defun greger-tree-sitter--transform-sections-for-citations (sections)
  "Transform SECTIONS according to citation requirements.

INPUT:
  SECTIONS - List of raw tree-sitter section nodes

PROCESSING:
  Implements your exact requirements:
  1. If <cite>...</cite> is encountered anywhere on a line, starts parsing a new citations_with_text object
  2. Content inside <cite>...</cite> becomes 'text field on citations_with_text object
  3. After </cite>, assumes whitespace until ## CITATIONS: at start of new line
  4. Parses those citations and places each entry as 'entry field on citations_with_text object
  5. If ## CITATIONS: is encountered when not parsing citations_with_text, makes citations_without_text object

OUTPUT:
  Returns list of transformed section objects that include citations_with_text and citations_without_text."
  (let ((result '())
        (i 0))

    (while (< i (length sections))
      (let* ((section (nth i sections))
             (section-type (greger-tree-sitter--get-section-type section)))

        ;; Check if this section contains cite tags
        (if (greger-tree-sitter--section-contains-cite-tags section)
            ;; Found cite tags - look for following citations section
            (let ((citations-section-idx (greger-tree-sitter--find-next-citations-section sections (1+ i))))
              (if citations-section-idx
                  ;; Found citations section - create citations_with_text
                  (let* ((citations-section (nth citations-section-idx sections))
                         (citations-with-text-obj (greger-tree-sitter--create-citations-with-text-section
                                                   section citations-section)))
                    (push citations-with-text-obj result)
                    ;; Skip the citations section since we consumed it
                    (setq i citations-section-idx))
                ;; No citations section found - treat as regular section
                (push section result)))

          ;; Check if this is a standalone citations section
          (if (equal section-type "citations_section")
              ;; Check if it was already consumed by a citations_with_text
              (let ((was-consumed (and (> i 0)
                                       (greger-tree-sitter--section-contains-cite-tags (nth (1- i) sections)))))
                (unless was-consumed
                  ;; Standalone citations section - create citations_without_text
                  (let ((citations-without-text-obj (greger-tree-sitter--create-citations-without-text-section section)))
                    (push citations-without-text-obj result))))
            ;; Regular section - pass through
            (push section result))))

      (setq i (1+ i)))

    (nreverse result)))

(defun greger-tree-sitter--section-contains-cite-tags (section)
  "Check if SECTION contains <cite> tags anywhere on a line."
  (let ((section-type (greger-tree-sitter--get-section-type section)))
    (when (member section-type '("assistant_section" "thinking_section" "user_section" "system_section"))
      (let ((content (greger-tree-sitter--get-raw-section-content section)))
        (and content (string-match-p "<cite>" content))))))

(defun greger-tree-sitter--get-raw-section-content (section)
  "Get raw text content from SECTION node."
  (let* ((section-child (treesit-node-child section 0))
         (content-node (greger-tree-sitter--find-child-by-type section-child "section_content")))
    (when content-node
      (treesit-node-text content-node))))

(defun greger-tree-sitter--create-citations-with-text-section (content-section citations-section)
  "Create a citations_with_text section object from CONTENT-SECTION and CITATIONS-SECTION."
  (let* ((content-text (greger-tree-sitter--get-raw-section-content content-section))
         (citations (greger-tree-sitter--extract-citations-section citations-section))
         (cite-texts (greger-tree-sitter--extract-cite-texts content-text)))
    `((type . "citations_with_text")
      (original-section . ,content-section)
      (texts . ,cite-texts)
      (entries . ,citations))))

(defun greger-tree-sitter--extract-cite-texts (content)
  "Extract all <cite>text</cite> content from CONTENT string."
  (let ((texts '())
        (start 0))
    (while (string-match "<cite>\\(.*?\\)</cite>" content start)
      (push (match-string 1 content) texts)
      (setq start (match-end 0)))
    (nreverse texts)))

(defun greger-tree-sitter--create-citations-without-text-section (citations-section)
  "Create a citations_without_text section object from CITATIONS-SECTION."
  (let ((citations (greger-tree-sitter--extract-citations-section citations-section)))
    `((type . "citations_without_text")
     (original-section . ,citations-section)
     (entries . ,citations))))

(defun greger-tree-sitter--section-was-transformed (section transformed-sections)
  "Check if SECTION was transformed and should be skipped in regular processing."
  (let ((found nil))
    (dolist (transformed transformed-sections)
      (when (and (listp transformed)
                 (alist-get 'original-section transformed)
                 (eq section (alist-get 'original-section transformed)))
        (setq found t)))
    found))

(defun greger-tree-sitter--process-transformed-sections (transformed-sections)
  "Process TRANSFORMED-SECTIONS that may include citations_with_text and citations_without_text."
  (let ((messages '())
        (current-assistant-blocks '()))

    (dolist (section transformed-sections)
      (let ((section-type (if (listp section)
                              (alist-get 'type section)
                            (greger-tree-sitter--get-section-type section))))

        (cond
         ((equal section-type "citations_with_text")
          ;; Process citations_with_text
          (let ((texts (alist-get 'texts section))
                (entries (alist-get 'entries section))
                (original-section (alist-get 'original-section section)))
            ;; Extract any non-cite content from original section
            (let ((blocks (greger-tree-sitter--extract-blocks-from-citations-with-text original-section texts entries)))
              (setq current-assistant-blocks (append current-assistant-blocks blocks)))))

         ((equal section-type "citations_without_text")
          ;; Process citations_without_text
          (let ((entries (alist-get 'entries section)))
            (setq current-assistant-blocks
                  (append current-assistant-blocks
                          `(((type . "citations_without_text") (entries . ,entries)))))))

         ;; Handle regular sections (existing logic)
         (t
          (let ((message (greger-tree-sitter--extract-section section)))
            (when message
              (let ((role (alist-get 'role message))
                    (content (alist-get 'content message)))

                (cond
                 ;; User/System sections - flush assistant blocks
                 ((member role '("user" "system"))
                  (when current-assistant-blocks
                    (let ((assistant-content (greger-tree-sitter--finalize-assistant-content current-assistant-blocks)))
                      (push `((role . "assistant") (content . ,assistant-content)) messages))
                    (setq current-assistant-blocks '()))
                  (push message messages))

                 ;; Assistant sections - accumulate blocks
                 ((equal role "assistant")
                  (if (listp content)
                      (setq current-assistant-blocks (append current-assistant-blocks content))
                    (when (and (stringp content) (> (length (string-trim content)) 0))
                      (setq current-assistant-blocks (append current-assistant-blocks `(((type . "text") (text . ,content))))))))))))))))

    ;; Flush any remaining assistant blocks
    (when current-assistant-blocks
      (let ((assistant-content (greger-tree-sitter--finalize-assistant-content current-assistant-blocks)))
        (push `((role . "assistant") (content . ,assistant-content)) messages)))

    (nreverse messages)))

(defun greger-tree-sitter--extract-blocks-from-citations-with-text (section cite-texts entries)
  "Extract content blocks from SECTION, creating citations_with_text blocks for CITE-TEXTS with ENTRIES."
  (let* ((content (greger-tree-sitter--get-raw-section-content section))
         (blocks '())
         (pos 0))

    ;; Process content, splitting by cite tags
    (dolist (cite-text cite-texts)
      (let ((cite-pattern (concat "<cite>" (regexp-quote cite-text) "</cite>")))
        (when (string-match cite-pattern content pos)
          ;; Add any text before the cite tag
          (let ((before-text (substring content pos (match-beginning 0))))
            (when (> (length (string-trim before-text)) 0)
              (push `((type . "text") (text . ,(string-trim before-text))) blocks)))

          ;; Add the citations_with_text block
          (push `((type . "text") (text . ,cite-text) (citations . ,entries)) blocks)

          (setq pos (match-end 0)))))

    ;; Add any remaining text after last cite tag
    (when (< pos (length content))
      (let ((remaining-text (substring content pos)))
        (when (> (length (string-trim remaining-text)) 0)
          (push `((type . "text") (text . ,(string-trim remaining-text))) blocks))))

    (nreverse blocks)))

(defun greger-tree-sitter--get-all-sections (root-node)
  "Extract all section nodes from ROOT-NODE in document order.

INPUT:
  ROOT-NODE - Tree-sitter root node (typically a \"source_file\" node)

PROCESSING:
  Iterates through all direct children of the root node and collects
  those with type \"section\". Maintains document order.

OUTPUT:
  Returns a list of section nodes in the order they appear in the document.
  Each section corresponds to a ## HEADER: block in the greger format.

INTERNAL FUNCTION: Similar to greger-tree-sitter--get-sections but used
in the main parsing flow for multi-section documents."
  (let ((sections '())
        (child-count (treesit-node-child-count root-node)))
    (dotimes (i child-count)
      (let ((child (treesit-node-child root-node i)))
        (when (equal (treesit-node-type child) "section")
          (push child sections))))
    (nreverse sections)))

(defun greger-tree-sitter--process-sections-with-citations (sections)
  "Process conversation SECTIONS and handle citation associations.

INPUT:
  SECTIONS - List of tree-sitter section nodes representing the parsed conversation

PROCESSING:
  This is the core function that handles the complex citation workflow:

  1. Iterates through sections in order
  2. Groups assistant-related sections together (assistant, thinking, tool_use, etc.)
  3. When a ## CITATIONS: section is encountered, associates those citations
     with any <cite> tags in the pending assistant content blocks
  4. Flushes assistant blocks when non-assistant sections are encountered
  5. Reorders final assistant blocks to put tools first, then text

  Section handling:
  - user_section, system_section → flush assistant blocks, add as separate message
  - assistant_section, thinking_section, tool_use_section, server_tool_use_section,
    server_tool_result_section → accumulate as assistant content blocks
  - citations_section → associate with pending assistant blocks containing <cite> tags
  - tool_result_section → flush assistant blocks, add as user message

OUTPUT:
  Returns a list of complete message objects where:
  - Each message has role and content fields
  - Assistant messages have structured content blocks
  - Citations are properly linked to cited text blocks
  - Tool sequences are properly ordered

INTERNAL FUNCTION: This implements the complex citation parsing logic that
makes <cite>text</cite> tags work with subsequent ## CITATIONS: sections."
  (let ((messages '())
        (current-assistant-blocks '())
        (i 0))

    (while (< i (length sections))
      (let* ((section (nth i sections))
             (section-type (greger-tree-sitter--get-section-type section)))

        (cond
         ;; User section - flush any pending assistant blocks and add user message
         ((equal section-type "user_section")
          (when current-assistant-blocks
            (let ((assistant-content (greger-tree-sitter--finalize-assistant-content current-assistant-blocks)))
              (push `((role . "assistant") (content . ,assistant-content)) messages))
            (setq current-assistant-blocks '()))
          (let ((message (greger-tree-sitter--extract-section section)))
            (when message (push message messages))))

         ;; System section - flush any pending assistant blocks and add system message
         ((equal section-type "system_section")
          (when current-assistant-blocks
            (let ((assistant-content (greger-tree-sitter--finalize-assistant-content current-assistant-blocks)))
              (push `((role . "assistant") (content . ,assistant-content)) messages))
            (setq current-assistant-blocks '()))
          (let ((message (greger-tree-sitter--extract-section section)))
            (when message (push message messages))))

         ;; Assistant-related sections - collect content blocks
         ((member section-type '("assistant_section" "thinking_section" "tool_use_section"
                                 "server_tool_use_section" "server_tool_result_section"))
          (let ((message (greger-tree-sitter--extract-section section)))
            (when message
              (let ((content (alist-get 'content message)))
                (if (listp content)
                    ;; Add all content blocks
                    (setq current-assistant-blocks (append current-assistant-blocks content))
                  ;; Check for cite tags and look ahead for citations section
                  (when (and (stringp content) (> (length (string-trim content)) 0))
                    (if (string-match-p "<cite>" content)
                        ;; Content has cite tags - look for following citations section
                        (let ((next-citations-idx (greger-tree-sitter--find-next-citations-section sections (1+ i))))
                          (if next-citations-idx
                              ;; Found citations section - create citations_with_text blocks
                              (let* ((citations-section (nth next-citations-idx sections))
                                     (citations (greger-tree-sitter--extract-citations-section citations-section))
                                     (cite-blocks (greger-tree-sitter--create-citations-with-text-blocks content citations)))
                                (setq current-assistant-blocks (append current-assistant-blocks cite-blocks))
                                ;; Mark this citations section as processed by skipping to it
                                (setq i next-citations-idx))
                            ;; No citations section found - treat as regular text
                            (setq current-assistant-blocks (append current-assistant-blocks `(((type . "text") (text . ,content)))))))
                      ;; Regular text without cite tags
                      (setq current-assistant-blocks (append current-assistant-blocks `(((type . "text") (text . ,content))))))))))))

         ;; Citations section - handle as citations_without_text if not already processed
         ((equal section-type "citations_section")
          ;; Check if this citations section follows a section with cite tags
          (let ((has-preceding-cites (and (> i 0)
                                          (greger-tree-sitter--section-has-cite-tags (nth (1- i) sections)))))
            (unless has-preceding-cites
              ;; This is a standalone citations section - create citations_without_text
              (let ((citations (greger-tree-sitter--extract-citations-section section)))
                (setq current-assistant-blocks
                      (append current-assistant-blocks
                              `(((type . "citations_without_text") (entries . ,citations)))))))))

         ;; Tool result section - add as user message
         ((equal section-type "tool_result_section")
          (when current-assistant-blocks
            (let ((assistant-content (greger-tree-sitter--finalize-assistant-content current-assistant-blocks)))
              (push `((role . "assistant") (content . ,assistant-content)) messages))
            (setq current-assistant-blocks '()))
          (let ((message (greger-tree-sitter--extract-section section)))
            (when message (push message messages))))))

      (setq i (1+ i)))

    ;; Flush any remaining assistant blocks
    (when current-assistant-blocks
      (let ((assistant-content (greger-tree-sitter--finalize-assistant-content current-assistant-blocks)))
        (push `((role . "assistant") (content . ,assistant-content)) messages)))

    (nreverse messages)))

(defun greger-tree-sitter--find-next-citations-section (sections start-idx)
  "Find the next citations section starting from START-IDX in SECTIONS.

Returns the index of the citations section, or nil if not found."
  (let ((i start-idx)
        (found nil))
    (while (and (< i (length sections)) (not found))
      (let ((section-type (greger-tree-sitter--get-section-type (nth i sections))))
        (if (equal section-type "citations_section")
            (setq found i)
          (setq i (1+ i)))))
    found))

(defun greger-tree-sitter--section-has-cite-tags (section)
  "Check if SECTION contains cite tags in its content."
  (let ((section-type (greger-tree-sitter--get-section-type section)))
    (when (member section-type '("assistant_section" "thinking_section"))
      (let ((message (greger-tree-sitter--extract-section section)))
        (when message
          (let ((content (alist-get 'content message)))
            (and (stringp content) (string-match-p "<cite>" content))))))))

(defun greger-tree-sitter--extract-citations-with-text-blocks (content)
  "Extract content blocks from CONTENT that contains cite tags.

Creates structured blocks according to citations_with_text format."
  (greger-tree-sitter--parse-content-with-citations content nil))

(defun greger-tree-sitter--create-citations-with-text-blocks (content citations)
  "Create citations_with_text blocks from CONTENT with cite tags and CITATIONS.

This implements your requirement: when <cite>...</cite> is encountered,
create a citations_with_text object with 'text field containing the cited text
and 'entries field containing the citation entries."
  (let ((parts '())
        (current-pos 0))

    ;; Find all cite tags and split content accordingly
    (while (string-match "<cite>\\(.*?\\)</cite>" content current-pos)
      (let ((before-cite (substring content current-pos (match-beginning 0)))
            (cite-text (match-string 1 content))
            (after-match (match-end 0)))

        ;; Add text before cite if any (as regular text block)
        (when (> (length (string-trim before-cite)) 0)
          (push `((type . "text") (text . ,(string-trim before-cite))) parts))

        ;; Add citations_with_text block
        (push `((type . "citations_with_text")
                (text . ,cite-text)
                (entries . ,citations)) parts)

        (setq current-pos after-match)))

    ;; Add remaining text after last cite (as regular text block)
    (let ((remaining (substring content current-pos)))
      (when (> (length (string-trim remaining)) 0)
        (push `((type . "text") (text . ,(string-trim remaining))) parts)))

    (nreverse parts)))

(defun greger-tree-sitter--get-section-type (section-node)
  "Get the type of a SECTION-NODE.

INPUT:
  SECTION-NODE - A tree-sitter section node

PROCESSING:
  Gets the type of the first child node, which indicates what kind of
  section this is (user_section, assistant_section, citations_section, etc.)

OUTPUT:
  Returns a string representing the section type:
  - \"user_section\" for ## USER: sections
  - \"assistant_section\" for ## ASSISTANT: sections
  - \"system_section\" for ## SYSTEM: sections
  - \"thinking_section\" for ## THINKING: sections
  - \"tool_use_section\" for ## TOOL USE: sections
  - \"tool_result_section\" for ## TOOL RESULT: sections
  - \"server_tool_use_section\" for ## SERVER TOOL USE: sections
  - \"server_tool_result_section\" for ## SERVER TOOL RESULT: sections
  - \"citations_section\" for ## CITATIONS: sections

INTERNAL FUNCTION: Used by section processing logic to dispatch to
appropriate extraction functions."
  (treesit-node-type (treesit-node-child section-node 0)))

(defun greger-tree-sitter--associate-citations-with-blocks (content-blocks citations)
  "Associate CITATIONS with content blocks that contain <cite> tags.

INPUT:
  CONTENT-BLOCKS - List of content block objects (from assistant message)
  CITATIONS - List of citation objects extracted from ## CITATIONS: section

PROCESSING:
  1. Iterates through content blocks
  2. For text blocks containing <cite> tags:
     - Parses the text to split by citation boundaries
     - Associates citations with the cited text portions
     - Replaces the single block with multiple parsed blocks
  3. For other blocks (no cite tags):
     - Keeps them unchanged

OUTPUT:
  Returns a new list of content blocks where:
  - Text blocks with <cite> tags are split into multiple text blocks
  - Cited text blocks have citations attached
  - Non-cited text blocks and other block types remain unchanged

EXAMPLE INPUT:
  CONTENT-BLOCKS: (((type . \"text\") (text . \"Hello <cite>world</cite>!\")))
  CITATIONS: (((url . \"http://example.com\") ...))

EXAMPLE OUTPUT:
  (((type . \"text\") (text . \"Hello\"))
   ((type . \"text\") (text . \"world\") (citations . citations-list))
   ((type . \"text\") (text . \"!\")))

INTERNAL FUNCTION: Core of the citation association logic that makes
<cite> tags work with subsequent ## CITATIONS: sections."
  (let ((result '()))
    (dolist (block content-blocks)
      (if (and (equal (alist-get 'type block) "text")
               (string-match-p "<cite>" (alist-get 'text block "")))
          ;; This text block has cite tags - parse it with citations
          (let ((parsed-blocks (greger-tree-sitter--parse-content-with-citations
                                (alist-get 'text block) citations)))
            (setq result (append result parsed-blocks)))
        ;; Regular block - add as is
        (setq result (append result (list block)))))
    result))

(defun greger-tree-sitter--extract-citations-section (section-node)
  "Extract citations from a ## CITATIONS: SECTION-NODE.

INPUT:
  SECTION-NODE - Tree-sitter node representing a ## CITATIONS: section

PROCESSING:
  1. Finds the citations_content within the section
  2. Iterates through all citation_entry children
  3. Extracts each citation entry using greger-tree-sitter--extract-citation-entry

OUTPUT:
  Returns a list of citation objects, each with fields:
  - type: \"web_search_result_location\"
  - url: The URL from ### https://... line
  - title: Text after \"Title:\" line
  - cited_text: Text after \"Cited text:\" line
  - encrypted_index: Text after \"Encrypted index:\" line

EXAMPLE INPUT SECTION:
  ## CITATIONS:

  ### https://example.com

  Title: Example Site
  Cited text: This is the relevant text from the source
  Encrypted index: abc123def

EXAMPLE OUTPUT:
  (((type . \"web_search_result_location\")
    (url . \"https://example.com\")
    (title . \"Example Site\")
    (cited_text . \"This is the relevant text from the source\")
    (encrypted_index . \"abc123def\")))

INTERNAL FUNCTION: Used by citation association logic to extract citation
metadata that gets linked to <cite> tags."
  (let* ((citations-section (treesit-node-child section-node 0))
         (citations-content (greger-tree-sitter--find-child-by-type citations-section "citations_content"))
         (citations '()))

    (when citations-content
      (let ((child-count (treesit-node-child-count citations-content)))
        (dotimes (i child-count)
          (let ((child (treesit-node-child citations-content i)))
            (when (equal (treesit-node-type child) "citation_entry")
              (push (greger-tree-sitter--extract-citation-entry child) citations))))))

    (nreverse citations)))

(defun greger-tree-sitter--extract-citation-entry (entry-node)
  "Extract a single citation entry from ENTRY-NODE.

INPUT:
  ENTRY-NODE - Tree-sitter node representing one citation entry (### URL and its fields)

PROCESSING:
  1. Extracts URL from the field name (### https://... line)
  2. Iterates through child nodes to find:
     - citation_title nodes → extracts title after \"Title:\"
     - citation_text nodes → extracts text after \"Cited text:\"
     - citation_index nodes → extracts index after \"Encrypted index:\"
  3. Uses field names when available, falls back to regex extraction
  4. Trims whitespace from all extracted values

OUTPUT:
  Returns a citation object:
  ((type . \"web_search_result_location\")
   (url . \"extracted-url\")
   (title . \"extracted-title\")
   (cited_text . \"extracted-cited-text\")
   (encrypted_index . \"extracted-index\"))

  All fields will be present but may be nil/empty if not found in the input.

EXAMPLE INPUT:
  ### https://example.com

  Title: Example Website
  Cited text: Relevant quote from the website
  Encrypted index: abc123

EXAMPLE OUTPUT:
  ((type . \"web_search_result_location\")
   (url . \"https://example.com\")
   (title . \"Example Website\")
   (cited_text . \"Relevant quote from the website\")
   (encrypted_index . \"abc123\"))

INTERNAL FUNCTION: Used by greger-tree-sitter--extract-citations-section
to process individual citation entries."
  (let ((url-node (treesit-node-child-by-field-name entry-node "url"))
        (title nil)
        (cited-text nil)
        (encrypted-index nil))

    (let ((url (if url-node (treesit-node-text url-node) "")))
      (let ((child-count (treesit-node-child-count entry-node)))
        (dotimes (i child-count)
          (let ((child (treesit-node-child entry-node i)))

            (cond
             ((equal (treesit-node-type child) "citation_title")
              (let ((title-node (treesit-node-child-by-field-name child "title")))

                (if title-node
                    (progn
                      (setq title (string-trim (treesit-node-text title-node)))
                      )
                  ;; Fallback: try to extract from the text after "Title:"
                  (let ((text (treesit-node-text child)))
                    (when (string-match "Title:[ \t]*\\(.*\\)" text)
                      (setq title (string-trim (match-string 1 text)))
                      )))))
             ((equal (treesit-node-type child) "citation_text")
              (let ((text-node (treesit-node-child-by-field-name child "text")))

                (if text-node
                    (progn
                      (setq cited-text (string-trim (treesit-node-text text-node)))
                      )
                  ;; Fallback: try to extract from the text after "Cited text:"
                  (let ((text (treesit-node-text child)))
                    (when (string-match "Cited text:[ \t]*\\(.*\\)" text)
                      (setq cited-text (string-trim (match-string 1 text)))
                      )))))
             ((equal (treesit-node-type child) "citation_index")
              (let ((index-node (treesit-node-child-by-field-name child "index")))

                (if index-node
                    (progn
                      (setq encrypted-index (string-trim (treesit-node-text index-node)))
                      )
                  ;; Fallback: try to extract from the text after "Encrypted index:"
                  (let ((text (treesit-node-text child)))
                    (when (string-match "Encrypted index:[ \t]*\\(.*\\)" text)
                      (setq encrypted-index (string-trim (match-string 1 text)))
                      )))))))))


      `((type . "web_search_result_location")
        (url . ,url)
        (title . ,title)
        (cited_text . ,cited-text)
        (encrypted_index . ,encrypted-index)))))

(defun greger-tree-sitter--message-has-cite-tags (message)
  "Check if MESSAGE content contains <cite> tags.

INPUT:
  MESSAGE - A message object with 'content field

PROCESSING:
  Checks if the content field is a string and contains \"<cite>\" substring.

OUTPUT:
  Returns t if the message content contains cite tags, nil otherwise.

  Note: This function only works with string content, not structured
  content blocks. It's used for simple cite tag detection.

INTERNAL FUNCTION: Utility for determining if a message needs citation
processing. May be used in older/simpler citation workflows."
  (let ((content (alist-get 'content message)))
    (and (stringp content)
         (string-match-p "<cite>" content))))

(defun greger-tree-sitter--associate-citations (message citations)
  "Associate CITATIONS with cited text in MESSAGE (legacy function).

INPUT:
  MESSAGE - A message object with string content containing <cite> tags
  CITATIONS - List of citation objects to associate

PROCESSING:
  1. Checks if content is a string
  2. If so, parses it with greger-tree-sitter--parse-content-with-citations
  3. Replaces the string content with structured content blocks

OUTPUT:
  Returns the modified message with structured content blocks instead
  of string content.

LEGACY FUNCTION: This function provides simple citation association for
messages with string content. The main citation processing now happens
in greger-tree-sitter--process-sections-with-citations which handles
more complex cases with mixed content blocks."
  ;; This is complex - we need to parse the content and split it by cite tags
  (let ((content (alist-get 'content message)))
    (when (stringp content)
      (setf (alist-get 'content message)
            (greger-tree-sitter--parse-content-with-citations content citations))))
  message)

(defun greger-tree-sitter--parse-content-with-citations (content citations)
  "Parse CONTENT string and create content blocks with CITATIONS attached to cited text.

INPUT:
  CONTENT - String containing text with <cite>...</cite> tags
  CITATIONS - List of citation objects to associate with cited text

PROCESSING:
  1. Scans content for <cite>text</cite> patterns using regex matching
  2. Splits content into separate text blocks:
     - Text before citations (if any) → text block without citations
     - Text inside <cite> tags → text block with citations attached
     - Text after citations (if any) → text block without citations
  3. Removes the <cite> tags themselves, keeping only the inner text
  4. Trims whitespace from all text blocks

OUTPUT:
  Returns a list of content block objects:
  (((type . \"text\") (text . \"text before cite\"))
   ((type . \"text\") (text . \"cited text\") (citations . citations-list))
   ((type . \"text\") (text . \"text after cite\")))

  Empty text blocks are filtered out.

EXAMPLE INPUT:
  CONTENT: \"Based on research, <cite>the sky is blue</cite> according to science.\"
  CITATIONS: (((type . \"web_search_result_location\") (url . \"http://example.com\") ...))

EXAMPLE OUTPUT:
  (((type . \"text\") (text . \"Based on research,\"))
   ((type . \"text\") (text . \"the sky is blue\") (citations . citations-list))
   ((type . \"text\") (text . \"according to science.\")))

INTERNAL FUNCTION: Core citation parsing logic used by citation association functions."
  (let ((parts '())
        (current-pos 0))

    ;; Find all cite tags and split content accordingly
    (while (string-match "<cite>\\(.*?\\)</cite>" content current-pos)
      (let ((before-cite (substring content current-pos (match-beginning 0)))
            (cite-text (match-string 1 content))
            (after-match (match-end 0)))

        ;; Add text before cite if any
        (when (> (length (string-trim before-cite)) 0)
          (push `((type . "text") (text . ,(string-trim before-cite))) parts))

        ;; Add cited text with citations
        (push `((type . "text")
                (text . ,cite-text)
                (citations . ,citations)) parts)

        (setq current-pos after-match)))

    ;; Add remaining text after last cite
    (let ((remaining (substring content current-pos)))
      (when (> (length (string-trim remaining)) 0)
        (push `((type . "text") (text . ,(string-trim remaining))) parts)))

    (nreverse parts)))

(defun greger-tree-sitter--extract-content (content-node)
  "Extract plain text content from CONTENT-NODE.

INPUT:
  CONTENT-NODE - Tree-sitter node representing section content

PROCESSING:
  Extracts text from content_line nodes, joining multiple lines with spaces.
  Each content_line contains text tokens that need to be concatenated.

OUTPUT:
  Returns the trimmed text content as a string, or empty string if the
  node is nil.

INTERNAL FUNCTION: Basic utility for extracting text content from
tree-sitter nodes. Used by all section extraction functions to get
the actual text content within sections."
  (if (not content-node)
      ""
    (let ((text-parts '())
          (child-count (treesit-node-child-count content-node)))
      (dotimes (i child-count)
        (let* ((child (treesit-node-child content-node i))
               (child-type (treesit-node-type child)))
          (when (equal child-type "content_line")
            ;; Extract text from content_line children
            (let ((line-text-parts '())
                  (line-child-count (treesit-node-child-count child)))
              (dotimes (j line-child-count)
                (let* ((line-child (treesit-node-child child j))
                       (line-child-type (treesit-node-type line-child)))
                  (cond
                   ((equal line-child-type "text")
                    (push (treesit-node-text line-child) line-text-parts))
                   ((equal line-child-type "cite_tag")
                    ;; For cite tags, preserve the full tag for later processing
                    (push (treesit-node-text line-child) line-text-parts)))))
              (when line-text-parts
                (push (string-join (nreverse line-text-parts) "") text-parts))))))
      (if text-parts
          (string-trim (string-join (nreverse text-parts) " "))
        ""))))

;; Test function
(defun greger-tree-sitter-test ()
  "Test the tree-sitter parser with a simple example.

This interactive function demonstrates basic usage of the greger tree-sitter
parser by parsing a simple conversation and displaying the result.

USAGE:
  M-x greger-tree-sitter-test

OUTPUT:
  Displays the parsed message structure in the *Messages* buffer.

TEST CASE:
  Parses a basic USER/ASSISTANT conversation to verify the parser is
  working correctly."
  (interactive)
  (let ((test-text "## USER:

Hello, how are you?

## ASSISTANT:

Hi there! How can I help you today?"))
    (message "Parsed result: %S" (greger-tree-sitter-parse test-text))))

(provide 'greger-tree-sitter)

;;; greger-tree-sitter.el ends here
</tool.toolu_0123hSx2TcNY2jyKzfAGynCc>

## ASSISTANT:

Now I understand the existing setup. Let me examine the greger.el tree-sitter guide to understand the approach:

## TOOL USE:

Name: read-webpage
ID: toolu_01AhpCBVGpYz7VHR1xw41pjD

### url

<tool.toolu_01AhpCBVGpYz7VHR1xw41pjD>
https://www.jonashietala.se/blog/2024/03/19/lets_create_a_tree-sitter_grammar/
</tool.toolu_01AhpCBVGpYz7VHR1xw41pjD>

## TOOL RESULT:

ID: toolu_01AhpCBVGpYz7VHR1xw41pjD

<tool.toolu_01AhpCBVGpYz7VHR1xw41pjD>
    ~jonashietala.se  Archive  Series  Projects  Contact  About 

   Let's create a Tree-sitter grammar  ★ 
    Published:  
  March 19, 
   2024 
   Revised:  
  January 29,  2025 
 
 in 
 1e17751 
  Tagged:  C ,  Djot ,  Neovim ,  Rust ,  Tree-sitter 
   
  One of my favorite features in Neovim is the Tree-sitter integration.
It allows for fast syntax highlighting that works well even in an error state (often the case when you’re editing code), and it has additional semantics (you can differentiate between function parameters and local variables).
  With  nvim-treesitter-textobjects  you can also jump between nodes (such as  ]c  to jump to next class) or target deletion ( cif  to delete the function body and enter insert mode).
An amazing feature as it works across languages, no matter how they look like, as long as they have a Tree-sitter grammar (most do).
  But, you might wonder what does a Tree-sitter grammar look like,
and how do you create one for a language?
  I started thinking about this and before I knew it I was  trying to make my own parser  for  Djot  (a markup language similar to Markdown).
There are some good tutorials on how to get started, but not on some more advanced things.
  I spent quite some time trying to figure it out—while refreshing my 10 year old knowledge of grammars—and decided to document some of my findings.
  The post spiraled out of control a little, and it will go through:
  
How to use an external scanner

  
Using Tree-sitter’s built-in conflicts resolution

  
Syntax highlighting with language injection

  
Use the grammar from Neovim for syntax highlighting and textobjects

  
Embed the grammar into this Blog for syntax highlighting

 
 The source code for the complete grammar we’ll develop  can be found on GitHub .
  Our subset
  For the purpose of this blog post, we’ll implement a small subset of  Djot , where we’ll support:
  
Paragraphs

  
Divs

  
Code blocks

  
Emphasis

 
 This will allow us to parse markup like this:
  
 This is a 
 multiline  _ paragraph _ 
  
  ::: 
 This is a paragraph inside a div 
  ::: 
 
 ``` gleam 
 let  x  =  2 ; 
 ``` 


  (Yes, the  sdjot  highlight uses our grammar.)
  At first blush, this seems like it’s too simple to require anything more complex than some simple grammar rules, but later on we’ll see that even these simple rules requires a bit more effort to fully support.
  Simple beginnings
  The point of this post isn’t to go through how the Tree-sitter grammar description in  grammar.js  works.
The  Tree-sitter docs  goes through how to get started.
I named the project  sdjot  and this is the  grammar.js  we’ll start with:
  
 module . exports  =  grammar ( { 
   name :  " sdjot " , 
 
  //  Skip carriage returns.

  //  We could skip spaces here as well, but the actual markup language

  //  has significant spaces in some places, so let's remove them here too.

  extras :  ( _ )  = >  [ " \r " ] , 
 
   rules :  { 
  document :  ( $ )  = >  repeat ( $ . _block ) , 
 
  //  All blocks should end with a newline, but we can also parse multiple newlines.

  _block :  ( $ )  = >  choice ( $ . div ,  $ . code_block ,  $ . paragraph ,  " \n " ) , 
 
  //  A div contains other blocks.

  div :  ( $ )  = > 
       prec . left ( seq ( $ . div_marker ,  " \n " ,  repeat ( $ . _block ) ,  $ . div_marker ,  " \n " ) ) , 
  div_marker :  ( _ )  = >  " ::: " , 
 
  //  Code blocks may have a language specifier.

  code_block :  ( $ )  = > 
       seq ( 
         $ . code_block_marker , 
         optional ( $ . language ) , 
  " \n " , 
         optional ( $ . code ) , 
         $ . code_block_marker , 
  ) , 
  code_block_marker :  ( _ )  = >  " ``` " , 
  code :  ( _ )  = >  repeat1 ( seq ( / [ ^ \n ] * /  ,  " \n " ) ) , 
  language :  ( _ )  = >  / [ ^ \s ] + /  , 
 
  //  A paragraph contains inline content and is terminated by a blankline

  //  (two newlines in a row).

  paragraph :  ( $ )  = >  seq ( repeat 1 ( seq ( $ . _inline ,  " \n " ) ) ,  " \n " ) , 
 
  //  The markup parser could separate block and inline parsing into separate steps,

  //  but we'll do everything in one parser.

  _inline :  ( $ )  = >  repeat1 ( choice ( $ . emphasis ,  $ . _text ) ) , 
  emphasis :  ( $ )  = >  prec . left ( seq ( " _ " ,  $ . _inline ,  " _ " ) ) , 
  _text :  ( _ )  = >  / [ ^ \n ] /  , 
  } , 
 } ) ; 


  It recognizes paragraphs with text and emphasis, and it identifies divs and code blocks.
  We can create an  example-file  with these contents:
  
 ::: 
 A paragraph  _ with emphasis _  inside a div 
  
  ::: 


  And parse it with the  tree-sitter  cli:
  
 $  tree-sitter  parse example-file

 (document [0, 0] - [5, 0]

   (div [0, 0] - [4, 0]

     (div_marker [0, 0] - [0, 3])

     (paragraph [1, 0] - [3, 0]

       (emphasis [1, 12] - [1, 27]))

     (div_marker [3, 0] - [3, 3])))



  Et voilà!
  Missing features
  But I told you it wasn’t supposed to be this easy, and there are features missing from our parser.
Most notably:
  
There can be an arbitrary number of  : , allowing divs to be nested.

  
Closing a div should close other open blocks (divs and paragraphs in our case).

 
 In essence, we need to be able to parse this:
  
 ::: 
 Top-level div 
  
  :::: 
 A paragraph inside a second div, 
 both closed when the top-level div is closedj 
  ::: 


  This is… Complicated.
  Sure, we can work around the varying levels of  :  with something hacky like enumerating the number of colons, using something like this:
  
 div :  ( $ )  = >  choice ( $ . _div3 ,  $ . _div4 ,  $ . _div5 ,  $ . _div6 ,  $ . _div7 ,  $ . _div8 ) , 
 _div3 :  ( $ )  = >  seq ( / : {3} /  ,  $ . _inside_div ,  / : {3} /  ,  " \n " ) , 
 _div4 :  ( $ )  = >  seq ( / : {4} /  ,  $ . _inside_div ,  / : {4} /  ,  " \n " ) , 
 _div5 :  ( $ )  = >  seq ( / : {5} /  ,  $ . _inside_div ,  / : {5} /  ,  " \n " ) , 
 _div6 :  ( $ )  = >  seq ( / : {6} /  ,  $ . _inside_div ,  / : {6} /  ,  " \n " ) , 
 _div7 :  ( $ )  = >  seq ( / : {7} /  ,  $ . _inside_div ,  / : {7} /  ,  " \n " ) , 
 _div8 :  ( $ )  = >  seq ( / : {8} /  ,  $ . _inside_div ,  / : {8} /  ,  " \n " ) , 
 _inside_div :  ( $ )  = >  prec . left ( " \n " ,  repeat ( $ . _block ) ) , 


  But it’s not  neat , and automatically closing contained blocks is much harder (to my brain it seems impossible, but I’m no expert).
  With an external scanner we can do this (and more).
  External scanner
  A Tree-sitter parser is actually a C program.
The grammar we’ve seen has been described in JavaScript, but it’s only used as a description to generate the parser in C.
If you’re a masochist, you can take a look at it in  src/parser.c  after running  tree-sitter generate .
  An external scanner is just some custom C code that’s inserted into the parser, and it allows us to override the parser precedence, keep track of a context state, or whatever else we might need or want to do.
  To get started the  official docs  was pretty good.
Basically you need to:
  
Create a  src/scanner.c  and include it in  binding.gyp  bindings/rust/build.rs .

  
Setup  externals  tokens in  grammar.js  and a matching C enum in  scanner.c .

  
Define and implement five C functions.

 
 Let’s take a look.
  Div markers closes open paragraphs
  Let’s start by closing a paragraph early when a  :::  is encountered.
This is simpler because we can solve this without storing any state.
  When parsing  $.paragraph  we’ll give the parser a choice between ending the paragraph on a newline or on our new  $._close_paragraph  token:
  
 paragraph :  ( $ )  = > 
   seq ( repeat 1 ( seq ( $ . _inline ,  " \n " ) ) ,  choice ( " \n " ,  $ . _close_paragraph ) ) , 


  $._close_paragraph  is handled by the external scanner, which is specified using the  externals  field:
  
 externals :  ( $ )  = >  [ $ . _close_paragraph ] , 


  Now let’s turn our attention to  src/scanner.c .
The tokens in  externals  gets assigned an incremented number, starting from 0…
Just like an enum in C!
  
 //  We only have a single element right now, but keep in mind that the order

 //  must match the `externals` array in `grammar.js`.

 typedef  enum  {  CLOSE_PARAGRAPH  }  TokenType ; 


  The five functions we need to implement are these:
  
 //  You should replace `sdjot` with whatever project name you chose.

 bool  tree_sitter_sdjot_external_scanner_scan ( void  * payload ,  TSLexer  * lexer , 
  const  bool  * valid_symbols )  { 
  //  All the scanning goes here.

  return  false ; 
 } 
 
 //  If we need to allocate/deallocate state, we do it in these functions.

 void  * tree_sitter_sdjot_external_scanner_create ( )  {  return  NULL ;  } 
 void  tree_sitter_sdjot_external_scanner_destroy ( void  * payload )  {  } 
 
 //  If we have state, we should load and save it in these functions.

 unsigned  tree_sitter_sdjot_external_scanner_serialize ( void  * payload , 
  char  * buffer )  { 
  return  0 ; 
 } 
 void  tree_sitter_sdjot_external_scanner_deserialize ( void  * payload ,  char  * buffer , 
  unsigned  length )  {  } 


  Because we won’t use any state, we’ll only have to update the  scan  function.
  What you’re supposed to do is check  valid_symbols  for the tokens we can return at any point in time, and return  true  if any was found:
  
 bool  tree_sitter_sdjot_external_scanner_scan ( void  * payload ,  TSLexer  * lexer , 
  const  bool  * valid_symbols )  { 
  if  ( valid_symbols [ CLOSE_PARAGRAPH ]  &&  parse_close_paragraph ( lexer ) )  { 
  return  true ; 
  } 
  return  false ; 
 } 


  To decide if we’re going to close the paragraph early, we’ll look ahead for any  ::: , and if so we’ll close it without consuming any characters.
This might not be the most efficient solution because we’ll have to parse the  :::  again, but it gets the job done.
  The matched token should be stored in 
 lexer -> result_symbol :
  
 static  bool  parse_close_paragraph ( TSLexer  * lexer )  { 
  //  Mark the end before advancing so that the CLOSE_PARAGRAPH token doesn't

  //  consume any characters.

   lexer -> mark_end ( lexer ) ; 
 
  uint8_t  colons  =  consume_chars ( lexer ,  ' : ' ) ; 
  if  ( colons  >=  3 )  { 
     lexer -> result_symbol  =  CLOSE_PARAGRAPH ; 
  return  true ; 
  }  else  { 
  return  false ; 
  } 
 } 


  Note that the resulting token will mark any symbol we advance over as owned by that token.
So  :::  would be marked as  _close_paragraph  (which will be ignored by the output since it begins with an underscore), instead of  div_marker .
To prevent this, we turn  _close_paragraph  into a zero-width token by marking the end before advancing the lexer.
  How do we advance the lexer?
We call 
 lexer -> advance :
  
 static  uint8_t  consume_chars ( TSLexer  * lexer ,  char  c )  { 
  uint8_t  count  =  0 ; 
  while  ( lexer -> lookahead  ==  c )  { 
     lexer -> advance ( lexer ,  false ) ; 
  + + count ; 
  } 
  return  count ; 
 } 


  This is almost all we can do with the lexer.
We only process one character at a time, cannot look behind, and our only tool to look ahead is to  mark_end  at the correct place.
(We can also query the current column position.)
  With this we have a working external scanner and div tags now close paragraphs:
  
 ::: 
 A paragraph inside a div 
  ::: 


  
 $  tree-sitter  parse example-file

 (document [0, 0] - [4, 0]

   (div [0, 0] - [3, 0]

     (div_marker [0, 0] - [0, 3])

     (paragraph [1, 0] - [2, 0])

     (div_marker [2, 0] - [2, 3])))



  Nested blocks
  To automatically close other open blocks we need to add some context to our parser, which means we’ll need state management.
  The small subset we’re implementing is only concerned with closing divs—because it would be a terribly long post otherwise—but I’ll try to implement this in a general manner, to be more indicative of a real-world parser.
  Our strategy is this:
   A div can have a varying number of  :  that must match.
  Therefore we’ll parse colons in an external scanner and store it on a stack.
 
   When we find a div marker, we’ll need to decide if it should start a new div, or close an existing one.
  We’ll look at the stack of open blocks and see if we find a match.
 
   If we have need to close a nested div, that is if we want to close a div further down the stack, we need to close the nested div(s) first.
  Thus we’ll introduce a  block_close  marker that ends a div, and leave the ending div marker as optional.
 
 
 First we’ll ask the grammar to let the external scanner manage the begin and end tokens.
We’ll use a  _block_close  marker to end the div, and leave the end marker optional.
(You could probably use a  choice()  between the two, but this made more sense to me when I was implementing it.)
  
 div :  ( $ )  = > 
   prec . left ( 
     seq ( 
  //  A rule starting with "_" will be hidden in the output,

  //  and we can use "alias" to rename rules.

       alias ( $ . _div_marker_begin ,  $ . div_marker ) , 
  " \n " , 
       repeat ( $ . _block ) , 
       $ . _block_close , 
       optional ( alias ( $ . _div_marker_end ,  $ . div_marker ) ) 
  ) 
  ) , 
 
 externals :  ( $ )  = >  [ 
   $ . _close_paragraph , 
   $ . _block_close , 
   $ . _div_marker_begin , 
   $ . _div_marker_end , 
 
  //  This is used in the scanner internally,

  //  but shouldn't be used by the grammar.

   $ . _ignored , 
 ] , 


  And remember to update the list of external tokens in the scanner (order matters):
  
 typedef  enum  { 
   CLOSE_PARAGRAPH , 
   BLOCK_CLOSE , 
   DIV_MARKER_BEGIN , 
   DIV_MARKER_END , 
   IGNORED

 }  TokenType ; 


  Then to our stack of blocks.
  I used a  Block  type to keep track of the type and number of colons:
  
 //  In a real implementation we'll have more block types.

 typedef  enum  {  DIV  }  BlockType ; 
 
 typedef  struct  { 
   BlockType type ; 
  uint8_t  level ; 
 }  Block ; 


  I know that  level  isn’t the best name, but I couldn’t find a very good general name for the number of colons, indentation level, etc.
With sum types you could model it in a clearer way, like this:
  
 enum  Block  { 
     Div  {  colons :  u32  } , 
     Footnote  {  indent :  u32  } , 
  //  etc

 } 


   I will, in fact, claim that the difference between a bad programmer and a good one
is whether he considers his code or his data structures more important.
Bad programmers worry about the code.
Good programmers worry about data structures and their relationships.

    But I digress, I’ll go with  level  like a bad programmer.
  Another joy of programming C is that you’ll get to re-implement standard data structures such as a growable stack.
It’s not truly difficult, but it’s annoying and bug-prone.
  Luckily, during the time I’m writing this blog post,  tree-sitter 0.22.1  was released with an array implementation.
So now I don’t have to show you my shoddy stack implementation, and we can use their array for our stack instead.
  We’ll shove our  Array  of  Block*  into a  Scanner  struct, because we’ll need to track more data later:
  
 #include  " tree_sitter/array.h " 
 
 typedef  struct  { 
  Array ( Block  * )  *  open_blocks ; 
 }  Scanner ; 


  When you manage state in tree-sitter, you need to do some data management in the  tree_sitter_  functions we defined earlier.
  Allocations are managed in the  _create  and  _destroy  functions.
Also new for 0.22.1 is the recommendation to use  ts_  functions for allocations, to allow consumers to override the default allocator:
  
 #include  " tree_sitter/alloc.h " 
 
 void  * tree_sitter_sdjot_external_scanner_create ( )  { 
   Scanner  * s  =  ( Scanner  * ) ts_malloc ( sizeof ( Scanner ) ) ; 
 
  //  This is how you create an empty array

   s -> open_blocks  =  ts_malloc ( sizeof ( Array ( Block  * ) ) ) ; 
  array_init ( s -> open_blocks ) ; 
 
  return  s ; 
 } 
 
 void  tree_sitter_sdjot_external_scanner_destroy ( void  * payload )  { 
   Scanner  * s  =  ( Scanner  * ) payload ; 
 
  //  I haven't shown the allocation of the blocks yet,

  //  but keep in mind that `array_delete` does not deallocate any memory

  //  you store in the array itself.

  for  ( size_t  i  =  0 ;  i  <  s -> open_blocks -> size ;  + + i )  { 
  //  I use `array_get` even though you can index the contents directly.

  ts_free ( array_get ( s -> open_blocks ,  i ) ) ; 
  } 
 
  //  The array is a growable one, `array_delete` ensures that the

  //  memory is deleted.

  array_delete ( s -> open_blocks ) ; 
 
  ts_free ( s ) ; 
 } 


  I allocate the blocks in a  push_block  helper:
  
 static  void  push_block ( Scanner  * s ,  BlockType  type ,  uint8_t  level )  { 
   Block  * b  =  ts_malloc ( sizeof ( Block ) ) ; 
   b -> type  =  type ; 
   b -> level  =  level ; 
 
  //  Grows the stack automatically.

  array_push ( s -> open_blocks ,  b ) ; 
 } 


  You also need to define the serialize functions.
These store and retrieve the managed state, to allow tree-sitter to backtrack.
  
 unsigned  tree_sitter_sdjot_external_scanner_serialize ( void  * payload , 
  char  * buffer )  { 
   Scanner  * s  =  ( Scanner  * ) payload ; 
  unsigned  size  =  0 ; 
  for  ( size_t  i  =  0 ;  i  <  s -> open_blocks -> size ;  + + i )  { 
     Block  * b  =  * array_get ( s -> open_blocks ,  i ) ; 
     buffer [ size + + ]  =  ( char ) b -> type ; 
     buffer [ size + + ]  =  ( char ) b -> level ; 
  } 
  return  size ; 
 } 
 
 void  tree_sitter_sdjot_external_scanner_deserialize ( void  * payload ,  char  * buffer , 
  unsigned  length )  { 
   Scanner  * s  =  ( Scanner  * ) payload ; 
  array_init ( s -> open_blocks ) ; 
  size_t  size  =  0 ; 
  while  ( size  <  length )  { 
     BlockType type  =  ( BlockType ) buffer [ size + + ] ; 
  uint8_t  level  =  ( uint8_t ) buffer [ size + + ] ; 
  push_block ( s ,  type ,  level ) ; 
  } 
 } 


  And that’s the (initial) state management taken care of!
  C is scary.
Try  valgrind .
  Div markers
  Of course, we haven’t used our state yet.
Let’s change that.
  First, let’s add the  parse_div  entry point to our scan function:
  
 bool  tree_sitter_sdjot_external_scanner_scan ( void  * payload ,  TSLexer  * lexer , 
  const  bool  * valid_symbols )  { 
   Scanner  * s  =  ( Scanner  * ) payload ; 
 
  //  Paragraph needs to be closed before we try to close divs.

  if  ( valid_symbols [ CLOSE_PARAGRAPH ]  &&  parse_close_paragraph ( lexer ) )  { 
  return  true ; 
  } 
 
  //  Check `valid_symbols` inside `parse_div` because of multiple valid symbols.

  if  ( parse_div ( s ,  lexer ,  valid_symbols ) )  { 
  return  true ; 
  } 
 
  return  false ; 
 } 


  Because advancing the lexer is primitive, and we cannot “go back a char”, it’s important to only advance it if we really need to.
Therefore we always need to check  valid_symbols  before we continue:
  
 static  bool  parse_div ( Scanner  * s ,  TSLexer  * lexer ,  const  bool  * valid_symbols )  { 
  if  ( ! valid_symbols [ DIV_MARKER_BEGIN ]  &&  ! valid_symbols [ DIV_MARKER_END ] )  { 
  return  false ; 
  } 
 
  //  ...

 } 


  Next we’ll need to consume all colons we’re at, and only continue if we see at least three:
  
 static  uint8_t  consume_chars ( TSLexer  * lexer ,  char  c )  { 
  uint8_t  count  =  0 ; 
  while  ( lexer -> lookahead  ==  c )  { 
     lexer -> advance ( lexer ,  false ) ; 
  + + count ; 
  } 
  return  count ; 
 } 
 
 static  bool  parse_div ( Scanner  * s ,  TSLexer  * lexer ,  const  bool  * valid_symbols )  { 
  //  ...

 
  uint8_t  colons  =  consume_chars ( lexer ,  ' : ' ) ; 
  if  ( colons  <  3 )  { 
  return  false ; 
  } 
 
  //  ...

 } 


  Opening a new div is simple; we push the block and register the number of colons:
  
 push_block ( s ,  DIV ,  colons ) ; 
 lexer -> result_symbol  =  DIV_MARKER_BEGIN ; 
 return  true ; 


  But to the decide if we should open or close a div, we need a way to search through the stack.
This function does that, while also returning how many blocks deep into the stack we found the div (which we’ll use shortly):
  
 //  How many blocks from the top of the stack can we find a matching block?

 //  If it's directly on the top, returns 1.

 //  If it cannot be found, returns 0.

 static  size_t  number_of_blocks_from_top ( Scanner  * s ,  BlockType  type , 
  uint8_t  level )  { 
  for  ( int  i  =  s -> open_blocks -> size  -  1 ;  i  >=  0 ;  - - i )  { 
     Block  * b  =  * array_get ( s -> open_blocks ,  i ) ; 
  if  ( b -> type  ==  type  &&  b -> level  ==  level )  { 
  return  s -> open_blocks -> size  -  i ; 
  } 
  } 
  return  0 ; 
 } 
 
 static  bool  parse_div ( Scanner  * s ,  TSLexer  * lexer ,  const  bool  * valid_symbols )  { 
  //  ...

 
  size_t  from_top  =  number_of_blocks_from_top ( s ,  DIV ,  colons ) ; 
 
  //  We could check if either DIV_MARKER_BEGIN or DIV_MARKER_END are valid here,

  //  but as the grammar is set up they're both always valid at the same time.

  if  ( from_top  >  0 )  { 
  //  Close the current div, and all blocks above.

  }  else  { 
  //  No matching div to close, let's open one.

     lexer -> mark_end ( lexer ) ; 
  push_block ( s ,  DIV ,  colons ) ; 
     lexer -> result_symbol  =  DIV_MARKER_BEGIN ; 
  return  true ; 
  } 
 } 


  But we have a problem: when we want to close the div, we want to be able to output multiple tokens.
  For example, with this type of input:
  
 ::: 
 ::::: 
 ::::::: 
 text 
  ::: 


  We’ll have a stack of 3 divs when we see the closing  :::  marker:
  7 (top)

 5

 3 (the one we want to close)



  In the code above,  from_top  will be  3  and we need to output 4 tokens: 3  BLOCK_CLOSE  (one for each div) and 1  DIV_MARKER_END  (for the last  ::: ).
But the scanner can only output a single token at a time.
  The way I solved this is by introducing more state to the Scanner.
Specifically, I introduced a  blocks_to_close  variable that we’ll use to output  BLOCK_CLOSE , and some variables to output (and consume) the  DIV_MARKER_END .
  
 typedef  struct  { 
  Array ( Block  * )  *  open_blocks ; 
 
  //  How many BLOCK_CLOSE we should output right now?

  uint8_t  blocks_to_close ; 
 
  //  Delayed output of a token.

   TokenType delayed_token ; 
  //  Allows us to consume the width of a delayed token.

  uint8_t  delayed_token_width ; 
 }  Scanner ; 


  We need to remember to update the create and serialize functions too.
  Serialize:
  
 buffer [ size + + ]  =  ( char ) s -> blocks_to_close ; 
 buffer [ size + + ]  =  ( char ) s -> delayed_token ; 
 buffer [ size + + ]  =  ( char ) s -> delayed_token_width ; 


  Deserialize:
  
 s -> blocks_to_close  =  ( uint8_t ) buffer [ size + + ] ; 
 s -> delayed_token  =  ( TokenType ) buffer [ size + + ] ; 
 s -> delayed_token_width  =  ( uint8_t ) buffer [ size + + ] ; 


  We’ll use  IGNORED  as the unused token, so we’ll need to reset it when we create the scanner:
  
 s -> blocks_to_close  =  0 ; 
 s -> delayed_token  =  IGNORED ; 


  Now when we scan we should first check  blocks_to_close  and then  delayed_token , before we scan other things:
  
 bool  tree_sitter_sdjot_external_scanner_scan ( void  * payload ,  TSLexer  * lexer , 
  const  bool  * valid_symbols )  { 
   Scanner  * s  =  ( Scanner  * ) payload ; 
 
  if  ( valid_symbols [ BLOCK_CLOSE ]  &&  handle_blocks_to_close ( s ,  lexer ) )  { 
  return  true ; 
  } 
 
  if  ( output_delayed_token ( s ,  lexer ,  valid_symbols ) )  { 
  return  true ; 
  } 
 
  //  Scan the other stuff

 } 


  When we see  blocks_to_close > 0 , we should output a  BLOCK_CLOSE  and remove the top block (with some sanity checks for good measure):
  
 static  void  remove_block ( Scanner  * s )  { 
  if  ( s -> open_blocks -> size  >  0 )  { 
  ts_free ( array_pop ( s -> open_blocks ) ) ; 
  if  ( s -> blocks_to_close  >  0 )  { 
  - - s -> blocks_to_close ; 
  } 
  } 
 } 
 
 static  bool  handle_blocks_to_close ( Scanner  * s ,  TSLexer  * lexer )  { 
  if  ( s -> open_blocks -> size  ==  0 )  { 
  return  false ; 
  } 
 
  //  If we reach eof with open blocks, we should close them all.

  if  ( lexer -> eof ( lexer )  ||  s -> blocks_to_close  >  0 )  { 
     lexer -> result_symbol  =  BLOCK_CLOSE ; 
  remove_block ( s ) ; 
  return  true ; 
  } 
  return  false ; 
 } 


  With this we can output multiple  BLOCK_CLOSE , and now to handle delayed tokens:
  
 static  bool  output_delayed_token ( Scanner  * s ,  TSLexer  * lexer , 
  const  bool  * valid_symbols )  { 
  if  ( s -> delayed_token  ==  IGNORED  ||  ! valid_symbols [ s -> delayed_token ] )  { 
  return  false ; 
  } 
 
   lexer -> result_symbol  =  s -> delayed_token ; 
   s -> delayed_token  =  IGNORED ; 
  //  With `delayed_token_width` we can consume the ending `:::`, for example.

  while  ( s -> delayed_token_width - - )  { 
     lexer -> advance ( lexer ,  false ) ; 
  } 
   lexer -> mark_end ( lexer ) ; 
  return  true ; 
 } 


  Another way to design this is to have a stack of delayed tokens and then just pop that.
It’s certainly more powerful, I just happened to choose this way when I was playing around with it because it’s more explicit and it felt a little easier to follow what was happening.
  Either way, we can now implement the div end handling. In  parse_div :
  
 size_t  from_top  =  number_of_blocks_from_top ( s ,  DIV ,  colons ) ; 
 
 if  ( from_top  >  0 )  { 
  //  Found a div we should close.

  close_blocks_with_final_token ( s ,  lexer ,  from_top ,  DIV_MARKER_END ,  colons ) ; 
  return  true ; 
 }  else  { 
   lexer -> mark_end ( lexer ) ; 
  push_block ( s ,  DIV ,  colons ) ; 
   lexer -> result_symbol  =  DIV_MARKER_BEGIN ; 
  return  true ; 
 } 


  close_blocks_with_final_token  is a general helper that sets up the number of blocks to close and the final token:
  
 static  void  close_blocks_with_final_token ( Scanner  * s ,  TSLexer  * lexer , 
  size_t  count ,  TokenType  final , 
  uint8_t  final_token_width )  { 
  remove_block ( s ) ; 
   s -> blocks_to_close  =  s -> blocks_to_close  +  count  -  1 ; 
   lexer -> result_symbol  =  BLOCK_CLOSE ; 
   s -> delayed_token  =  final ; 
   s -> delayed_token_width  =  final_token_width ; 
 } 


  Now we can finally try to close divs:
  
 ::::: 
 ::: 
 ::::::: 
 Divception 
  ::: 


  
 $  tree-sitter  parse example-file

 (document [0, 0] - [6, 0]

   (div [0, 0] - [6, 0]

     (div_marker [0, 0] - [0, 5])

     (div [1, 0] - [4, 3]

       (div_marker [1, 0] - [1, 3])

       (div [2, 0] - [4, 0]

         (div_marker [2, 0] - [2, 7])

         (paragraph [3, 0] - [4, 0]))

       (div_marker [4, 0] - [4, 3]))))



  We can see that it parses without error, the last marker closes the  second  div correctly, and the last marker captures the final  ::: .
  While I’m jumping to a working implementation directly in this post, when I first did this that was of course not the case.
I found the  -d  argument useful to see what characters are consumed and what token is output in each step.
  Here’s a part of the output (when scanning the final  ::: ), with some comments to point out some interesting things:
  
 $  tree-sitter  parse example-file -d

 ...

 process version:0, version_count:1, state:34, row:4, col:0

 lex_external state:4, row:4, column:0

   consume character:':'                         // Scan `:::`

   consume character:':'

   consume character:':'

 lexed_lookahead sym:_close_paragraph, size:0    // Output _close_paragraph

 reduce sym:paragraph_repeat1, child_count:2

 shift state:17

 process version:0, version_count:1, state:17, row:4, col:0

 lex_external state:3, row:4, column:0           // Still on first `:`

   consume character:':'                         // Scan `:::` again

   consume character:':'

   consume character:':'

 lexed_lookahead sym:_block_close, size:0        // Close div with _block_close

 reduce sym:paragraph, child_count:2

 shift state:12

 process version:0, version_count:1, state:12, row:4, col:0

 lex_external state:5, row:4, column:0           // Still on first `:`

 lexed_lookahead sym:_block_close, size:0        // Close second div with _block_close

 reduce sym:div, child_count:4

 shift state:12

 process version:0, version_count:1, state:12, row:4, col:0

 lex_external state:5, row:4, column:0           // Still on first `:`

   consume character:':'                         // Consume `:::`

   consume character:':'

   consume character:':'

 lexed_lookahead sym:div_marker, size:3          // div_marker is size 3, marks `:::`

 shift state:23



  While the output seems confusing, when you know what to look for it’s very useful.
I’ve found that a deliberate process, where I look at a single character at a time, helps me get through the problems I’ve encountered so far.
  Handling conflicts
  Our grammar works pretty well, but there are issues you might want to fix.
One issue, that took much longer to figure out than I care to admit, is adding a fallback to text when a markup rule doesn’t match.
  A simple example for our grammar is a single underscore in a paragraph:
  
 a_b 
  


  I’d assume this would produce a paragraph with text, but instead we get an error:
  
 $  tree-sitter  parse example-file

 (document [0, 0] - [2, 0]

   (ERROR [0, 0] - [0, 3]))



  This is weird, because one of the main selling points of Tree-sitter is the GLR algorithm, which should explore the different interpretations to find something that succeeds.
But for some reason, it doesn’t trigger for us.
  Let’s take a look.
These are the relevant lines from the grammar:
  
 _inline :  ( $ )  = >  repeat 1 ( choice ( $ . emphasis ,  $ . _text ) ) , 
 emphasis :  ( $ )  = >  prec . left ( seq ( " _ " ,  $ . _inline ,  " _ " ) ) , 
 _text :  ( _ )  = >  / [ ^ \n ] /  , 


  When we try to match a  _  then the grammar can match either  emphasis  or  _text  because  _  matches both 
 " _ "  and 
 / [ ^ \n ] /  .
The issue seems to be that Tree-sitter doesn’t recognize this as a conflict.
  If we instead add a fallback with a  _  string then Tree-sitter will treat it as a conflict:
  
 _inline :  ( $ )  = >  repeat 1 ( choice ( $ . emphasis ,  $ . _text ,  $ . _fallback ) ) , 
 emphasis :  ( $ )  = >  prec . left ( seq ( " _ " ,  $ . _inline ,  " _ " ) ) , 
 //  prec.dynamic() is used during conflict resolution to choose which

 //  branch to choose if multiple succeed.

 _fallback :  ( _ )  = >  prec . dynamic ( - 100 ,  " _ " ) , 
 _text :  ( _ )  = >  / [ ^ \n ] /  , 


  And when we call  tree-sitter generate  we’re made aware of the conflict:
  
 $  tree-sitter  generate

 Unresolved conflict for symbol sequence:

 
   '_'  •  '_'  …

 
 Possible interpretations:

 
   1:  (_fallback  '_')  •  '_'  …

   2:  (emphasis  '_'  •  _inline  '_')  (precedence: 0, associativity: Left)

 
 Possible resolutions:

 
   1:  Specify a higher precedence in `emphasis` than in the other rules.

   2:  Specify a higher precedence in `_fallback` than in the other rules.

   3:  Specify a left or right associativity in `_fallback`

   4:  Add a conflict for these rules: `emphasis`, `_fallback`



  What we want to do is mark them as a conflict that’s supposed to exist in the grammar using the  conflicts  field:
  
 conflicts :  ( $ )  = >  [ [ $ . emphasis ,  $ . _fallback ] ] , 


  And now we can parse paragraphs containing only a single  _  without errors.
  So it seems like Tree-Sitter doesn’t recognize a conflict between a string and a regex.
Another gotcha is that it doesn’t seem like you can trigger the GLR algorithm with a token returned by an external scanner, because the external scanner overrules Tree-sitter’s lexing behavior.
  Some tests
  Using  tree-sitter parse example-file  (with or without the  -d  or  -D  flags, try them if you haven’t) is fine for experimental tests, but we really should add the different test cases as proper unit tests.
Tree-sitter has a built-in test harness for this purpose.
  Let’s add the very first test case to  test/corpus/syntax.txt :
  ===============================================================================

 Parsing goal

 ===============================================================================

 This is a

 multiline _paragraph_

 
 :::

 This is a paragraph inside a div

 :::

 
 ```gleam

 let x = 2;

 ```

 
 -------------------------------------------------------------------------------

 
 (document

   (paragraph (emphasis))

   (div

     (div_marker)

     (paragraph)

     (div_marker))

   (code_block

     (code_block_marker)

     (language)

     (code)

     (code_block_marker)))



  And run it:
  $ tree-sitter test

   syntax:

     ✓ Parsing goal



  Yay!
  We should add (a lot) more tests here, but I won’t bother writing them out in this already too long blog post.
  Using tree-sitter for something useful
  I like a theoretical excursion as much as the next nerd, but I started looking at Tree-sitter because I wanted to  do  something with the Grammar, not just play around with it all day.
Let’s end the post by seeing some things we can use it for.
  Syntax highlighting
  Syntax highlighting is made using queries from the  highlights.scm  file.
It’s common to have it placed in the  src  directory in the same repository as the grammar, but it’s not required.
  Here’s an example  src/highlights.scm  file that highlights the different elements of our markup:
  
 ( div_marker )  @ punctuation.delimiter 
 ( code_block_marker )  @ punctuation.delimiter 
 
 ( emphasis  "_"  @ punctuation.delimiter )  @ markup.italic 
 ( language )  @ tag.attribute 
 
 ( code_block )  @ markup.raw 
 ( paragraph )  @ markup 


  What colors to choose is a bit arbitrary, these works well enough I suppose.
  See the  documentation  for more details on how the queries and highlighting works.
  Language injection
  One big question I had when starting writing my grammar was how to mix multiple parsers in the same document, to for example highlight code blocks using the specified language:
  
 ``` gleam 
 let  x  =  2 ; 
 ``` 


  Turns out, this is quite straightforward.
  With the initial grammar, the code block parses into:
  (code_block

   (code_block_marker)

   (language)

   (code)

   (code_block_marker)))



  Which we’ll use in  src/injections.scm  to specify that we want to parse  (code)  using the grammar specified in  (language) :
  
 ( code_block 
  ( language )  @ injection.language 
  ( code )  @ injection.content ) 


  When we’ll embed the grammar into a program with highlighting support, it will delegate the text inside the code block to the injected language.
  Using our grammar with Neovim
   I typically install Tree-sitter grammars in Neovim using  :TSInstall  provided by  nvim-treesitter .
But you can  install local Tree-sitter grammars  as well:
  
 local  parser_config  =  require ( " nvim-treesitter.parsers " ).get_parser_configs()

 parser_config.sdjot  =  {

     install_info  =  {

  --  Change this url to your grammar

         url  =  " ~/code/tree-sitter-sdjot " ,

  --  If you use an external scanner it needs to be included here

         files  =  {  " src/parser.c " ,  " src/scanner.c "  },

         generate_reqires_npm  =  false ,

         requires_generate_from_grammar  =  false ,

     },

  --  The filetype you want it registered as

     filetype  =  " sdjot " ,

 }



  Just make sure you have a  "tree-sitter"  section in the grammar’s  package.json :
  
 " tree-sitter " :  [ 
  { 
  " scope " :  " source.sdjot " , 
  " file-types " :  [ 
  " sdj " 
  ] , 
  " injection-regex " :  " sdjot " , 
  " highlights " :  [ 
  " queries/highlights.scm " 
  ] 
  } 
 ] ,



  With this you can do  :TSInstall sjdot  and  :TSUpdate sdjot  when you make changes.
  :TSInstall  doesn’t install queries automatically though.
What I did was symlink the queries directory into Neovims config directory:
  
 ln  -s ~/code/tree-sitter-sdjot/queries ~/.config/nvim/queries/sdjot



  :TSPlaygroundToggle  is very useful for debugging the grammar, and  :Inspect  shows you the highlight groups under your cursor.
It might be good to check out  :help treesitter-highlight-groups  if you want to play with your theme, as the theme needs to support the highlight groups we use for coloring to appear.
  You also need to have the Tree-sitter grammar for the injected language installed, if you want to highlight the contents of code blocks.
  Jumping and selecting with textobjects
  I mentioned  nvim-treesitter-textobjects  as a good example of why Tree-sitter is about more than syntax highlighting.
  To make use of our grammar we can add some capture groups to  src/textobjects.scm .
For example we can register our code blocks as “functions”:
  
 ( code_block  ( code )  @ function.inner )  @ function.outer 


  The objects are arbitrary, but  @function  is one of the standard objects so I guess it might make sense.
  With the symlink ready, you need to register keymaps with  nvim-treesitter-textobjects  and you’re good to go.
I have it setup so I can jump between  @function.outer  with  [f  and  ]f , and selections with  af  and  if .
  This means that with the above textobject definition I can for example jump to the next code block with  ]f  and then remove all the code inside with  cif  to end up in insert mode, ready to replace it with some new code.
  Although this example is a bit arbitrary, this general functionality is  extremely  useful for programming languages.
For a markup language like  Djot , jumping between headings might be a more relevant use-case.
  Embedding the grammar with Rust
  One of the selling points of Tree-sitter is that you should be able to embed it in any application.
Such as this blog!
  I’ve been wanting to add Tree-sitter powered highlighting to my blog for a while, and now I have an excuse to do just that.
  This blog is a static site generator written in Rust, and  tree-sitter-highlight  looks like a suitable library to try.
Let’s add it to our  Cargo.toml :
  
 [ dependencies ] 
 tree-sitter-highlight  =  "^0.20.0" 
 tree-sitter-sdjot  =  {  git  =  "https://github.com/treeman/tree-sitter-sdjot.git"  } 


  I use a slightly older version because some other grammars I want depend on the older version, and it’s a big pain but they all need to use a matching version.
Bleh.
  According to the docs  we first need to setup a  HighlightConfiguration .
I used  lazy_static!  to create a global map with configurations to be used by any parallel rendering on the blog.
It’s not the most beautiful code I’ve written, but it gets the job done:
  
 //  All highlights needs to be listed explicitly.

 static  HIGHLIGHT_NAMES :  & [ & str ]  =  & [ 
  //  I have +100 entries here, this is for sdjot.

  " markup " , 
  " markup.italic " , 
  " markup.raw " , 
  " punctuation.delimiter " , 
  " tag.attribute " , 
 ] ; 
 
 lazy_static!  { 
  static  ref  CONFIGS :  HashMap < String, HighlightConfiguration >  =  init_configurations ( ) ; 
 } 
 
 fn  init_configurations ( )  ->  HashMap < String, HighlightConfiguration >  { 
  [ 
  //  I have more languages here

  ( 
  " sdjot " , 
  HighlightConfiguration :: new ( 
  tree_sitter_sdjot :: language ( ) , 
  tree_sitter_sdjot :: HIGHLIGHTS_QUERY , 
  tree_sitter_sdjot :: INJECTIONS_QUERY , 
  " " , 
  ) 
             . unwrap ( ) , 
  ) , 
  ] 
     . into_iter ( ) 
     . map ( | ( name ,  mut  config ) |  { 
         config. configure ( & HIGHLIGHT_NAMES ) ; 
  ( name. to_string ( ) ,  config ) 
  } ) 
     . collect ( ) 
 } 


  Notice how all highlight names we’re interested in have to be explicitly specified.
This is a big pain, especially if you’re going to include many larger grammars.
  The names can be filtered for with  ripgrep  with something like this:
  
 rg  "@[ \w .]+"  -INo --trim highlights.scm  |  sort  |  uniq 


  I already have syntax highlighting via  syntect , so I wrap the highlighters in their own types:
  
 enum  HighlighterType <'a>  { 
     Syntect ( SyntectHighlighter < 'a > ) , 
     Treesitter ( TreesitterHighlighter < 'a > ) , 
 } 
 
 pub  struct  TreesitterHighlighter < 'a >  { 
  config :  & 'a  HighlightConfiguration,

 } 
 
 impl < 'a >  TreesitterHighlighter < 'a >  { 
  pub  fn  find ( lang_id :  & str )  ->  Option < Self >  { 
  CONFIGS . get ( lang_id ) . map ( | config |  Self  {  config  } ) 
  } 
 } 


  The interesting part is of course the  highlight  method, that takes a string of code and applies syntax highlighting on it:
  
 impl < 'a >  TreesitterHighlighter < 'a >  { 
  pub  fn  highlight ( & self ,  code :  & str )  ->  Result < String >  { 
  let  mut  highlighter  =  Highlighter :: new ( ) ; 
 
  let  highlights  =  highlighter. highlight ( self .config ,  code. as_bytes ( ) ,  None ,  | lang |  { 
  //  This callback handles language injection

  //  and should return a `HighlightConfiguration`.

  let  res  =  CONFIGS . get ( lang ) ; 
  if  ! res. is_some ( )  { 
  warn! ( " Couldn't find treesitter grammar for `{lang}` to inject " ) ; 
  } 
             res

  } ) ? ; 
 
  let  mut  renderer  =  HtmlRenderer :: new ( ) ; 
         renderer. render ( highlights ,  code. as_bytes ( ) ,  & | attr |  { 
  //  This should return a `&'a [u8]` with the same lifetime as `code`.

  } ) ? ; 
  let  res  =  renderer. lines ( ) . join ( " " ) ; 
  Ok ( res ) 
  } 
 } 


  I want to point out the API in  HtmlRenderer , where we stumble upon a very annoying problem:
what should we return from the callback, and how should we do that?
  What the callback does is inject the return value into the  span  element, like this:
  
 < span  CALLBACK_RESULT  > highlight </ span > 


  So we’d like to return something like 
 " class= \" markup italic \" " , using  attr  which is only a  usize  into  HIGHLIGHT_NAMES :
  
 renderer. render ( highlights ,  code. as_bytes ( ) ,  & | attr |  { 
  format! ( r # "class=" {} " "# ,  HIGHLIGHT_NAMES [ attr. 0 ] . replace ( " . " ,  "  " ) ) . as_bytes ( ) 
 } ) ? ; 


  Because we return a slice of bytes into a string that’s created inside the callback, of course the Rust compiler will be mad at us:
  error[E0515]: cannot return value referencing temporary value

   --> src/markup/syntax_highlight/treesitter_highlighter.rs:33:13

    |

 33 |             format!(r#"class="{}""#, HIGHLIGHT_NAMES[attr.0].replace(".", " ")).as_bytes()

    |             -------------------------------------------------------------------^^^^^^^^^^^

    |             |

    |             returns a value referencing data owned by the current function

    |             temporary value created here



  How to dynamically create a string from inside the callback… That outlives the callback itself?
  Not easily I tell you.
  It would be so much easier if the callback would return a  Cow<str>  or something.
I wonder how the designers of the API expects it to be used?
This surely isn’t a very unique requirement, to wrap the attribute in a  class ?
  Oh well.
One way to solve this is to store the generated strings in a container that outlives the callback, and reference that (yeah it’s a  Fn  callback, but there are hacky ways around that).
Or you could, you know, write your own  HtmlRenderer .
  Or you could pre-generate the classes and reference them:
  
 lazy_static!  { 
  static  ref  CLASSES :  Vec < String >  =  HIGHLIGHT_NAMES 
         . iter ( ) 
         . map ( | name |  format! ( r # "class=" {} " "# ,  name. replace ( " . " ,  "  " ) ) ) 
         . collect ( ) ; 
 } 


  
 renderer. render ( highlights ,  code. as_bytes ( ) ,  & | attr |  { 
  CLASSES [ attr. 0 ] . as_bytes ( ) 
 } ) ? ; 


  This should be the fastest option and is the one I currently use…
But speed isn’t a bottleneck here and I’d rather just return a  String  with  format!  and be done with it.
  
 With this I’ve integrated Tree-sitter based syntax highlighting into my blog!
  
 ``` 
 With great powers comes great responsibility 
 ``` 


  I could start moving the various languages over from Syntect to Tree-sitter…
But I won’t.
  There are some issues:
   You need a compatible version of  tree-sitter  for all grammars.
  The more grammars you add the more painful the upgrade path becomes.
 
   Syntect gives better highlighting for some languages (like Rust and C).
  Neovim has their own highlighter implementation and has made tweaks to certain grammars and gets much nicer highlighting than I got out of the box.
  Integrating that code into my site generator is probably possible, but not a rabbit hole I want to jump into right now.
 
   The highlighter library feels a bit immature.
  A newer version broke the highlight groups I got from some grammars and I don’t see any support for how to add a language specific class to  span  for injected languages.
 
 
 Because of these issues I’ll evaluate what highlighter to use on a case-by-case basis, with Syntect as the default choice.
  Within edge-cases lies complexity
  If you’ve read the post to the end, congratulations.
You made it!
  I don’t claim to be an expert at grammars or Tree-sitter, and I’m sure there are plenty of things that can be improved with the way the grammar is made.
But I hope it can be helpful as a starting point if you’re curious on how to write a Tree-sitter grammar of your own.
  See the  tree-sitter-djot repo  for how I developed the grammar further to support the full  Djot specification  (but remember, I’m not an expert).
  Just one word of advice before you go.
Writing a grammar for simple rules is pretty easy, but in the real world things can get messy quickly.
This is especially true if you need to juggle multiple conflicting rules in the external scanner—keeping a sane structure is challenging.
  (Even in our simple grammar there are bugs, but I don’t care to fix them.)
   The night is dark and full of terrors

       Published:  
  March 19, 
   2024 
   Revised:  
  January 29,  2025 
 
 in 
 1e17751 
  Tagged:  C ,  Djot ,  Neovim ,  Rust ,  Tree-sitter 
   Previous    Next  
 
  
</tool.toolu_01AhpCBVGpYz7VHR1xw41pjD>

## ASSISTANT:

Now let me run a test to see what's currently working:

## TOOL USE:

Name: shell-command
ID: toolu_01PUheT5w6cv48CAQHutsbEc

### command

<tool.toolu_01PUheT5w6cv48CAQHutsbEc>
emacs --batch -l test-all-greger-cases.el
</tool.toolu_01PUheT5w6cv48CAQHutsbEc>

## TOOL RESULT:

ID: toolu_01PUheT5w6cv48CAQHutsbEc

<tool.toolu_01PUheT5w6cv48CAQHutsbEc>
Command executed successfully:
Loading /Users/andreas/scratch/greger-grammar/greger-tree-sitter.el (source)...

🧪 Running greger-tree-sitter comprehensive tests...

=== Testing: simple-user-message ===
✅ PASSED (0.000s)

=== Testing: system-and-user ===
✅ PASSED (0.000s)

=== Testing: simple-conversation ===
✅ PASSED (0.000s)

=== Testing: thinking-section ===
✅ PASSED (0.000s)

=== Testing: tool-use-single-param ===
✅ PASSED (0.000s)

=== Testing: tool-use-multiple-params ===
✅ PASSED (0.000s)

=== Testing: complex-workflow ===
✅ PASSED (0.000s)

=== Testing: multiple-tool-uses ===
✅ PASSED (0.000s)

=== Testing: tool-use-multiline-params ===
✅ PASSED (0.000s)

=== Testing: thinking-only ===
✅ PASSED (0.000s)

=== Testing: tool-use-only ===
✅ PASSED (0.000s)

=== Testing: citations-basic ===
✅ PASSED (0.010s)

=== Testing: citations-after-tool-result ===
✅ PASSED (0.001s)

=== Testing: citations-multiple ===
✅ PASSED (0.001s)

📊 TEST SUMMARY:
Total tests: 14
Passed: 14
Failed: 0

🎉 ALL TESTS PASSED!

</tool.toolu_01PUheT5w6cv48CAQHutsbEc>

## ASSISTANT:

Great! The existing tests are passing. Now I need to understand how the citation parsing is supposed to work according to your requirements. Let me examine the expected output from the test case more carefully:

## TOOL USE:

Name: read-file
ID: toolu_014FZejvZPCBFo1xvMuqqcHf

### path

<tool.toolu_014FZejvZPCBFo1xvMuqqcHf>
test-all-greger-cases.el
</tool.toolu_014FZejvZPCBFo1xvMuqqcHf>

### start-line

<tool.toolu_014FZejvZPCBFo1xvMuqqcHf>
725
</tool.toolu_014FZejvZPCBFo1xvMuqqcHf>

### end-line

<tool.toolu_014FZejvZPCBFo1xvMuqqcHf>
750
</tool.toolu_014FZejvZPCBFo1xvMuqqcHf>

## TOOL RESULT:

ID: toolu_014FZejvZPCBFo1xvMuqqcHf

<tool.toolu_014FZejvZPCBFo1xvMuqqcHf>
Start index out of bounds: 724
</tool.toolu_014FZejvZPCBFo1xvMuqqcHf>

## ASSISTANT:

Let me look at one of the citation test cases in detail:

## TOOL USE:

Name: read-file
ID: toolu_01D5iWNMNZ6XjRTdGuLGjM97

### path

<tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>
test-all-greger-cases.el
</tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>

### start-line

<tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>
189
</tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>

### end-line

<tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>
220
</tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>

## TOOL RESULT:

ID: toolu_01D5iWNMNZ6XjRTdGuLGjM97

<tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>
## TOOL USE:

Name: list-directory
ID: toolu_111

### path

<tool.toolu_111>
.
</tool.toolu_111>

## TOOL RESULT:

ID: toolu_111

<tool.toolu_111>
file1.txt
file2.txt
README.md
</tool.toolu_111>

## TOOL USE:

Name: read-file
ID: toolu_222

### path

<tool.toolu_222>
file1.txt
</tool.toolu_222>

</tool.toolu_01D5iWNMNZ6XjRTdGuLGjM97>

## ASSISTANT:

Let me look at the citation test case:

## TOOL USE:

Name: ripgrep
ID: toolu_01RwnnhGRBEWGBkX9vWZURNc

### pattern

<tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>
citations-basic
</tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>

### path

<tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>
test-all-greger-cases.el
</tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>

### context-lines

<tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>
20
</tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>

## TOOL RESULT:

ID: toolu_01RwnnhGRBEWGBkX9vWZURNc

<tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>
303-    (:name "tool-use-only"
304-           :markdown "## USER:
305-
306-Read a file
307-
308-## TOOL USE:
309-
310-Name: read-file
311-ID: toolu_999
312-
313-### path
314-
315-<tool.toolu_999>
316-test.txt
317-</tool.toolu_999>
318-"
319-           :dialog (((role . "user") (content . "Read a file"))
320-                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_999") (name . "read-file") (input . ((path . "test.txt")))))))))
321-
322-    ;; Citations basic test
323:    (:name "citations-basic"
324-           :markdown "## USER:
325-
326-When was Claude Shannon born?
327-
328-## SERVER TOOL USE:
329-
330-Name: web_search
331-ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE
332-
333-### query
334-
335-<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
336-claude shannon birth date
337-</tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
338-
339-## SERVER TOOL RESULT:
340-
341-ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE
342-
343-<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>

</tool.toolu_01RwnnhGRBEWGBkX9vWZURNc>

## TOOL USE:

Name: ripgrep
ID: toolu_01WZHojkK6i1QvrSMmvi47fJ

### pattern

<tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>
citations-basic
</tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>

### path

<tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>
test-all-greger-cases.el
</tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>

### context-lines

<tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>
50
</tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>

## TOOL RESULT:

ID: toolu_01WZHojkK6i1QvrSMmvi47fJ

<tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>
273-
274-## TOOL RESULT:
275-
276-ID: toolu_789
277-
278-<tool.toolu_789>
279-Successfully wrote new file script.py with 85 characters.
280-</tool.toolu_789>
281-
282-## ASSISTANT:
283-
284-I've created a new Python script file with a basic Hello World program."
285-           :dialog (((role . "user") (content . "Write a new Python file"))
286-                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_789") (name . "write-new-file") (input . ((file_path . "script.py") (contents . "#!/usr/bin/env python3\n\ndef main():\n    print(\"Hello, world!\")\n\nif __name__ == \"__main__\":\n    main()") (git_commit_message . "Add new Python script")))))))
287-                    ((role . "user") (content . (((type . "tool_result") (tool_use_id . "toolu_789") (content . "Successfully wrote new file script.py with 85 characters.")))))
288-                    ((role . "assistant") (content . "I've created a new Python script file with a basic Hello World program."))))
289-
290-    ;; Just thinking without any other content
291-    (:name "thinking-only"
292-           :markdown "## USER:
293-
294-Let me think about this
295-
296-## THINKING:
297-
298-I need to consider all the options carefully before responding."
299-           :dialog (((role . "user") (content . "Let me think about this"))
300-                    ((role . "assistant") (content . (((type . "thinking") (thinking . "I need to consider all the options carefully before responding.")))))))
301-
302-    ;; Tool use without any following content
303-    (:name "tool-use-only"
304-           :markdown "## USER:
305-
306-Read a file
307-
308-## TOOL USE:
309-
310-Name: read-file
311-ID: toolu_999
312-
313-### path
314-
315-<tool.toolu_999>
316-test.txt
317-</tool.toolu_999>
318-"
319-           :dialog (((role . "user") (content . "Read a file"))
320-                    ((role . "assistant") (content . (((type . "tool_use") (id . "toolu_999") (name . "read-file") (input . ((path . "test.txt")))))))))
321-
322-    ;; Citations basic test
323:    (:name "citations-basic"
324-           :markdown "## USER:
325-
326-When was Claude Shannon born?
327-
328-## SERVER TOOL USE:
329-
330-Name: web_search
331-ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE
332-
333-### query
334-
335-<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
336-claude shannon birth date
337-</tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
338-
339-## SERVER TOOL RESULT:
340-
341-ID: srvtoolu_01WYG3ziw53XMcoyKL4XcZmE
342-
343-<tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
344-Search results about Claude Shannon
345-</tool.srvtoolu_01WYG3ziw53XMcoyKL4XcZmE>
346-
347-## ASSISTANT:
348-
349-Based on the search results, <cite>Claude Shannon was born on April 30, 1916, in Petoskey, Michigan</cite>
350-
351-## CITATIONS:
352-
353-### https://en.wikipedia.org/wiki/Claude_Shannon
354-
355-Title: Claude Shannon - Wikipedia
356-Cited text: Claude Elwood Shannon (April 30, 1916 – February 24, 2001) was an American mathematician, electrical engineer, computer scientist, cryptographer and i...
357-Encrypted index: Eo8BCioIAhgBIiQyYjQ0OWJmZi1lNm.."
358-           :dialog (((role . "user") (content . "When was Claude Shannon born?"))
359-                    ((role . "assistant") (content . (((type . "server_tool_use")
360-                                                       (id . "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE")
361-                                                       (name . "web_search")
362-                                                       (input . ((query . "claude shannon birth date"))))
363-                                                      ((type . "web_search_tool_result")
364-                                                       (tool_use_id . "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE")
365-                                                       (content . "Search results about Claude Shannon"))
366-                                                      ((type . "text")
367-                                                       (text . "Based on the search results,"))
368-                                                      ((type . "text")
369-                                                       (text . "Claude Shannon was born on April 30, 1916, in Petoskey, Michigan")
370-                                                       (citations . (((type . "web_search_result_location")
371-                                                                      (url . "https://en.wikipedia.org/wiki/Claude_Shannon")
372-                                                                      (title . "Claude Shannon - Wikipedia")
373-                                                                      (cited_text . "Claude Elwood Shannon (April 30, 1916 – February 24, 2001) was an American mathematician, electrical engineer, computer scientist, cryptographer and i...")

</tool.toolu_01WZHojkK6i1QvrSMmvi47fJ>

## ASSISTANT:

Now I understand! Looking at this test case, I can see exactly what you want:

1. In the markdown, there's a `<cite>` tag: `<cite>Claude Shannon was born on April 30, 1916, in Petoskey, Michigan</cite>`
2. Followed by a `## CITATIONS:` section with the citation details
3. The expected output shows:
   - First: `((type . "text") (text . "Based on the search results,"))`
   - Then: `((type . "text") (text . "Claude Shannon was born on April 30, 1916, in Petoskey, Michigan") (citations . ...))`

So you want the tree-sitter grammar to be smarter about citations - rather than post-processing in Elisp, you want the parser itself to handle the logic of associating `<cite>` tags with subsequent `## CITATIONS:` sections.

The current tree-sitter grammar is actually already quite good at this, but let me update it to be even smarter according to your exact requirements. I'll modify the grammar to create special citation-aware nodes:

## TOOL USE:

Name: str-replace
ID: toolu_019yoQ9Wscvp2RMfSZWy55UK

### file-path

<tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>
grammar.js
</tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>

### original-content

<tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>
/**
 * @file greger.el parser - Tree-sitter grammar for greger conversation format
 * @author Andreas Jansson <andreas.s.t.jansson@gmail.com>
 * @license MIT
 */

/// <reference types="tree-sitter-cli/dsl" />
// @ts-check

module.exports = grammar({
  name: "greger",

  extras: $ => [
    /[ \t]/,
  ],

  externals: $ => [
    $.tool_block_start,
    $.tool_block_end,
    $.tool_block_content,
    $._text,
  ],

  conflicts: $ => [
  ],

  rules: {
    source_file: $ => repeat($.section),

    section: $ => choice(
      $.user_section,
      $.system_section,
      $.assistant_section,
      $.thinking_section,
      $.tool_use_section,
      $.tool_result_section,
      $.server_tool_use_section,
      $.server_tool_result_section,
      $.citations_section,
    ),

    user_section: $ => seq(
      $.user_header,
      optional(alias($.content, $.section_content))
    ),

    system_section: $ => seq(
      $.system_header,
      optional(alias($.system_content, $.section_content))
    ),

    assistant_section: $ => seq(
      $.assistant_header,
      optional(alias($.content, $.section_content))
    ),

    thinking_section: $ => seq(
      $.thinking_header,
      optional(alias($.content, $.section_content))
    ),

    tool_use_section: $ => seq(
      $.tool_use_header,
      optional($.tool_use_content)
    ),

    tool_result_section: $ => seq(
      $.tool_result_header,
      optional($.tool_result_content)
    ),

    server_tool_use_section: $ => seq(
      $.server_tool_use_header,
      optional($.tool_use_content)
    ),

    server_tool_result_section: $ => seq(
      $.server_tool_result_header,
      optional($.tool_result_content)
    ),

    citations_section: $ => seq(
      $.citations_header,
      optional($.citations_content)
    ),

    // Headers - simple tokens
    user_header: $ => /##[ \t]*USER:[ \t]*\n/,
    system_header: $ => /##[ \t]*SYSTEM:[ \t]*\n/,
    assistant_header: $ => /##[ \t]*ASSISTANT:[ \t]*\n/,
    thinking_header: $ => /##[ \t]*THINKING:[ \t]*\n/,
    tool_use_header: $ => /##[ \t]*TOOL USE:[ \t]*\n/,
    tool_result_header: $ => /##[ \t]*TOOL RESULT:[ \t]*\n/,
    server_tool_use_header: $ => /##[ \t]*SERVER TOOL USE:[ \t]*\n/,
    server_tool_result_header: $ => /##[ \t]*SERVER TOOL RESULT:[ \t]*\n/,
    citations_header: $ => /##[ \t]*CITATIONS:[ \t]*\n/,

    // Content types - similar to RST and markdown
    content: $ => repeat1(choice(
      $.content_line,
      $.newline
    )),

    content_line: $ => seq(
      repeat1(choice(
        alias($._text, 'text'),
        $.cite_tag
      )),
      "\n"
    ),

    // Cite tag with structured content
    cite_tag: $ => seq(
      "<cite>",
      field("cited_text", repeat1(/[^<\n]+/)),
      "</cite>"
    ),

    system_content: $ => repeat1(choice(
      $.content_line,
      $.newline
    )),

    tool_use_content: $ => repeat1(choice(
      $.tool_name_line,
      $.tool_id_line,
      $.tool_parameter,
      $.newline
    )),

    tool_result_content: $ => repeat1(choice(
      $.tool_result_id_line,
      $.tool_result_block,
      $.newline
    )),

    citations_content: $ => repeat1(choice(
      $.citation_entry,
      $.newline
    )),







    // Tool-specific patterns
    tool_name_line: $ => seq(
      "Name:",
      /[ \t]*/,
      field("name", $.identifier),
      "\n"
    ),

    tool_id_line: $ => seq(
      "ID:",
      /[ \t]*/,
      field("id", $.identifier),
      "\n"
    ),

    tool_parameter: $ => seq(
      "###",
      /[ \t]*/,
      field("param_name", $.identifier),
      "\n",
      "\n",
      field("param_value", $.tool_param_block)
    ),

    tool_param_block: $ => seq(
      $.tool_block_start,
      field("content", repeat($.tool_block_content)),
      $.tool_block_end
    ),

    tool_result_id_line: $ => seq(
      "ID:",
      /[ \t]*/,
      field("id", $.identifier),
      "\n"
    ),

    tool_result_block: $ => seq(
      $.tool_block_start,
      field("content", repeat($.tool_block_content)),
      $.tool_block_end
    ),

    // Citation patterns
    citation_entry: $ => prec.left(seq(
      "###",
      /[ \t]*/,
      field("url", $.url),
      "\n",
      "\n",
      repeat(choice(
        $.citation_title,
        $.citation_text,
        $.citation_index,
        $.newline
      ))
    )),

    citation_title: $ => seq(
      "Title:",
      /[ \t]*/,
      field("title", /[^\n]+/),
      "\n"
    ),

    citation_text: $ => seq(
      "Cited text:",
      /[ \t]*/,
      field("text", /[^\n]+/),
      "\n"
    ),

    citation_index: $ => seq(
      "Encrypted index:",
      /[ \t]*/,
      field("index", /[^\n]+/),
      "\n"
    ),





    // Tool content line - anything except closing tool tag
    tool_content_line: $ => prec(-1, /[^\n]+/),

    newline: $ => "\n",

    // Basic tokens
    identifier: $ => /[a-zA-Z_][a-zA-Z0-9_.-]*/,
    url: $ => /https?:\/\/[^\s\n]+/,
  }
});
</tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>

### new-content

<tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>
/**
 * @file greger.el parser - Tree-sitter grammar for greger conversation format
 * @author Andreas Jansson <andreas.s.t.jansson@gmail.com>
 * @license MIT
 */

/// <reference types="tree-sitter-cli/dsl" />
// @ts-check

module.exports = grammar({
  name: "greger",

  extras: $ => [
    /[ \t]/,
  ],

  externals: $ => [
    $.tool_block_start,
    $.tool_block_end,
    $.tool_block_content,
    $._text,
  ],

  conflicts: $ => [
  ],

  rules: {
    source_file: $ => repeat($.section),

    section: $ => choice(
      $.user_section,
      $.system_section,
      $.assistant_section,
      $.thinking_section,
      $.tool_use_section,
      $.tool_result_section,
      $.server_tool_use_section,
      $.server_tool_result_section,
      $.citations_with_text,
      $.citations_without_text,
    ),

    user_section: $ => seq(
      $.user_header,
      optional(alias($.content, $.section_content))
    ),

    system_section: $ => seq(
      $.system_header,
      optional(alias($.system_content, $.section_content))
    ),

    assistant_section: $ => seq(
      $.assistant_header,
      optional(alias($.content, $.section_content))
    ),

    thinking_section: $ => seq(
      $.thinking_header,
      optional(alias($.content, $.section_content))
    ),

    tool_use_section: $ => seq(
      $.tool_use_header,
      optional($.tool_use_content)
    ),

    tool_result_section: $ => seq(
      $.tool_result_header,
      optional($.tool_result_content)
    ),

    server_tool_use_section: $ => seq(
      $.server_tool_use_header,
      optional($.tool_use_content)
    ),

    server_tool_result_section: $ => seq(
      $.server_tool_result_header,
      optional($.tool_result_content)
    ),

    // New citation-aware sections
    citations_with_text: $ => seq(
      // Any section that contains cite tags
      choice(
        $.assistant_header,
        $.thinking_header,
        $.user_header,
        $.system_header
      ),
      field("content_with_cites", $.content_with_cites),
      $.citations_header,
      field("citations", optional($.citations_content))
    ),

    citations_without_text: $ => seq(
      $.citations_header,
      field("citations", optional($.citations_content))
    ),

    // Headers - simple tokens
    user_header: $ => /##[ \t]*USER:[ \t]*\n/,
    system_header: $ => /##[ \t]*SYSTEM:[ \t]*\n/,
    assistant_header: $ => /##[ \t]*ASSISTANT:[ \t]*\n/,
    thinking_header: $ => /##[ \t]*THINKING:[ \t]*\n/,
    tool_use_header: $ => /##[ \t]*TOOL USE:[ \t]*\n/,
    tool_result_header: $ => /##[ \t]*TOOL RESULT:[ \t]*\n/,
    server_tool_use_header: $ => /##[ \t]*SERVER TOOL USE:[ \t]*\n/,
    server_tool_result_header: $ => /##[ \t]*SERVER TOOL RESULT:[ \t]*\n/,
    citations_header: $ => /##[ \t]*CITATIONS:[ \t]*\n/,

    // Content types - similar to RST and markdown
    content: $ => repeat1(choice(
      $.content_line,
      $.newline
    )),

    // Content that contains cite tags - for citations_with_text
    content_with_cites: $ => repeat1(choice(
      $.content_line_with_cites,
      $.newline
    )),

    content_line: $ => seq(
      repeat1(choice(
        alias($._text, 'text')
      )),
      "\n"
    ),

    content_line_with_cites: $ => seq(
      repeat1(choice(
        alias($._text, 'text'),
        $.cite_tag
      )),
      "\n"
    ),

    // Cite tag with structured content
    cite_tag: $ => seq(
      "<cite>",
      field("cited_text", repeat1(/[^<\n]+/)),
      "</cite>"
    ),

    system_content: $ => repeat1(choice(
      $.content_line,
      $.newline
    )),

    tool_use_content: $ => repeat1(choice(
      $.tool_name_line,
      $.tool_id_line,
      $.tool_parameter,
      $.newline
    )),

    tool_result_content: $ => repeat1(choice(
      $.tool_result_id_line,
      $.tool_result_block,
      $.newline
    )),

    citations_content: $ => repeat1(choice(
      $.citation_entry,
      $.newline
    )),

    // Tool-specific patterns
    tool_name_line: $ => seq(
      "Name:",
      /[ \t]*/,
      field("name", $.identifier),
      "\n"
    ),

    tool_id_line: $ => seq(
      "ID:",
      /[ \t]*/,
      field("id", $.identifier),
      "\n"
    ),

    tool_parameter: $ => seq(
      "###",
      /[ \t]*/,
      field("param_name", $.identifier),
      "\n",
      "\n",
      field("param_value", $.tool_param_block)
    ),

    tool_param_block: $ => seq(
      $.tool_block_start,
      field("content", repeat($.tool_block_content)),
      $.tool_block_end
    ),

    tool_result_id_line: $ => seq(
      "ID:",
      /[ \t]*/,
      field("id", $.identifier),
      "\n"
    ),

    tool_result_block: $ => seq(
      $.tool_block_start,
      field("content", repeat($.tool_block_content)),
      $.tool_block_end
    ),

    // Citation patterns
    citation_entry: $ => prec.left(seq(
      "###",
      /[ \t]*/,
      field("url", $.url),
      "\n",
      "\n",
      repeat(choice(
        $.citation_title,
        $.citation_text,
        $.citation_index,
        $.newline
      ))
    )),

    citation_title: $ => seq(
      "Title:",
      /[ \t]*/,
      field("title", /[^\n]+/),
      "\n"
    ),

    citation_text: $ => seq(
      "Cited text:",
      /[ \t]*/,
      field("text", /[^\n]+/),
      "\n"
    ),

    citation_index: $ => seq(
      "Encrypted index:",
      /[ \t]*/,
      field("index", /[^\n]+/),
      "\n"
    ),

    // Tool content line - anything except closing tool tag
    tool_content_line: $ => prec(-1, /[^\n]+/),

    newline: $ => "\n",

    // Basic tokens
    identifier: $ => /[a-zA-Z_][a-zA-Z0-9_.-]*/,
    url: $ => /https?:\/\/[^\s\n]+/,
  }
});
</tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>

### git-commit-message

<tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>
Add citation-aware sections to grammar

- Add citations_with_text section for content with <cite> tags followed by ## CITATIONS:
- Add citations_without_text section for standalone ## CITATIONS: sections
- Add content_with_cites rule to handle content containing cite tags
- This makes the parser handle citation logic directly instead of post-processing
</tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>

## TOOL RESULT:

ID: toolu_019yoQ9Wscvp2RMfSZWy55UK

<tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>
Successfully replaced content in /Users/andreas/scratch/greger-grammar/grammar.js. Successfully staged 2 file(s) and committed with message: Add citation-aware sections to grammar

- Add citations_with_text section for content with <cite> tags followed by ## CITATIONS:
- Add citations_without_text section for standalone ## CITATIONS: sections
- Add content_with_cites rule to handle content containing cite tags
- This makes the parser handle citation logic directly instead of post-processing
</tool.toolu_019yoQ9Wscvp2RMfSZWy55UK>

## ASSISTANT:

Now I need to regenerate the parser:

## TOOL USE:

Name: shell-command
ID: toolu_015eHEzApo6iPYD92cR6PfMJ

### command

<tool.toolu_015eHEzApo6iPYD92cR6PfMJ>
tree-sitter generate
</tool.toolu_015eHEzApo6iPYD92cR6PfMJ>

## TOOL RESULT:

ID: toolu_015eHEzApo6iPYD92cR6PfMJ

<tool.toolu_015eHEzApo6iPYD92cR6PfMJ>
Command failed with exit code 1: Error when generating parser

Caused by:
    Unresolved conflict for symbol sequence:
    
      user_header  _text  •  '
    '  …
    
    Possible interpretations:
    
      1:  user_header  (content_line_repeat1  _text)  •  '
    '  …
      2:  user_header  (content_line_with_cites_repeat1  _text)  •  '
    '  …
    
    Possible resolutions:
    
      1:  Specify a higher precedence in `content_line_repeat1` than in the other rules.
      2:  Specify a higher precedence in `content_line_with_cites_repeat1` than in the other rules.
      3:  Add a conflict for these rules: `content_line`, `content_line_with_cites`
    

</tool.toolu_015eHEzApo6iPYD92cR6PfMJ>

## ASSISTANT:

I need to handle this conflict. The issue is that the parser can't decide whether to use `content_line` or `content_line_with_cites` when it sees regular text. Let me fix this by simplifying the approach and using precedence:

## TOOL USE:

Name: str-replace
ID: toolu_01WEmPq5v1yLm45wE5Esewnb

### file-path

<tool.toolu_01WEmPq5v1yLm45wE5Esewnb>
grammar.js
</tool.toolu_01WEmPq5v1yLm45wE5Esewnb>

### original-content

<tool.toolu_01WEmPq5v1yLm45wE5Esewnb>
    // New citation-aware sections
    citations_with_text: $ => seq(
      // Any section that contains cite tags
      choice(
        $.assistant_header,
        $.thinking_header,
        $.user_header,
        $.system_header
      ),
      field("content_with_cites", $.content_with_cites),
      $.citations_header,
      field("citations", optional($.citations_content))
    ),

    citations_without_text: $ => seq(
      $.citations_header,
      field("citations", optional($.citations_content))
    ),
</tool.toolu_01WEmPq5v1yLm45wE5Esewnb>

### new-content

<tool.toolu_01WEmPq5v1yLm45wE5Esewnb>
    // New citation-aware sections
    citations_with_text: $ => prec(1, seq(
      // Any section that contains cite tags
      choice(
        $.assistant_header,
        $.thinking_header,
        $.user_header,
        $.system_header
      ),
      field("content_with_cites", $.content_with_cites),
      $.citations_header,
      field("citations", optional($.citations_content))
    )),

    citations_without_text: $ => seq(
      $.citations_header,
      field("citations", optional($.citations_content))
    ),
</tool.toolu_01WEmPq5v1yLm45wE5Esewnb>

### git-commit-message

<tool.toolu_01WEmPq5v1yLm45wE5Esewnb>
Add precedence to citations_with_text to resolve conflicts
</tool.toolu_01WEmPq5v1yLm45wE5Esewnb>

<!-- TOOL_RESULT_PLACEHOLDER_toolu_01WEmPq5v1yLm45wE5Esewnb -->