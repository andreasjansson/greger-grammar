## SYSTEM:

I have a tree-sitter grammar in grammar.js and a major mode for that grammar in grgfoo.el

Useful docs to download and read:
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Tree_002dsitter-Major-Modes.html
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Parser_002dbased-Font-Lock.html
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Languages.html
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Lock-Basics.html
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Font-Lock-Variables.html
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html (font-lock special properties, including 'invisible)
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html (download raw html and extract links from this)
* https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html (download raw html and extract links from this)

## USER:

### Task
Implement citation folding for grgfoo-mode to display this input:

```
## ASSISTANT:

Einstein developed the theory of relativity

### https://physics.com/einstein

Title: Einstein Biography
Cited text: Albert Einstein developed the theory of relativity in the early 20th century...
Encrypted index: def456

## ASSISTANT:

while Newton formulated the laws of motion

### https://physics.com/newton

Title: Newton Biography
Cited text: Isaac Newton formulated the three laws of motion...
Encrypted index: ghi789

## CITATIONS:

### https://physics.com/einstein

Title: Einstein Biography
Cited text: Albert Einstein developed the theory of relativity in the early 20th century...
Encrypted index: def456

### https://physics.com/newton

Title: Newton Biography
Cited text: Isaac Newton formulated the three laws of motion...
Encrypted index: ghi789
```

As this folded output:
```
## ASSISTANT:

Einstein developed the theory of relativity while Newton formulated the laws of motion

## CITATIONS:
[+2 citations, TAB to expand]
```

### Current State

**Files:**
- `grgfoo.el` - Tree-sitter major mode with citation folding implementation
- `test-citation-folding-exact.el` - ERT test with exact string comparison
- `test-visibility-utils.el` - Utility for checking visible text including display properties

**What Works:**
1. ✅ Citations are hidden using `invisible` text property
2. ✅ Citations section shows "[+2 citations, TAB to expand]" counter
3. ✅ TAB key toggles individual citations and citations section
4. ✅ Uses tree-sitter font-lock "capture name as function" feature
5. ✅ No segfaults after fixing tree-sitter node traversal

**Current Problem:**
Text merging creates duplicate output. Test shows:
```
## ASSISTANT:

Einstein developed the theory of relativity while Newton formulated the laws of motion

Einstein developed the theory of relativity while Newton formulated the laws of motion

Einstein developed the theory of relativity while Newton formulated the laws of motion

## CITATIONS:

[+2 citations, TAB to expand]
```

Instead of the required single merged line.

### Key Implementation Details

**Font-lock approach:**
```elisp
(defun grgfoo--citation-folding-function (node override start end)
  ;; Hides individual citations with invisible property
  (put-text-property node-start (1- node-end) 'invisible 'grgfoo-citation))

(defun grgfoo--apply-citation-folding ()
  ;; Post-processing function that merges text across assistant blocks
  ;; Uses display property to replace content with merged text
  ;; Currently creating duplicates due to overlapping ranges
```

**Tree-sitter queries:**
```elisp
'((assistant (citation_entry) @grgfoo--citation-folding-function)
  (citations) @grgfoo--citations-section-folding-function)
```

**Test setup:**
Uses `buffer-visible-text()` function that handles `invisible`, `display`, and `after-string` properties to check actual visible output.

### Next Steps
1. Fix the text merging logic in `grgfoo--apply-citation-folding()` to avoid duplicate display properties
2. Ensure the display property covers the correct range (from first assistant content to citations section)
3. Make the test pass with exact string comparison: `(should (string= expected actual))`

The foundation is solid - just need to fix the display property range calculation to merge text properly without duplication.

## USER:

continue

## ASSISTANT:

I'll analyze the current state and fix the text merging logic. Let me first examine the current code to understand the duplication issue.

## TOOL USE:

Name: read-file
ID: toolu_018oH5faS5KGMHPsa2P8icVZ

### path

<tool.toolu_018oH5faS5KGMHPsa2P8icVZ>
grgfoo.el
</tool.toolu_018oH5faS5KGMHPsa2P8icVZ>

### include-line-numbers

<tool.toolu_018oH5faS5KGMHPsa2P8icVZ>
true
</tool.toolu_018oH5faS5KGMHPsa2P8icVZ>

## TOOL RESULT:

ID: toolu_018oH5faS5KGMHPsa2P8icVZ

<tool.toolu_018oH5faS5KGMHPsa2P8icVZ>
;;; grgfoo.el --- Major mode for Greger files using tree-sitter -*- lexical-binding: t; -*-

;; Copyright (C) 2024

;; Author: Generated
;; Keywords: languages, tree-sitter
;; Version: 1.0.0
;; Package-Requires: ((emacs "29.1"))

;;; Commentary:

;; This package provides a major mode for Greger files with syntax highlighting,
;; navigation, citation folding, and other features powered by tree-sitter.

;;; Code:

(require 'treesit)
(require 'cl-lib)

(defgroup grgfoo nil
  "Major mode for Greger files."
  :group 'languages
  :prefix "grgfoo-")

(defcustom grgfoo-ts-indent-offset 2
  "Number of spaces for each indentation step in `grgfoo-mode'."
  :type 'integer
  :safe 'integerp
  :group 'grgfoo)

(defcustom grgfoo-citation-folding-enabled t
  "Whether to enable citation folding by default."
  :type 'boolean
  :group 'grgfoo)

(defcustom grgfoo-citation-summary-face 'underline
  "Face to use for citation text when folded."
  :type 'face
  :group 'grgfoo)

;; Customizable face colors for headers using standard Emacs color names
(defface grgfoo-user-header-face
  '((t (:foreground "cyan" :weight bold)))
  "Face for USER headers."
  :group 'grgfoo)

(defface grgfoo-assistant-header-face
  '((t (:foreground "green" :weight bold)))
  "Face for ASSISTANT headers."
  :group 'grgfoo)

(defface grgfoo-system-header-face
  '((t (:foreground "orange" :weight bold)))
  "Face for SYSTEM headers."
  :group 'grgfoo)

(defface grgfoo-thinking-header-face
  '((t (:foreground "magenta" :weight bold)))
  "Face for THINKING headers."
  :group 'grgfoo)

(defface grgfoo-tool-header-face
  '((t (:foreground "yellow" :weight bold)))
  "Face for tool-related headers (TOOL USE, TOOL RESULT, etc.)."
  :group 'grgfoo)

(defface grgfoo-citations-header-face
  '((t (:foreground "lightblue" :weight bold)))
  "Face for CITATIONS header."
  :group 'grgfoo)

(defface grgfoo-subheading-face
  '((t (:foreground "coral" :weight semi-bold)))
  "Face for subheadings like tool parameters and citation entries."
  :group 'grgfoo)

(defface grgfoo-field-name-face
  '((t (:foreground "lightyellow")))
  "Face for field names like 'Name:', 'ID:', etc."
  :group 'grgfoo)

(defface grgfoo-tool-tag-face
  '((t (:foreground "gray" :height 0.8)))
  "Face for tool start and end tags."
  :group 'grgfoo)

(defface grgfoo-error-face
  '((t (:background "red" :foreground "white")))
  "Face for parse errors in grgfoo-mode."
  :group 'grgfoo)

(defvar grgfoo-mode-syntax-table
  (let ((table (make-syntax-table)))
    ;; Comments
    (modify-syntax-entry ?# "<" table)
    (modify-syntax-entry ?\n ">" table)
    ;; Strings
    (modify-syntax-entry ?\" "\"" table)
    (modify-syntax-entry ?\' "'" table)
    ;; Brackets
    (modify-syntax-entry ?\( "()" table)
    (modify-syntax-entry ?\) ")(" table)
    (modify-syntax-entry ?\[ "(]" table)
    (modify-syntax-entry ?\] ")[" table)
    (modify-syntax-entry ?\{ "(}" table)
    (modify-syntax-entry ?\} "){" table)
    ;; Angle brackets for HTML tags
    (modify-syntax-entry ?\< "(>" table)
    (modify-syntax-entry ?\> ")<" table)
    table)
  "Syntax table for `grgfoo-mode'.")

;; Citation folding functions
(defun grgfoo--citation-folding-function (node override start end)
  "Font-lock function to handle citation folding.
NODE is the matched tree-sitter node, OVERRIDE is the override setting,
START and END are the region bounds."
  (condition-case err
      (when grgfoo-citation-folding-enabled
        (message "DEBUG: citation-folding-function called, node=%s" (if node "present" "nil"))
        (when node
          (let* ((node-start (treesit-node-start node))
                 (node-end (treesit-node-end node))
                 (should-fold (not (get-text-property node-start 'grgfoo-citation-expanded))))
            (message "DEBUG: node type=%s start=%d end=%d should-fold=%s"
                     (treesit-node-type node) node-start node-end should-fold)
            (when should-fold
              ;; Hide the entire citation block
              (put-text-property node-start (1- node-end) 'invisible 'grgfoo-citation)
              (message "DEBUG: Applied invisible property from %d to %d" node-start (1- node-end))))))
    (error
     (message "ERROR in citation-folding-function: %s" err))))

(defun grgfoo--assistant-block-processor (node override start end)
  "Font-lock function to process assistant blocks and merge text across citations.
NODE is the matched tree-sitter node, OVERRIDE is the override setting,
START and END are the region bounds."
  (condition-case err
      (when grgfoo-citation-folding-enabled
        (when node
          (let* ((node-start (treesit-node-start node))
                 (node-end (treesit-node-end node)))
            ;; Collect all text nodes and merge them
            (let ((text-parts '())
                  (children (treesit-node-children node)))
              (dolist (child children)
                (when (string= (treesit-node-type child) "text")
                  (let* ((child-start (treesit-node-start child))
                         (child-end (treesit-node-end child))
                         (text-content (string-trim (buffer-substring-no-properties child-start child-end))))
                    (when (> (length text-content) 0)
                      (push text-content text-parts)))))
              ;; If we have multiple text parts, merge them
              (when (> (length text-parts) 1)
                (let ((merged-text (mapconcat 'identity (reverse text-parts) " "))
                      (content-start (save-excursion
                                       (goto-char node-start)
                                       (forward-line 2) ; Skip header and blank line
                                       (point)))
                      (content-end (save-excursion
                                     (goto-char node-end)
                                     (forward-line -1)
                                     (point))))
                  (message "DEBUG: Merging %d text parts: %s" (length text-parts) merged-text)
                  (when (< content-start content-end)
                    (put-text-property content-start content-end 'display merged-text))))))))
    (error
     (message "ERROR in assistant-block-processor: %s" err))))

(defun grgfoo--apply-citation-folding ()
  "Apply comprehensive citation folding to merge assistant text blocks."
  (when grgfoo-citation-folding-enabled
    (save-excursion
      (let ((inhibit-read-only t)
            (modified (buffer-modified-p)))
        (condition-case err
            (progn
              ;; Find all assistant blocks and collect their text
              (goto-char (point-min))
              (let ((assistant-texts '())
                    (assistant-start nil)
                    (assistant-end nil))
                (while (re-search-forward "^## ASSISTANT:$" nil t)
                  (let ((block-start (line-beginning-position))
                        (block-end (save-excursion
                                     (if (re-search-forward "^## " nil t)
                                         (line-beginning-position)
                                       (point-max)))))
                    (unless assistant-start
                      (setq assistant-start block-start))
                    (setq assistant-end block-end)

                    ;; Extract text from this block (skip citations)
                    (goto-char block-start)
                    (forward-line 2) ; Skip header and blank line
                    (while (< (point) block-end)
                      (let ((line-start (line-beginning-position))
                            (line-end (line-end-position)))
                        (when (< line-start line-end)
                          (let ((line-text (buffer-substring-no-properties line-start line-end)))
                            (unless (or (string-match-p "^###" line-text)
                                       (string-match-p "^Title:" line-text)
                                       (string-match-p "^Cited text:" line-text)
                                       (string-match-p "^Encrypted index:" line-text)
                                       (string-match-p "^## " line-text)
                                       (string= "" (string-trim line-text)))
                              (push (string-trim line-text) assistant-texts))))
                        (forward-line 1)))))

                ;; If we have multiple text parts, create merged view
                (when (and (> (length assistant-texts) 1) assistant-start assistant-end)
                  (let ((merged-text (mapconcat 'identity (reverse assistant-texts) " ")))
                    ;; Replace all assistant blocks with single merged block
                    (goto-char assistant-start)
                    (forward-line 2) ; Skip "## ASSISTANT:" and blank line
                    (let ((content-start (point)))
                      (put-text-property content-start assistant-end 'display
                                       (concat merged-text "\n\n"))))))

              ;; Now handle citations section
              (goto-char (point-min))
              (when (re-search-forward "^## CITATIONS:$" nil t)
                (let ((citations-start (line-beginning-position)))
                  (forward-line 1)
                  (let ((citations-content-start (point))
                        (citations-end (point-max)))
                    (when (< citations-content-start citations-end)
                      (put-text-property citations-content-start citations-end 'invisible 'grgfoo-citations)
                      ;; Count citations for summary
                      (let ((citation-count 0))
                        (goto-char citations-content-start)
                        (while (re-search-forward "^### " citations-end t)
                          (setq citation-count (1+ citation-count)))
                        (goto-char citations-start)
                        (end-of-line)
                        (put-text-property (point) (1+ (point)) 'after-string
                                         (propertize (format "\n[+%d citation%s, TAB to expand]"
                                                           citation-count
                                                           (if (= citation-count 1) "" "s"))
                                                   'face 'font-lock-comment-face))))))))
          (error
           (message "ERROR in apply-citation-folding: %s" err)))
        (set-buffer-modified-p modified)))))

(defun grgfoo--citations-section-folding-function (node override start end)
  "Font-lock function to handle citations section folding.
NODE is the matched tree-sitter node, OVERRIDE is the override setting,
START and END are the region bounds."
  (when grgfoo-citation-folding-enabled
    (let* ((node-start (treesit-node-start node))
           (node-end (treesit-node-end node))
           (should-fold (not (get-text-property node-start 'grgfoo-citations-expanded))))
      (when should-fold
        ;; Find the header line by looking for the first newline
        (let* ((text (buffer-substring-no-properties node-start node-end))
               (first-newline (string-search "\n" text))
               (header-end (if first-newline
                             (+ node-start first-newline)
                             node-end)))
          ;; Make everything after the header invisible
          (when (< header-end node-end)
            (put-text-property (1+ header-end) node-end 'invisible 'grgfoo-citations)
            ;; Add summary text with citation count
            (let ((citation-count (grgfoo--count-citations-in-section node)))
              (put-text-property header-end (1+ header-end) 'after-string
                               (propertize (format "\n[+%d citation%s, TAB to expand]"
                                                 citation-count
                                                 (if (= citation-count 1) "" "s"))
                                         'face 'font-lock-comment-face)))))))))

(defvar grgfoo--treesit-font-lock-settings
  (treesit-font-lock-rules
   :language 'greger
   :feature 'headers
   :override t
   '(;; Major section headers - use custom faces for each type
     (user_header) @grgfoo-user-header-face
     (assistant_header) @grgfoo-assistant-header-face
     (system_header) @grgfoo-system-header-face
     (thinking_header) @grgfoo-thinking-header-face
     (tool_use_header) @grgfoo-tool-header-face
     (tool_result_header) @grgfoo-tool-header-face
     (server_tool_use_header) @grgfoo-tool-header-face
     (web_search_tool_result_header) @grgfoo-tool-header-face
     (citations_header) @grgfoo-citations-header-face)

   :language 'greger
   :feature 'folding
   :override t
   '(;; Citation folding - hide individual citations
     (assistant (citation_entry) @grgfoo--citation-folding-function)
     ;; Assistant block processing for text merging
     (assistant) @grgfoo--assistant-block-processor
     ;; Citations section folding
     (citations) @grgfoo--citations-section-folding-function)

   :language 'greger
   :feature 'subheadings
   :override t
   '(;; Sub-sections and parameter headers
     (citation_entry) @grgfoo-subheading-face)

   :language 'greger
   :feature 'fields
   :override t
   '(;; Field names only - no highlighting for values or content
     (name "Name:") @grgfoo-field-name-face
     (id "ID:") @grgfoo-field-name-face
     (citation_title "Title:") @grgfoo-field-name-face
     (citation_text "Cited text:") @grgfoo-field-name-face
     (citation_encrypted_index "Encrypted index:") @grgfoo-field-name-face)

   :language 'greger
   :feature 'tool-tags
   :override t
   '(;; Tool start and end tags - smaller and less visible
     (tool_start_tag) @grgfoo-tool-tag-face
     (tool_end_tag) @grgfoo-tool-tag-face)

   :language 'greger
   :feature 'comments
   :override t
   '(;; HTML comments only
     (html_comment) @font-lock-comment-face)

   :language 'greger
   :feature 'error
   :override t
   '(;; Parse errors
     (ERROR) @grgfoo-error-face))
  "Tree-sitter font-lock settings for `grgfoo-mode'.")

(defvar grgfoo--treesit-indent-rules
  `((greger
     ;; Working indentation rules that avoid parent-is (which causes segfaults)
     ((node-is "user") column-0 0)
     ((node-is "assistant") column-0 0)
     ((node-is "system") column-0 0)
     ((node-is "thinking") column-0 0)
     ((node-is "tool_use") column-0 0)
     ((node-is "tool_result") column-0 0)
     ((node-is "server_tool_use") column-0 0)
     ((node-is "web_search_tool_result") column-0 0)
     ((node-is "citations") column-0 0)
     ;; Indent content within sections
     ((node-is "text") parent-bol ,grgfoo-ts-indent-offset)
     ((node-is "name") parent-bol ,grgfoo-ts-indent-offset)
     ((node-is "id") parent-bol ,grgfoo-ts-indent-offset)
     ((node-is "value") parent-bol ,grgfoo-ts-indent-offset)
     ;; Default handling
     (no-node column-0 0)
     (catch-all column-0 0)))
  "Tree-sitter indentation rules for `grgfoo-mode'.")

;;;###autoload
(define-derived-mode grgfoo-mode prog-mode "Greger"
  "Major mode for editing Greger files with tree-sitter support.

\\{grgfoo-mode-map}"
  :syntax-table grgfoo-mode-syntax-table

  (when (treesit-ready-p 'greger)
    ;; Create the tree-sitter parser for this buffer
    (treesit-parser-create 'greger)

    ;; Tree-sitter setup
    (setq-local treesit-font-lock-settings grgfoo--treesit-font-lock-settings)
    (setq-local treesit-font-lock-feature-list
                '((error)
                  (headers folding)
                  (tool-tags comments)
                  (subheadings fields)
                  (tool-tags comments)))

    ;; Indentation - using simple and safe rules
    (setq-local treesit-simple-indent-rules grgfoo--treesit-indent-rules)

    ;; Navigation - treat headings as defuns for C-M-a and C-M-e
    (setq-local treesit-defun-type-regexp
                (rx (or "user" "assistant" "system" "thinking"
                        "tool_use" "tool_result" "server_tool_use"
                        "web_search_tool_result" "citations")))

    ;; Set up defun name function to show heading type
    (setq-local treesit-defun-name-function #'grgfoo--defun-name)

    ;; Setup citation folding invisibility
    (when grgfoo-citation-folding-enabled
      (add-to-invisibility-spec 'grgfoo-citation)
      (add-to-invisibility-spec 'grgfoo-citations))

    ;; Setup key bindings
    (local-set-key (kbd "TAB") #'grgfoo-toggle-citation-fold)

    ;; Enable all tree-sitter features
    (treesit-major-mode-setup)

    ;; Apply citation folding after font-lock
    (when grgfoo-citation-folding-enabled
      (add-hook 'font-lock-mode-hook #'grgfoo--apply-citation-folding nil t)
      (grgfoo--apply-citation-folding))

    ))



(defun grgfoo--defun-name (node)
  "Return the name of the defun NODE."
  (when (and node (treesit-node-p node))
    (condition-case nil
        (pcase (treesit-node-type node)
          ("user" "USER")
          ("assistant" "ASSISTANT")
          ("system" "SYSTEM")
          ("thinking" "THINKING")
          ("tool_use" "TOOL USE")
          ("tool_result" "TOOL RESULT")
          ("server_tool_use" "SERVER TOOL USE")
          ("web_search_tool_result" "WEB SEARCH TOOL RESULT")
          ("citations" "CITATIONS")
          (_ nil))
      (error nil))))

(defun grgfoo--find-citation-at-point ()
  "Find citation node at point, if any - using safer approach."
  (condition-case err
    (progn

      (if (treesit-ready-p 'greger)
          (let ((node (treesit-node-at (point))))
              (if node
                  (progn
                    ;; Check if we're already on a citation_entry or citations node
                    (if (member (treesit-node-type node) '("citation_entry" "citations"))
                        node
                      ;; Check immediate parent only to avoid segfaults
                      (let ((parent (treesit-node-parent node)))
                        (if (and parent (member (treesit-node-type parent) '("citation_entry" "citations")))
                            parent
                          nil))))
                nil))
        nil))
    (error
     (message "ERROR in find-citation: %s" err)
     nil)))

(defun grgfoo--count-citations-in-section (citations-node)
  "Count the number of citation entries in CITATIONS-NODE."
  (condition-case nil
    (length (treesit-query-capture citations-node '((citation_entry) @citation)))
    (error 0)))

(defun grgfoo-toggle-citation-fold ()
  "Toggle folding of citation at point."
  (interactive)
  (condition-case err
      (progn

        (if grgfoo-citation-folding-enabled
            (progn

              (let ((citation-node (grgfoo--find-citation-at-point)))
                (if citation-node
                    (progn
                      (message "DEBUG TAB: found citation node type=%s start=%s end=%s"
                               (treesit-node-type citation-node)
                               (treesit-node-start citation-node)
                               (treesit-node-end citation-node))
                      (let* ((node-start (treesit-node-start citation-node))
                             (node-end (treesit-node-end citation-node))
                             (node-type (treesit-node-type citation-node))
                             (is-citations-section (string= node-type "citations")))
                        (if is-citations-section
                            ;; Handle citations section
                            (let ((is-expanded (get-text-property node-start 'grgfoo-citations-expanded)))
                              (if is-expanded
                                  ;; Collapse citations section
                                  (progn
                                    (remove-text-properties node-start (1+ node-start) '(grgfoo-citations-expanded))
                                    (message "Citations section collapsed"))
                                ;; Expand citations section
                                (progn
                                  (put-text-property node-start (1+ node-start) 'grgfoo-citations-expanded t)
                                  ;; Clear existing invisible properties
                                  (remove-text-properties node-start node-end '(invisible after-string))
                                  (message "Citations section expanded"))))
                          ;; Handle individual citation
                          (let ((is-expanded (get-text-property node-start 'grgfoo-citation-expanded)))
                            (if is-expanded
                                ;; Collapse citation
                                (progn
                                  (remove-text-properties node-start (1+ node-start) '(grgfoo-citation-expanded))
                                  ;; Clear all text properties to ensure fresh font-lock
                                  (remove-text-properties node-start node-end '(invisible face))
                                  (message "Citation collapsed"))
                              ;; Expand citation
                              (progn
                                (put-text-property node-start (1+ node-start) 'grgfoo-citation-expanded t)
                                ;; Clear existing invisible properties
                                (remove-text-properties node-start node-end '(invisible face))
                                (message "Citation expanded")))))
                        ;; Trigger font-lock refresh
                        (font-lock-flush node-start node-end)))
                  (message "DEBUG TAB: no citation node found, falling back"))
                (indent-for-tab-command)))
          (progn
            (message "DEBUG TAB: citation folding disabled, falling back")
            (indent-for-tab-command))))
    (error
     (message "Error in citation folding: %s" err)
     (indent-for-tab-command))))

;; Ensure the grammar is loaded
(add-to-list 'treesit-extra-load-path default-directory)

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.grgfoo\\'" . grgfoo-mode))

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.greger\\'" . grgfoo-mode))

(provide 'grgfoo)

;;; grgfoo.el ends here
</tool.toolu_018oH5faS5KGMHPsa2P8icVZ>

## ASSISTANT:

Now let me check the test to see exactly what's expected:

## TOOL USE:

Name: read-file
ID: toolu_01XRAc2xWCrpLS9hJUbfYvoU

### path

<tool.toolu_01XRAc2xWCrpLS9hJUbfYvoU>
test-citation-folding-exact.el
</tool.toolu_01XRAc2xWCrpLS9hJUbfYvoU>

### include-line-numbers

<tool.toolu_01XRAc2xWCrpLS9hJUbfYvoU>
true
</tool.toolu_01XRAc2xWCrpLS9hJUbfYvoU>

## TOOL RESULT:

ID: toolu_01XRAc2xWCrpLS9hJUbfYvoU

<tool.toolu_01XRAc2xWCrpLS9hJUbfYvoU>
#!/usr/bin/env emacs --batch

(require 'ert)

(setq default-directory (file-name-directory (or load-file-name buffer-file-name)))
(add-to-list 'treesit-extra-load-path default-directory)

(load-file "grgfoo.el")
(load-file "test-visibility-utils.el")

(defun get-visible-buffer (buffer)
  "Get the visible text from BUFFER as you would see it on screen."
  (with-current-buffer buffer
    (buffer-visible-text)))

(ert-deftest test-citations-folding ()
  "Test that citations fold correctly and show the expected exact text."
  (with-temp-buffer
    (insert "## ASSISTANT:

Einstein developed the theory of relativity

### https://physics.com/einstein

Title: Einstein Biography
Cited text: Albert Einstein developed the theory of relativity in the early 20th century...
Encrypted index: def456

## ASSISTANT:

while Newton formulated the laws of motion

### https://physics.com/newton

Title: Newton Biography
Cited text: Isaac Newton formulated the three laws of motion...
Encrypted index: ghi789

## CITATIONS:

### https://physics.com/einstein

Title: Einstein Biography
Cited text: Albert Einstein developed the theory of relativity in the early 20th century...
Encrypted index: def456

### https://physics.com/newton

Title: Newton Biography
Cited text: Isaac Newton formulated the three laws of motion...
Encrypted index: ghi789
")

    (grgfoo-mode)
    (font-lock-ensure)

    (let ((actual (get-visible-buffer (current-buffer)))
          (expected "## ASSISTANT:

Einstein developed the theory of relativity while Newton formulated the laws of motion

## CITATIONS:
[+2 citations, TAB to expand]"))

      (message "=== ACTUAL OUTPUT ===")
      (message "%S" actual)
      (message "\n=== EXPECTED OUTPUT ===")
      (message "%S" expected)
      (message "\n=== ACTUAL LENGTH: %d, EXPECTED LENGTH: %d ===" (length actual) (length expected))

      ;; Show character-by-character differences
      (message "\n=== CHARACTER BY CHARACTER ===")
      (dotimes (i (max (length actual) (length expected)))
        (let ((a-char (if (< i (length actual)) (aref actual i) 'END))
              (e-char (if (< i (length expected)) (aref expected i) 'END)))
          (when (not (equal a-char e-char))
            (message "Position %d: actual=%s expected=%s" i a-char e-char))))

      (should (string= expected actual)))))

;; Run the tests
(ert-run-tests-batch-and-exit)
</tool.toolu_01XRAc2xWCrpLS9hJUbfYvoU>

## ASSISTANT:

Let me also check the visibility utils to understand how the test checks visible text:

## TOOL USE:

Name: read-file
ID: toolu_01VK8viETkRvjJj3jLKGmw4m

### path

<tool.toolu_01VK8viETkRvjJj3jLKGmw4m>
test-visibility-utils.el
</tool.toolu_01VK8viETkRvjJj3jLKGmw4m>

### include-line-numbers

<tool.toolu_01VK8viETkRvjJj3jLKGmw4m>
true
</tool.toolu_01VK8viETkRvjJj3jLKGmw4m>

## TOOL RESULT:

ID: toolu_01VK8viETkRvjJj3jLKGmw4m

<tool.toolu_01VK8viETkRvjJj3jLKGmw4m>
#!/usr/bin/env emacs --batch

;; Utility functions for testing text visibility

(defun buffer-visible-text (&optional buffer)
  "Return the visible text from BUFFER (or current buffer).
This includes text made visible by overlays and excludes invisible text."
  (with-current-buffer (or buffer (current-buffer))
    (let ((result "")
          (pos (point-min)))
      (while (< pos (point-max))
        (let* ((next-invisible (next-single-property-change pos 'invisible nil (point-max)))
               (next-after-string (next-single-property-change pos 'after-string nil (point-max)))
               (next-display (next-single-property-change pos 'display nil (point-max)))
               (next-change (min next-invisible next-after-string next-display))
               (invisible (get-text-property pos 'invisible))
               (display (get-text-property pos 'display))
               (visible (not (and invisible (invisible-p invisible)))))
          ;; Add visible text (either display property or actual text)
          (when visible
            (if display
                (setq result (concat result display))
              (setq result (concat result (buffer-substring pos next-change)))))

          ;; Check for after-string property that adds visible text
          (let ((after-string (get-text-property pos 'after-string)))
            (when after-string
              (setq result (concat result after-string))))

          (setq pos next-change)))
      result)))

(defun debug-text-properties (start end)
  "Debug text properties in region from START to END."
  (let ((pos start))
    (while (< pos end)
      (let* ((next-change (next-single-property-change pos nil nil end))
             (props (text-properties-at pos)))
        (when props
          (message "Position %d-%d: %s" pos next-change props))
        (setq pos next-change)))))

;; Test the visibility function
(add-to-list 'treesit-extra-load-path default-directory)
(load-file "grgfoo.el")

(with-temp-buffer
  (insert "## ASSISTANT:\n\nTest text\n\n### https://example.com\n\nTitle: Test\nCited text: Example citation\n")
  (grgfoo-mode)
  (font-lock-ensure)

  (message "Original buffer content:")
  (message "%s" (buffer-string))

  (message "\nVisible buffer content:")
  (message "%s" (buffer-visible-text))

  (message "\nText properties debug:")
  (debug-text-properties (point-min) (point-max)))
</tool.toolu_01VK8viETkRvjJj3jLKGmw4m>

## ASSISTANT:

Now let me run the test to see the current issue:

## TOOL USE:

Name: shell-command
ID: toolu_01KAvgHZLwcJDKjpZ5SW17sX

### command

<tool.toolu_01KAvgHZLwcJDKjpZ5SW17sX>
cd /tmp && emacs -Q --batch -l test-citation-folding-exact.el
</tool.toolu_01KAvgHZLwcJDKjpZ5SW17sX>

## TOOL RESULT:

ID: toolu_01KAvgHZLwcJDKjpZ5SW17sX

<tool.toolu_01KAvgHZLwcJDKjpZ5SW17sX>
Command failed with exit code 255: 
Error: file-missing ("Cannot open load file" "No such file or directory" "test-citation-folding-exact.el")
  mapbacktrace(#f(compiled-function (evald func args flags) #<bytecode -0xce2dc589a512f81>))
  debug-early-backtrace()
  debug-early(error (file-missing "Cannot open load file" "No such file or directory" "test-citation-folding-exact.el"))
  load("test-citation-folding-exact.el" nil t)
  command-line-1(("-l" "test-citation-folding-exact.el"))
  command-line()
  normal-top-level()
Cannot open load file: No such file or directory, test-citation-folding-exact.el

</tool.toolu_01KAvgHZLwcJDKjpZ5SW17sX>

## ASSISTANT:

Let me run the test from the current directory:

## TOOL USE:

Name: shell-command
ID: toolu_01FcvVREgDpK2AYD8GBcZJUZ

### command

<tool.toolu_01FcvVREgDpK2AYD8GBcZJUZ>
emacs -Q --batch -l test-citation-folding-exact.el
</tool.toolu_01FcvVREgDpK2AYD8GBcZJUZ>

## TOOL RESULT:

ID: toolu_01FcvVREgDpK2AYD8GBcZJUZ

<tool.toolu_01FcvVREgDpK2AYD8GBcZJUZ>
Command failed with exit code 1: Loading /Users/andreas/projects/greger.el/greger-grammar/grgfoo.el (source)...
Loading /Users/andreas/projects/greger.el/greger-grammar/test-visibility-utils.el (source)...
Loading /Users/andreas/projects/greger.el/greger-grammar/grgfoo.el (source)...
DEBUG: citation-folding-function called, node=present
DEBUG: node type=citation_entry start=27 end=93 should-fold=t
DEBUG: Applied invisible property from 27 to 92
Original buffer content:
## ASSISTANT:

Test text

### https://example.com

Title: Test
Cited text: Example citation


Visible buffer content:
## ASSISTANT:

Test text




Text properties debug:
Position 1-93: (face grgfoo-assistant-header-face fontified nil)
Running 1 tests (2025-06-10 20:36:09+0200, selector ‘t’)
DEBUG: citation-folding-function called, node=present
DEBUG: node type=citation_entry start=61 end=238 should-fold=t
DEBUG: Applied invisible property from 61 to 237
DEBUG: citation-folding-function called, node=present
DEBUG: node type=citation_entry start=297 end=442 should-fold=t
DEBUG: Applied invisible property from 297 to 441
=== ACTUAL OUTPUT ===
#("## ASSISTANT:

Einstein developed the theory of relativity while Newton formulated the laws of motion

Einstein developed the theory of relativity while Newton formulated the laws of motion

Einstein developed the theory of relativity while Newton formulated the laws of motion

## CITATIONS:

[+2 citations, TAB to expand]" 0 14 (fontified nil face grgfoo-assistant-header-face) 14 15 (fontified nil) 279 292 (fontified nil face grgfoo-citations-header-face) 292 293 (face grgfoo-citations-header-face fontified nil after-string #("
[+2 citations, TAB to expand]" 0 30 (face font-lock-comment-face))) 293 323 (face font-lock-comment-face))

=== EXPECTED OUTPUT ===
"## ASSISTANT:

Einstein developed the theory of relativity while Newton formulated the laws of motion

## CITATIONS:
[+2 citations, TAB to expand]"

=== ACTUAL LENGTH: 323, EXPECTED LENGTH: 146 ===

=== CHARACTER BY CHARACTER ===
Position 103: actual=69 expected=35
Position 104: actual=105 expected=35
Position 105: actual=110 expected=32
Position 106: actual=115 expected=67
Position 107: actual=116 expected=73
Position 108: actual=101 expected=84
Position 109: actual=105 expected=65
Position 110: actual=110 expected=84
Position 111: actual=32 expected=73
Position 112: actual=100 expected=79
Position 113: actual=101 expected=78
Position 114: actual=118 expected=83
Position 115: actual=101 expected=58
Position 116: actual=108 expected=10
Position 117: actual=111 expected=91
Position 118: actual=112 expected=43
Position 119: actual=101 expected=50
Position 120: actual=100 expected=32
Position 121: actual=32 expected=99
Position 122: actual=116 expected=105
Position 123: actual=104 expected=116
Position 124: actual=101 expected=97
Position 125: actual=32 expected=116
Position 126: actual=116 expected=105
Position 127: actual=104 expected=111
Position 128: actual=101 expected=110
Position 129: actual=111 expected=115
Position 130: actual=114 expected=44
Position 131: actual=121 expected=32
Position 132: actual=32 expected=84
Position 133: actual=111 expected=65
Position 134: actual=102 expected=66
Position 136: actual=114 expected=116
Position 137: actual=101 expected=111
Position 138: actual=108 expected=32
Position 139: actual=97 expected=101
Position 140: actual=116 expected=120
Position 141: actual=105 expected=112
Position 142: actual=118 expected=97
Position 143: actual=105 expected=110
Position 144: actual=116 expected=100
Position 145: actual=121 expected=93
Position 146: actual=32 expected=END
Position 147: actual=119 expected=END
Position 148: actual=104 expected=END
Position 149: actual=105 expected=END
Position 150: actual=108 expected=END
Position 151: actual=101 expected=END
Position 152: actual=32 expected=END
Position 153: actual=78 expected=END
Position 154: actual=101 expected=END
Position 155: actual=119 expected=END
Position 156: actual=116 expected=END
Position 157: actual=111 expected=END
Position 158: actual=110 expected=END
Position 159: actual=32 expected=END
Position 160: actual=102 expected=END
Position 161: actual=111 expected=END
Position 162: actual=114 expected=END
Position 163: actual=109 expected=END
Position 164: actual=117 expected=END
Position 165: actual=108 expected=END
Position 166: actual=97 expected=END
Position 167: actual=116 expected=END
Position 168: actual=101 expected=END
Position 169: actual=100 expected=END
Position 170: actual=32 expected=END
Position 171: actual=116 expected=END
Position 172: actual=104 expected=END
Position 173: actual=101 expected=END
Position 174: actual=32 expected=END
Position 175: actual=108 expected=END
Position 176: actual=97 expected=END
Position 177: actual=119 expected=END
Position 178: actual=115 expected=END
Position 179: actual=32 expected=END
Position 180: actual=111 expected=END
Position 181: actual=102 expected=END
Position 182: actual=32 expected=END
Position 183: actual=109 expected=END
Position 184: actual=111 expected=END
Position 185: actual=116 expected=END
Position 186: actual=105 expected=END
Position 187: actual=111 expected=END
Position 188: actual=110 expected=END
Position 189: actual=10 expected=END
Position 190: actual=10 expected=END
Position 191: actual=69 expected=END
Position 192: actual=105 expected=END
Position 193: actual=110 expected=END
Position 194: actual=115 expected=END
Position 195: actual=116 expected=END
Position 196: actual=101 expected=END
Position 197: actual=105 expected=END
Position 198: actual=110 expected=END
Position 199: actual=32 expected=END
Position 200: actual=100 expected=END
Position 201: actual=101 expected=END
Position 202: actual=118 expected=END
Position 203: actual=101 expected=END
Position 204: actual=108 expected=END
Position 205: actual=111 expected=END
Position 206: actual=112 expected=END
Position 207: actual=101 expected=END
Position 208: actual=100 expected=END
Position 209: actual=32 expected=END
Position 210: actual=116 expected=END
Position 211: actual=104 expected=END
Position 212: actual=101 expected=END
Position 213: actual=32 expected=END
Position 214: actual=116 expected=END
Position 215: actual=104 expected=END
Position 216: actual=101 expected=END
Position 217: actual=111 expected=END
Position 218: actual=114 expected=END
Position 219: actual=121 expected=END
Position 220: actual=32 expected=END
Position 221: actual=111 expected=END
Position 222: actual=102 expected=END
Position 223: actual=32 expected=END
Position 224: actual=114 expected=END
Position 225: actual=101 expected=END
Position 226: actual=108 expected=END
Position 227: actual=97 expected=END
Position 228: actual=116 expected=END
Position 229: actual=105 expected=END
Position 230: actual=118 expected=END
Position 231: actual=105 expected=END
Position 232: actual=116 expected=END
Position 233: actual=121 expected=END
Position 234: actual=32 expected=END
Position 235: actual=119 expected=END
Position 236: actual=104 expected=END
Position 237: actual=105 expected=END
Position 238: actual=108 expected=END
Position 239: actual=101 expected=END
Position 240: actual=32 expected=END
Position 241: actual=78 expected=END
Position 242: actual=101 expected=END
Position 243: actual=119 expected=END
Position 244: actual=116 expected=END
Position 245: actual=111 expected=END
Position 246: actual=110 expected=END
Position 247: actual=32 expected=END
Position 248: actual=102 expected=END
Position 249: actual=111 expected=END
Position 250: actual=114 expected=END
Position 251: actual=109 expected=END
Position 252: actual=117 expected=END
Position 253: actual=108 expected=END
Position 254: actual=97 expected=END
Position 255: actual=116 expected=END
Position 256: actual=101 expected=END
Position 257: actual=100 expected=END
Position 258: actual=32 expected=END
Position 259: actual=116 expected=END
Position 260: actual=104 expected=END
Position 261: actual=101 expected=END
Position 262: actual=32 expected=END
Position 263: actual=108 expected=END
Position 264: actual=97 expected=END
Position 265: actual=119 expected=END
Position 266: actual=115 expected=END
Position 267: actual=32 expected=END
Position 268: actual=111 expected=END
Position 269: actual=102 expected=END
Position 270: actual=32 expected=END
Position 271: actual=109 expected=END
Position 272: actual=111 expected=END
Position 273: actual=116 expected=END
Position 274: actual=105 expected=END
Position 275: actual=111 expected=END
Position 276: actual=110 expected=END
Position 277: actual=10 expected=END
Position 278: actual=10 expected=END
Position 279: actual=35 expected=END
Position 280: actual=35 expected=END
Position 281: actual=32 expected=END
Position 282: actual=67 expected=END
Position 283: actual=73 expected=END
Position 284: actual=84 expected=END
Position 285: actual=65 expected=END
Position 286: actual=84 expected=END
Position 287: actual=73 expected=END
Position 288: actual=79 expected=END
Position 289: actual=78 expected=END
Position 290: actual=83 expected=END
Position 291: actual=58 expected=END
Position 292: actual=10 expected=END
Position 293: actual=10 expected=END
Position 294: actual=91 expected=END
Position 295: actual=43 expected=END
Position 296: actual=50 expected=END
Position 297: actual=32 expected=END
Position 298: actual=99 expected=END
Position 299: actual=105 expected=END
Position 300: actual=116 expected=END
Position 301: actual=97 expected=END
Position 302: actual=116 expected=END
Position 303: actual=105 expected=END
Position 304: actual=111 expected=END
Position 305: actual=110 expected=END
Position 306: actual=115 expected=END
Position 307: actual=44 expected=END
Position 308: actual=32 expected=END
Position 309: actual=84 expected=END
Position 310: actual=65 expected=END
Position 311: actual=66 expected=END
Position 312: actual=32 expected=END
Position 313: actual=116 expected=END
Position 314: actual=111 expected=END
Position 315: actual=32 expected=END
Position 316: actual=101 expected=END
Position 317: actual=120 expected=END
Position 318: actual=112 expected=END
Position 319: actual=97 expected=END
Position 320: actual=110 expected=END
Position 321: actual=100 expected=END
Position 322: actual=93 expected=END
Test test-citations-folding backtrace:
  signal(ert-test-failed (((should (string= expected actual)) :form (s
  ert-fail(((should (string= expected actual)) :form (string= "## ASSI
  (if (unwind-protect (setq value-2 (apply fn-0 args-1)) (setq form-de
  (let (form-description-4) (if (unwind-protect (setq value-2 (apply f
  (let ((value-2 'ert-form-evaluation-aborted-3)) (let (form-descripti
  (let* ((fn-0 #'string=) (args-1 (condition-case err (let ((signal-ho
  (let ((actual (get-visible-buffer (current-buffer))) (expected "## A
  (progn (insert "## ASSISTANT:\n\nEinstein developed the theory of re
  (unwind-protect (progn (insert "## ASSISTANT:\n\nEinstein developed 
  (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn
  (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current
  (lambda nil (let ((temp-buffer (generate-new-buffer " *temp*" t))) (
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-citations-folding :documentation
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests [...] :test-m
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(nil)
  ert-run-tests-batch-and-exit()
  eval-buffer(#<buffer  *load*> nil "/Users/andreas/projects/greger.el
  load-with-code-conversion("/Users/andreas/projects/greger.el/greger-
  load("/Users/andreas/projects/greger.el/greger-grammar/t..." nil t)
  command-line-1(("-l" "test-citation-folding-exact.el"))
  command-line()
  normal-top-level()
Test test-citations-folding condition:
    (ert-test-failed
     ((should
       (string= expected actual))
      :form
      (string= "## ASSISTANT:\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\n## CITATIONS:\n[+2 citations, TAB to expand]"
	       #("## ASSISTANT:\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\n## CITATIONS:\n\n[+2 citations, TAB to expand]" 0 14
		 (fontified nil face grgfoo-assistant-header-face)
		 14 15
		 (fontified nil)
		 279 292
		 (fontified nil face grgfoo-citations-header-face)
		 292 293
		 (face grgfoo-citations-header-face fontified nil after-string
		       #("\n[+2 citations, TAB to expand]" 0 30 ...))
		 293 323
		 (face font-lock-comment-face)))
      :value nil :explanation
      (arrays-of-different-length 146 323 "## ASSISTANT:\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\n## CITATIONS:\n[+2 citations, TAB to expand]"
				  #("## ASSISTANT:\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\nEinstein developed the theory of relativity while Newton formulated the laws of motion\n\n## CITATIONS:\n\n[+2 citations, TAB to expand]" 0 14
				    (fontified nil face grgfoo-assistant-header-face)
				    14 15
				    (fontified nil)
				    279 292
				    (fontified nil face grgfoo-citations-header-face)
				    292 293
				    (face grgfoo-citations-header-face fontified nil after-string
					  #("\n[+2 citations, TAB to expand]" 0 30 ...))
				    293 323
				    (face font-lock-comment-face))
				  first-mismatch-at 103)))
   FAILED  1/1  test-citations-folding (0.229376 sec) at test-citation-folding-exact.el:16

Ran 1 tests, 0 results as expected, 1 unexpected (2025-06-10 20:36:09+0200, 0.423833 sec)

1 unexpected results:
   FAILED  test-citations-folding


</tool.toolu_01FcvVREgDpK2AYD8GBcZJUZ>

## ASSISTANT:

Perfect! Now I can see the issue clearly. The text is being duplicated three times. Looking at the debug output and the code, I can see the problem:

1. The `grgfoo--assistant-block-processor` is being called for each assistant block and applying a display property
2. The `grgfoo--apply-citation-folding` function is also being called and applying another display property 
3. This creates overlapping display properties that cause the text to be repeated

The issue is that both the font-lock function and the post-processing function are trying to handle text merging. I need to consolidate this into a single approach. Let me fix this:

## TOOL USE:

Name: str-replace
ID: toolu_018g7bMv4PifnCKRbgzmbu2v

### file-path

<tool.toolu_018g7bMv4PifnCKRbgzmbu2v>
grgfoo.el
</tool.toolu_018g7bMv4PifnCKRbgzmbu2v>

### original-content

<tool.toolu_018g7bMv4PifnCKRbgzmbu2v>
   :language 'greger
   :feature 'folding
   :override t
   '(;; Citation folding - hide individual citations
     (assistant (citation_entry) @grgfoo--citation-folding-function)
     ;; Assistant block processing for text merging
     (assistant) @grgfoo--assistant-block-processor
     ;; Citations section folding
     (citations) @grgfoo--citations-section-folding-function)
</tool.toolu_018g7bMv4PifnCKRbgzmbu2v>

### new-content

<tool.toolu_018g7bMv4PifnCKRbgzmbu2v>
   :language 'greger
   :feature 'folding
   :override t
   '(;; Citation folding - hide individual citations
     (assistant (citation_entry) @grgfoo--citation-folding-function)
     ;; Citations section folding
     (citations) @grgfoo--citations-section-folding-function)
</tool.toolu_018g7bMv4PifnCKRbgzmbu2v>

### git-commit-message

<tool.toolu_018g7bMv4PifnCKRbgzmbu2v>
Remove duplicate assistant block processor from font-lock rules
</tool.toolu_018g7bMv4PifnCKRbgzmbu2v>

## TOOL RESULT:

ID: toolu_018g7bMv4PifnCKRbgzmbu2v

<tool.toolu_018g7bMv4PifnCKRbgzmbu2v>
Successfully replaced content in /Users/andreas/projects/greger.el/greger-grammar/grgfoo.el. Successfully staged 2 file(s) and committed with message: Remove duplicate assistant block processor from font-lock rules
</tool.toolu_018g7bMv4PifnCKRbgzmbu2v>

## ASSISTANT:

Now I need to fix the `grgfoo--apply-citation-folding` function to properly handle the text merging without overlapping display properties:

## TOOL USE:

Name: str-replace
ID: toolu_013JLkkKN1UWr928wvfWKopP

### file-path

<tool.toolu_013JLkkKN1UWr928wvfWKopP>
grgfoo.el
</tool.toolu_013JLkkKN1UWr928wvfWKopP>

### original-content

<tool.toolu_013JLkkKN1UWr928wvfWKopP>
(defun grgfoo--apply-citation-folding ()
  "Apply comprehensive citation folding to merge assistant text blocks."
  (when grgfoo-citation-folding-enabled
    (save-excursion
      (let ((inhibit-read-only t)
            (modified (buffer-modified-p)))
        (condition-case err
            (progn
              ;; Find all assistant blocks and collect their text
              (goto-char (point-min))
              (let ((assistant-texts '())
                    (assistant-start nil)
                    (assistant-end nil))
                (while (re-search-forward "^## ASSISTANT:$" nil t)
                  (let ((block-start (line-beginning-position))
                        (block-end (save-excursion
                                     (if (re-search-forward "^## " nil t)
                                         (line-beginning-position)
                                       (point-max)))))
                    (unless assistant-start
                      (setq assistant-start block-start))
                    (setq assistant-end block-end)

                    ;; Extract text from this block (skip citations)
                    (goto-char block-start)
                    (forward-line 2) ; Skip header and blank line
                    (while (< (point) block-end)
                      (let ((line-start (line-beginning-position))
                            (line-end (line-end-position)))
                        (when (< line-start line-end)
                          (let ((line-text (buffer-substring-no-properties line-start line-end)))
                            (unless (or (string-match-p "^###" line-text)
                                       (string-match-p "^Title:" line-text)
                                       (string-match-p "^Cited text:" line-text)
                                       (string-match-p "^Encrypted index:" line-text)
                                       (string-match-p "^## " line-text)
                                       (string= "" (string-trim line-text)))
                              (push (string-trim line-text) assistant-texts))))
                        (forward-line 1)))))

                ;; If we have multiple text parts, create merged view
                (when (and (> (length assistant-texts) 1) assistant-start assistant-end)
                  (let ((merged-text (mapconcat 'identity (reverse assistant-texts) " ")))
                    ;; Replace all assistant blocks with single merged block
                    (goto-char assistant-start)
                    (forward-line 2) ; Skip "## ASSISTANT:" and blank line
                    (let ((content-start (point)))
                      (put-text-property content-start assistant-end 'display
                                       (concat merged-text "\n\n"))))))

              ;; Now handle citations section
              (goto-char (point-min))
              (when (re-search-forward "^## CITATIONS:$" nil t)
                (let ((citations-start (line-beginning-position)))
                  (forward-line 1)
                  (let ((citations-content-start (point))
                        (citations-end (point-max)))
                    (when (< citations-content-start citations-end)
                      (put-text-property citations-content-start citations-end 'invisible 'grgfoo-citations)
                      ;; Count citations for summary
                      (let ((citation-count 0))
                        (goto-char citations-content-start)
                        (while (re-search-forward "^### " citations-end t)
                          (setq citation-count (1+ citation-count)))
                        (goto-char citations-start)
                        (end-of-line)
                        (put-text-property (point) (1+ (point)) 'after-string
                                         (propertize (format "\n[+%d citation%s, TAB to expand]"
                                                           citation-count
                                                           (if (= citation-count 1) "" "s"))
                                                   'face 'font-lock-comment-face))))))))
          (error
           (message "ERROR in apply-citation-folding: %s" err)))
        (set-buffer-modified-p modified)))))
</tool.toolu_013JLkkKN1UWr928wvfWKopP>

### new-content

<tool.toolu_013JLkkKN1UWr928wvfWKopP>
(defun grgfoo--apply-citation-folding ()
  "Apply comprehensive citation folding to merge assistant text blocks."
  (when grgfoo-citation-folding-enabled
    (save-excursion
      (let ((inhibit-read-only t)
            (modified (buffer-modified-p)))
        (condition-case err
            (progn
              ;; Clear any existing display properties to avoid duplicates
              (remove-text-properties (point-min) (point-max) '(display))
              
              ;; Find all assistant blocks and collect their text
              (goto-char (point-min))
              (let ((assistant-texts '())
                    (first-assistant-start nil)
                    (last-assistant-end nil)
                    (replacement-start nil))
                
                (while (re-search-forward "^## ASSISTANT:$" nil t)
                  (let ((block-start (line-beginning-position))
                        (block-end (save-excursion
                                     (if (re-search-forward "^## " nil t)
                                         (line-beginning-position)
                                       (point-max)))))
                    ;; Remember the first assistant block position
                    (unless first-assistant-start
                      (setq first-assistant-start block-start)
                      ;; Set replacement start after header
                      (goto-char block-start)
                      (forward-line 2) ; Skip "## ASSISTANT:" and blank line
                      (setq replacement-start (point)))
                    
                    (setq last-assistant-end block-end)

                    ;; Extract text from this block (skip citations)
                    (goto-char block-start)
                    (forward-line 2) ; Skip header and blank line
                    (while (< (point) block-end)
                      (let ((line-start (line-beginning-position))
                            (line-end (line-end-position)))
                        (when (< line-start line-end)
                          (let ((line-text (buffer-substring-no-properties line-start line-end)))
                            (unless (or (string-match-p "^###" line-text)
                                       (string-match-p "^Title:" line-text)
                                       (string-match-p "^Cited text:" line-text)
                                       (string-match-p "^Encrypted index:" line-text)
                                       (string-match-p "^## " line-text)
                                       (string= "" (string-trim line-text)))
                              (push (string-trim line-text) assistant-texts))))
                        (forward-line 1)))))

                ;; If we have multiple text parts, create merged view
                (when (and (> (length assistant-texts) 1) replacement-start last-assistant-end)
                  (let ((merged-text (mapconcat 'identity (reverse assistant-texts) " ")))
                    ;; Replace content from first assistant text to last assistant end with merged text
                    (put-text-property replacement-start last-assistant-end 'display
                                     (concat merged-text "\n\n")))))

              ;; Now handle citations section
              (goto-char (point-min))
              (when (re-search-forward "^## CITATIONS:$" nil t)
                (let ((citations-start (line-beginning-position)))
                  (forward-line 1)
                  (let ((citations-content-start (point))
                        (citations-end (point-max)))
                    (when (< citations-content-start citations-end)
                      (put-text-property citations-content-start citations-end 'invisible 'grgfoo-citations)
                      ;; Count citations for summary
                      (let ((citation-count 0))
                        (goto-char citations-content-start)
                        (while (re-search-forward "^### " citations-end t)
                          (setq citation-count (1+ citation-count)))
                        (goto-char citations-start)
                        (end-of-line)
                        (put-text-property (point) (1+ (point)) 'after-string
                                         (propertize (format "\n[+%d citation%s, TAB to expand]"
                                                           citation-count
                                                           (if (= citation-count 1) "" "s"))
                                                   'face 'font-lock-comment-face))))))))
          (error
           (message "ERROR in apply-citation-folding: %s" err)))
        (set-buffer-modified-p modified)))))
</tool.toolu_013JLkkKN1UWr928wvfWKopP>

### git-commit-message

<tool.toolu_013JLkkKN1UWr928wvfWKopP>
Fix text merging logic to avoid duplicate display properties
</tool.toolu_013JLkkKN1UWr928wvfWKopP>

## TOOL RESULT:

ID: toolu_013JLkkKN1UWr928wvfWKopP

<tool.toolu_013JLkkKN1UWr928wvfWKopP>
Loading...
</tool.toolu_013JLkkKN1UWr928wvfWKopP>